# default
# template base
include:
  - project: 'parer/pipeline-template'
    ref: v2.0
    file: 
      - '/common/default.gitlab-ci.yml'
    inputs:
      component_ref: v2.0



workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "pipeline"' 


create-changelog-and-diff:
  stage: build
  extends: .base
  image: $CI_REGISTRY/parer/containers/alpine-cicd:v3.0
  variables:
    CI_LQ_APP_RELEASE: "" # by default : empty
    LIQUIBASE_COMMAND_USERNAME: ""  # env liquibase username (https://docs.liquibase.com/parameters/home.html)
    LIQUIBASE_COMMAND_PASSWORD: ""  # env liquibase password (https://docs.liquibase.com/parameters/home.html)
    LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME: ""  # env liquibase schema name (https://docs.liquibase.com/parameters/home.html)
    LIQUIBASE_COMMAND_URL: "" # env liquibase database URL (https://docs.liquibase.com/parameters/home.html)
    LIQUIBASE_COMMAND_REFERENCE_URL: "" # env liquibase reference database URL (https://docs.liquibase.com/parameters/home.html)
    LIQUIBASE_COMMAND_REFERENCE_USERNAME: "" # env liquibase reference username (https://docs.liquibase.com/parameters/home.html)
    LIQUIBASE_COMMAND_REFERENCE_PASSWORD: "" # env liquibase reference password (https://docs.liquibase.com/parameters/home.html)    
    LIQUIBASE_DRIVER: "oracle.jdbc.OracleDriver" # env liquibase database driver (https://docs.liquibase.com/parameters/home.html) 
    LIQUIBASE_LOG_LEVEL: "ERROR" # env liquibase log level (https://docs.liquibase.com/parameters/home.html) 
  before_script:
    - !reference [.git-push-before, before_script] # include reference from hidden job (@see dind/Default.gitlab-ci.yml)   
    - !reference [.debug-lastcmd, setup] # include reference from hidden job (@see common/default.gitlab-ci.yml)     
    - test_param=true    
    - if [[ -z "$LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME" ]]; then test_param=false;  echo -e "\033[31m[ERR] LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME non impostato!""\033[0;m"; fi
    - if [[ -z "$LIQUIBASE_COMMAND_USERNAME" ]]; then test_param=false;  echo -e "\033[31m[ERR] LIQUIBASE_COMMAND_USERNAME non impostato!""\033[0;m"; fi
    - if [[ -z "$LIQUIBASE_COMMAND_PASSWORD" ]]; then test_param=false;  echo -e "\033[31m[ERR] LIQUIBASE_COMMAND_PASSWORD non impostato!""\033[0;m"; fi
    - if [[ -z "$LIQUIBASE_COMMAND_REFERENCE_USERNAME" ]]; then test_param=false;  echo -e "\033[31m[ERR] LIQUIBASE_COMMAND_REFERENCE_USERNAME non impostato!""\033[0;m"; fi
    - if [[ -z "$LIQUIBASE_COMMAND_REFERENCE_PASSWORD" ]]; then test_param=false;  echo -e "\033[31m[ERR] LIQUIBASE_COMMAND_REFERENCE_PASSWORD non impostato!""\033[0;m"; fi
    - if [[ -z "$CI_LQ_APP_RELEASE" ]]; then test_param=false;  echo -e "\033[31m[ERR] CI_LQ_APP_RELEASE non impostato!""\033[0;m"; fi
    - | 
      if [[ "$test_param" == "false" ]]; then 
        echo -e "\e[1;32m[INFO] Parametri richiesti: \n LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME \n LIQUIBASE_COMMAND_USERNAME \n LIQUIBASE_COMMAND_PASSWORD \n LIQUIBASE_COMMAND_REFERENCE_USERNAME \n LIQUIBASE_COMMAND_REFERENCE_PASSWORD \n CI_LQ_APP_RELEASE \e[0;m"
        exit 1
      fi
  script:
    - | 
      found=false
      for sch in `ls | grep sch`;  
        do 
          test=$(echo $sch | awk -F 'sch-' '{print $2}');
          if [[ ${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^} == ${test^^} ]]; then
            found=true
          fi;  
        done;
      if [[ "$found" == "false" ]]; then
        echo -e "\033[31m[ERR] Il valore "${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME}" non rientra tra quelli previsti dal progetto !""\033[0;m"; 
        exit 1;
      fi
    - if [[ ! $CI_LQ_APP_RELEASE =~ ^[0-9][0-9.]*$ ]]
       then
        echo -e "\033[31m[ERR] Il valore "${CI_LQ_APP_RELEASE}" non Ã¨ corretto, indicare una versione di tipo X.K.Z""\033[0;m"; 
      fi  
    - echo -e "\e[1;32m[INFO] Making dir sch-$LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME/v$CI_LQ_APP_RELEASE if not exist...\e[0;m"
    - mkdir -p sch-${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}/v$CI_LQ_APP_RELEASE # create dir if not exits (to upper case)
    - !reference [.debug-lastcmd, print] # include reference from hidden job (@see common/default.gitlab-ci.yml)   
    - | # liquibase changelog
      liquibase generate-changelog --changelog-file=sch-${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}/v${CI_LQ_APP_RELEASE^^}/create.${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}.v${CI_LQ_APP_RELEASE^^}.oracle.sql
    - !reference [.debug-lastcmd, print] # include reference from hidden job (@see common/default.gitlab-ci.yml)   
    - | # liqubase diffchangelog
      liquibase diff-changelog --changelog-file=sch-${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}/v${CI_LQ_APP_RELEASE^^}/alter.${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}.v${CI_LQ_APP_RELEASE^^}.oracle.sql
    - !reference [.debug-lastcmd, print] # include reference from hidden job (@see common/default.gitlab-ci.yml)   
    - | # push 
      if [ -n "$(git status --porcelain *.sql)" ]; then
        git checkout -B "$CI_COMMIT_REF_NAME"
        git add *.sql
        git commit -m "[ci skip] Aggiornamento script sql on sch-${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}/v${CI_LQ_APP_RELEASE^^}"
        git push origin $CI_COMMIT_REF_NAME:${CI_COMMIT_REF_NAME}
      fi
  artifacts:
    name: liquibase-sql_${CI_JOB_ID}  
    paths:
      - sch-${LIQUIBASE_COMMAND_DEFAULT_SCHEMA_NAME^^}/v${CI_LQ_APP_RELEASE^^}
    expire_in: 2h      


