-- liquibase formatted sql

-- changeset root:1751554768189-417
ALTER TABLE VRS_XML_DATI_SES_OBJECT_STORAGE DROP CONSTRAINT FK_DATI_SES_OBJ_STO_BACKEND_NEW;

-- changeset root:1751554768189-418
ALTER TABLE VRS_XML_DATI_SES_OBJECT_STORAGE DROP CONSTRAINT FK_DAT_SES_VRS_XML_DATI_SES_OBJ_STO;

-- changeset root:1751554768189-419
ALTER TABLE VRS_FILE_SESSIONE DROP CONSTRAINT FK_FIL_SES_DAT_SES_VRS;

-- changeset root:1751554768189-420
ALTER TABLE LOG_OPER DROP CONSTRAINT FK_LOG_OPE_LOG_JOB;

-- changeset root:1751554768189-421
ALTER TABLE DEC_MODELLO_XSD_FASCICOLO DROP CONSTRAINT FK_MDL_XSD_FASC_AMB;

-- changeset root:1751554768189-422
ALTER TABLE DEC_MODELLO_XSD_FASCICOLO DROP CONSTRAINT FK_MDL_XSD_FASC_SIS_MGZ;

-- changeset root:1751554768189-423
ALTER TABLE VRS_SES_FASCICOLO_KO DROP CONSTRAINT FK_SES_FASC_KO_ERR_PRINC;

-- changeset root:1751554768189-424
ALTER TABLE VRS_SES_FASCICOLO_KO DROP CONSTRAINT FK_SES_FASC_KO_FASC;

-- changeset root:1751554768189-425
ALTER TABLE VRS_SES_FASCICOLO_KO DROP CONSTRAINT FK_SES_FASC_KO_TI_FASC;

-- changeset root:1751554768189-426
ALTER TABLE VRS_SES_FASCICOLO_KO DROP CONSTRAINT FK_SES_FASC_KO_USR;

-- changeset root:1751554768189-427
ALTER TABLE VRS_FILE_SES_OBJECT_STORAGE DROP CONSTRAINT FK_SES_OBJ_STO_BACKEND;

-- changeset root:1751554768189-428
ALTER TABLE VRS_FILE_SES_OBJECT_STORAGE DROP CONSTRAINT FK_SES_OBJ_STO_FILE_SES;

-- changeset root:1751554768189-429
ALTER TABLE VRS_SESSIONE_VERS_SOSP DROP CONSTRAINT FK_SES_VRS_SOSP_SES_VRS;

-- changeset root:1751554768189-430
ALTER TABLE ARO_UPD_DATI_SPEC_UNITA_DOC DROP CONSTRAINT FK_UPD_DATI_SPEC_UPD_COMP_UD;

-- changeset root:1751554768189-1
ALTER TABLE ARO_COMP_OBJECT_STORAGE DROP CONSTRAINT FK_COMP_OBJ_STO_BACKEND;

-- changeset root:1751554768189-3
ALTER TABLE VRS_XML_DATI_SES_OBJECT_STORAGE_KO DROP CONSTRAINT FK_DAT_SES_VRS_XML_DATI_SES_OBJ_STO_KO;

-- changeset root:1751554768189-5
ALTER TABLE ELV_FILE_ELENCO_VERS DROP CONSTRAINT FK_FILE_ELE_VRS_ELE_VRS;

-- changeset root:1751554768189-7
ALTER TABLE VRS_FILE_SESSIONE_KO DROP CONSTRAINT FK_ID_DATI_SESSIONE_VERS_KO;

-- changeset root:1751554768189-9
ALTER TABLE ARO_UNITA_DOC DROP CONSTRAINT FK_ID_USER_VERS_ID_USER_IAM;

-- changeset root:1751554768189-11
ALTER TABLE ELV_LOG_ELENCO_VERS_HISTORY DROP CONSTRAINT FK_LOG_ELE_VRS_STRUT_HIST;

-- changeset root:1751554768189-13
ALTER TABLE ELV_LOG_ELENCO_VERS_HISTORY DROP CONSTRAINT FK_LOG_ELE_VRS_USR_HIST;

-- changeset root:1751554768189-15
ALTER TABLE LOG_JOB_HISTORY DROP CONSTRAINT FK_LOG_JOB_STRUT_HIST;

-- changeset root:1751554768189-17
ALTER TABLE DEC_MODELLO_TIPO_SERIE DROP CONSTRAINT FK_MODL_TI_SER_TI_UD_SPEC;

-- changeset root:1751554768189-19
ALTER TABLE FIR_REPORT DROP CONSTRAINT FK_REPORT_OBJ_STO_BACKEND;

-- changeset root:1751554768189-21
ALTER TABLE VRS_DATI_SESSIONE_VERS_KO DROP CONSTRAINT FK_SESSIONE_VERS_KO;

-- changeset root:1751554768189-23
ALTER TABLE SER_VER_SERIE_OBJECT_STORAGE DROP CONSTRAINT FK_VER_IX_AIP_SERIE_OBJ_STO_BACKEND_NEW;

-- changeset root:1751554768189-25
ALTER TABLE SER_VER_SERIE_OBJECT_STORAGE DROP CONSTRAINT FK_VER_IX_AIP_SER_VER_SERIE_OBJ_STO;

-- changeset root:1751554768189-27
ALTER TABLE ARO_VER_INDICE_AIP_UD_OBJECT_STORAGE DROP CONSTRAINT FK_VER_IX_AIP_UD_OBJ_STO_BACKEND_NEW;

-- changeset root:1751554768189-29
ALTER TABLE VRS_ERR_SESSIONE_VERS_KO DROP CONSTRAINT FK_VRS_ERR_SESSIONE_VERS_KO;

-- changeset root:1751554768189-31
ALTER TABLE VRS_XML_DATI_SESSIONE_VERS_KO DROP CONSTRAINT FK_VRS_XML_DATI_SESSIONE_VERS_KO;

-- changeset root:1751554768189-275
CREATE TABLE SEQ_DOC_PROVVED_SEQUESTRO (ID_DOC_PROVVED_SEQUESTRO NUMBER NOT NULL, ID_SEQUESTRO NUMBER NOT NULL, CD_DOC_PROVVED_SEQUESTRO VARCHAR2(100 BYTE) NOT NULL, DS_DOC_PROVVED_SEQUESTRO VARCHAR2(254 BYTE) NOT NULL, ID_UNITA_DOC NUMBER, DT_DOC_PROVVED_SEQUESTRO date NOT NULL, DL_OGGETTO_PROVVED_SEQUESTRO VARCHAR2(4000 BYTE) NOT NULL, CONSTRAINT PK_DOC_PROV_SEQ PRIMARY KEY (ID_DOC_PROVVED_SEQUESTRO));

-- changeset root:1751554768189-276
CREATE TABLE SEQ_UD_APPART_SEQUESTRO (ID_UD_APPART_SEQUESTRO NUMBER NOT NULL, ID_SEQUESTRO NUMBER NOT NULL, ID_UNITA_DOC NUMBER NOT NULL, TI_STATO_UD_APPART_SEQUESTRO VARCHAR2(30 BYTE) NOT NULL, ID_ELENCO_SEQUESTRO NUMBER, ID_VOL_ELENCO_SEQUESTRO NUMBER, ID_SESSIONE_RECUP NUMBER, TI_STATO_RECUP_UD VARCHAR2(20 BYTE), CONSTRAINT PK_UD_APP_SEQ PRIMARY KEY (ID_UD_APPART_SEQUESTRO));

-- changeset root:1751554768189-277
CREATE TABLE VRS_SESSIONE_VERS_ERR_TAB_ORI_ELIMINATE (ID_VRS_SESSIONE_VERS_ERR_TAB_ORI_ELIMINATE NUMBER GENERATED ALWAYS AS IDENTITY NOT NULL, ID_STRUT NUMBER, NM_STRUT VARCHAR2(100 BYTE), DS_STRUT VARCHAR2(254 BYTE), NI_SES_ELIMINATE NUMBER, DT_ELAB date, DT_RIF date, CONSTRAINT PK_VRS_SESSIONE_VERS_ERR_TAB_ORI_ELIMINATE PRIMARY KEY (ID_VRS_SESSIONE_VERS_ERR_TAB_ORI_ELIMINATE));

-- changeset root:1751554768189-278
CREATE TABLE FDL_ARO_REQ_UD_DA_CANC (ID NUMBER(19, 0) NOT NULL, ID_FK NUMBER(19, 0), STATO VARCHAR2(200 BYTE), MODIFIED TIMESTAMP(0) DEFAULT SYSTIMESTAMP NOT NULL, CONSTRAINT SYS_C0064434 PRIMARY KEY (ID));

-- changeset root:1751554768189-279
CREATE SEQUENCE SFDL_ARO_REQ_UD_DA_CANC START WITH 39901 INCREMENT BY 1 MINVALUE 1 MAXVALUE 9999999999999999999999999999 CACHE 20 NOORDER;

-- changeset root:1751554768189-280
CREATE OR REPLACE FORCE VIEW FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 (ID, MODIFIED, ID_PK_LIV_2, TBL_LIV_2) AS SELECT ID, MODIFIED, ID_ARCHIV_SEC as ID_PK_LIV_2, 'ARO_ARCHIV_SEC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_ARCHIV_SEC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_COMP_DOC as ID_PK_LIV_2, 'ARO_COMP_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_COMP_DOC ON ID_FK=ID_UNITA_DOC_RIF WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_DOC as ID_PK_LIV_2, 'ARO_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_DOC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_INDICE_AIP as ID_PK_LIV_2, 'ARO_INDICE_AIP_UD' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_INDICE_AIP_UD ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_INDICE_AIP_DA_ELAB as ID_PK_LIV_2, 'ARO_INDICE_AIP_UD_DA_ELAB' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_INDICE_AIP_UD_DA_ELAB ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_ITEM_RICH_ANNUL_VERS as ID_PK_LIV_2, 'ARO_ITEM_RICH_ANNUL_VERS' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_ITEM_RICH_ANNUL_VERS ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_LINK_UNITA_DOC as ID_PK_LIV_2, 'ARO_LINK_UNITA_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_LINK_UNITA_DOC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_LINK_UNITA_DOC as ID_PK_LIV_2, 'ARO_LINK_UNITA_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_LINK_UNITA_DOC ON ID_FK=ID_UNITA_DOC_LINK WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_NOTA_UNITA_DOC as ID_PK_LIV_2, 'ARO_NOTA_UNITA_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_NOTA_UNITA_DOC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UD_APPART_VER_SERIE as ID_PK_LIV_2, 'ARO_UD_APPART_VER_SERIE' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_UD_APPART_VER_SERIE ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UPD_UNITA_DOC as ID_PK_LIV_2, 'ARO_UPD_UNITA_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_UPD_UNITA_DOC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_USO_XSD_DATI_SPEC as ID_PK_LIV_2, 'ARO_USO_XSD_DATI_SPEC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_USO_XSD_DATI_SPEC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_VERS_INI_UNITA_DOC as ID_PK_LIV_2, 'ARO_VERS_INI_UNITA_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_VERS_INI_UNITA_DOC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_WARN_UNITA_DOC as ID_PK_LIV_2, 'ARO_WARN_UNITA_DOC' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_WARN_UNITA_DOC ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UNITA_DOC as ID_PK_LIV_2, 'ARO_XML_UNITA_DOC_OBJECT_STORAGE' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ARO_XML_UNITA_DOC_OBJECT_STORAGE ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_ELENCO_VERS_UD_ANNUL as ID_PK_LIV_2, 'ELV_ELENCO_VERS_UD_ANNUL' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ELV_ELENCO_VERS_UD_ANNUL ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UD_VERS_DA_ELAB_ELENCO as ID_PK_LIV_2, 'ELV_UD_VERS_DA_ELAB_ELENCO' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN ELV_UD_VERS_DA_ELAB_ELENCO ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_FASCICOLO as ID_PK_LIV_2, 'FAS_FASCICOLO' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN FAS_FASCICOLO ON ID_FK=ID_UNITA_DOC_LAST WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_FASCICOLO as ID_PK_LIV_2, 'FAS_FASCICOLO' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN FAS_FASCICOLO ON ID_FK=ID_UNITA_DOC_FIRST WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UNITA_DOC_FASCICOLO as ID_PK_LIV_2, 'FAS_UNITA_DOC_FASCICOLO' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN FAS_UNITA_DOC_FASCICOLO ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UNITA_DOC_RECUP as ID_PK_LIV_2, 'REC_UNITA_DOC_RECUP' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN REC_UNITA_DOC_RECUP ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_DOC_PROVVED_SEQUESTRO as ID_PK_LIV_2, 'SEQ_DOC_PROVVED_SEQUESTRO' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN SEQ_DOC_PROVVED_SEQUESTRO ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UD_APPART_SEQUESTRO as ID_PK_LIV_2, 'SEQ_UD_APPART_SEQUESTRO' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN SEQ_UD_APPART_SEQUESTRO ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_UD_ERR_FILE_INPUT as ID_PK_LIV_2, 'SER_UD_ERR_FILE_INPUT' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN SER_UD_ERR_FILE_INPUT ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_APPART_UNITA_DOC_VOLUME as ID_PK_LIV_2, 'VOL_APPART_UNITA_DOC_VOLUME' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN VOL_APPART_UNITA_DOC_VOLUME ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_VOLUME_VERS_UD_ANNUL as ID_PK_LIV_2, 'VOL_VOLUME_VERS_UD_ANNUL' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN VOL_VOLUME_VERS_UD_ANNUL ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_SESSIONE_VERS as ID_PK_LIV_2, 'VRS_SESSIONE_VERS' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN VRS_SESSIONE_VERS ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE'
UNION ALL
SELECT ID, MODIFIED, ID_SESSIONE_VERS_KO as ID_PK_LIV_2, 'VRS_SESSIONE_VERS' as TBL_LIV_2 FROM FDL_ARO_REQ_UD_DA_CANC INNER JOIN VRS_SESSIONE_VERS_KO ON ID_FK=ID_UNITA_DOC WHERE STATO='DA_CANCELLARE';

-- changeset root:1751554768189-281
CREATE OR REPLACE FORCE VIEW ELV_V_LIS_DOC_BY_ELENCO_NEW_DDN (ID_ELENCO_VERS, ID_UNITA_DOC, ID_STRUT_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, ID_TIPO_UNITA_DOC, ID_REGISTRO_UNITA_DOC, ID_SUB_STRUT, DS_KEY_ORD, TI_STATO_ELENCO_VERS, TI_STATO_CONSERVAZIONE, ID_DOC, ID_STRUT_DOC, DT_CREAZIONE_DOC, FL_FORZA_ACCETTAZIONE, FL_FORZA_CONSERVAZIONE, ID_TIPO_DOC, TI_DOC, PG_DOC, NI_ORD_DOC) AS SELECT 
     
        CASE
           WHEN doc.ti_creazione = 'VERSAMENTO_UNITA_DOC' THEN ud.id_elenco_vers
           ELSE doc.id_elenco_Vers
       END AS id_elenco_vers,
       ud.id_unita_doc,
       ud.id_strut                 AS id_strut_unita_doc,
       ud.cd_registro_key_unita_doc,
       ud.aa_key_unita_doc,
       ud.cd_key_unita_doc,
       ud.id_tipo_unita_doc,
       ud.id_registro_unita_doc,
       ud.id_sub_strut,
       ud.ds_key_ord,
       CASE
           WHEN doc.ti_creazione = 'VERSAMENTO_UNITA_DOC' THEN ud.ti_stato_ud_elenco_vers
           WHEN doc.ti_creazione = 'AGGIUNTA_DOCUMENTO' AND doc.ti_stato_doc_elenco_vers IS NOT NULL THEN doc.ti_stato_doc_elenco_vers
           ELSE ud.ti_stato_ud_elenco_vers
       END AS ti_stato_elenco_vers,
       ud.ti_stato_conservazione,
       doc.id_doc,
       doc.id_strut                 AS id_strut_doc,
       doc.dt_creazione,
       doc.fl_forza_accettazione,
       doc.fl_forza_conservazione,
       doc.id_tipo_doc,
       doc.ti_doc,
       doc.pg_doc,
       doc.ni_ord_doc
  FROM ARO_UNITA_DOC ud
       JOIN ARO_DOC doc 
       ON doc.id_unita_doc = ud.id_unita_doc
 WHERE doc.ti_creazione IN ('VERSAMENTO_UNITA_DOC', 'AGGIUNTA_DOCUMENTO');

-- changeset root:1751554768189-282
CREATE OR REPLACE FORCE VIEW FDL_V_SEL_UD_CHILD_TABLE_LEVEL_3 (ID, MODIFIED, ID_PK_LIV_3, TBL_LIV_3) AS WITH 
 CTE_ARO_COMP_DOC AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_COMP_DOC'),
 CTE_ARO_DOC AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_DOC'),
 CTE_ARO_INDICE_AIP_UD AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_INDICE_AIP_UD'),
 CTE_ARO_INDICE_AIP_UD_DA_ELAB AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_INDICE_AIP_UD_DA_ELAB'),
 CTE_ARO_ITEM_RICH_ANNUL_VERS AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_ITEM_RICH_ANNUL_VERS'),
 CTE_ARO_UPD_UNITA_DOC AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_UPD_UNITA_DOC'),
 CTE_ARO_USO_XSD_DATI_SPEC AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_USO_XSD_DATI_SPEC'),
 CTE_ARO_VERS_INI_UNITA_DOC AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='ARO_VERS_INI_UNITA_DOC'),
 CTE_REC_UNITA_DOC_RECUP AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='REC_UNITA_DOC_RECUP'),
 CTE_FAS_FASCICOLO AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='FAS_FASCICOLO'),
 CTE_VOL_APPART_UNITA_DOC_VOLUME AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='VOL_APPART_UNITA_DOC_VOLUME'),
 CTE_VRS_SESSIONE_VERS AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='VRS_SESSIONE_VERS'),
 CTE_VRS_SESSIONE_VERS_KO AS (SELECT L2.* FROM FDL_V_SEL_UD_CHILD_TABLE_LEVEL_2 L2 WHERE TBL_LIV_2='VRS_SESSIONE_VERS_KO')
  /* ARO_COMP_DOC */
SELECT ID, MODIFIED, ID_APPART_COMP_VOLUME as ID_PK_LIV_3, 'VOL_APPART_COMP_VOLUME' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN VOL_APPART_COMP_VOLUME ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_BUSTA_CRITTOG as ID_PK_LIV_3, 'ARO_BUSTA_CRITTOG' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_BUSTA_CRITTOG ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_COMP_DOC as ID_PK_LIV_3, 'ARO_COMP_DOC' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_COMP_DOC ON ID_PK_LIV_2=ID_COMP_DOC_PADRE
UNION ALL
SELECT ID, MODIFIED, ID_COMP_HASH_CALC as ID_PK_LIV_3, 'ARO_COMP_HASH_CALC' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_COMP_HASH_CALC ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_COMP_INDICE_AIP_DA_ELAB as ID_PK_LIV_3, 'ARO_COMP_INDICE_AIP_DA_ELAB' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_COMP_INDICE_AIP_DA_ELAB ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_COMP_OBJECT_STORAGE as ID_PK_LIV_3, 'ARO_COMP_OBJECT_STORAGE' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_COMP_OBJECT_STORAGE ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_COMP_URN_CALC as ID_PK_LIV_3, 'ARO_COMP_URN_CALC' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_COMP_URN_CALC ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_COMP_VER_INDICE_AIP_UD as ID_PK_LIV_3, 'ARO_COMP_VER_INDICE_AIP_UD' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_COMP_VER_INDICE_AIP_UD ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_FIRMA_COMP as ID_PK_LIV_3, 'ARO_FIRMA_COMP' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_FIRMA_COMP ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_FIR_REPORT as ID_PK_LIV_3, 'FIR_REPORT' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN FIR_REPORT ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_MARCA_COMP as ID_PK_LIV_3, 'ARO_MARCA_COMP' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_MARCA_COMP ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_SESSIONE_RECUP as ID_PK_LIV_3, 'REC_SESSIONE_RECUP' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN REC_SESSIONE_RECUP ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_COMP_UNITA_DOC as ID_PK_LIV_3, 'ARO_UPD_COMP_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_UPD_COMP_UNITA_DOC ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_USO_XSD_DATI_SPEC as ID_PK_LIV_3, 'ARO_USO_XSD_DATI_SPEC' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_USO_XSD_DATI_SPEC ON ID_PK_LIV_2=ID_COMP_DOC
UNION ALL
SELECT ID, MODIFIED, ID_VERS_INI_COMP as ID_PK_LIV_3, 'ARO_VERS_INI_COMP' as TBL_LIV_3 FROM CTE_ARO_COMP_DOC INNER JOIN ARO_VERS_INI_COMP ON ID_PK_LIV_2=ID_COMP_DOC
/* ARO_DOC */
UNION ALL
SELECT ID, MODIFIED, ID_APPART_DOC_VOLUME as ID_PK_LIV_3, 'VOL_APPART_DOC_VOLUME' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN VOL_APPART_DOC_VOLUME ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_WARN_UNITA_DOC as ID_PK_LIV_3, 'ARO_WARN_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ARO_WARN_UNITA_DOC ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_DOC_AGG_DA_ELAB_ELENCO as ID_PK_LIV_3, 'ELV_DOC_AGG_DA_ELAB_ELENCO' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ELV_DOC_AGG_DA_ELAB_ELENCO ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_SESSIONE_RECUP as ID_PK_LIV_3, 'REC_SESSIONE_RECUP' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN REC_SESSIONE_RECUP ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_SESSIONE_VERS_KO as ID_PK_LIV_3, 'VRS_SESSIONE_VERS_KO' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN VRS_SESSIONE_VERS_KO ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_STRUT_DOC as ID_PK_LIV_3, 'ARO_STRUT_DOC' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ARO_STRUT_DOC ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_DOC_UNITA_DOC as ID_PK_LIV_3, 'ARO_UPD_DOC_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ARO_UPD_DOC_UNITA_DOC ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_USO_XSD_DATI_SPEC as ID_PK_LIV_3, 'ARO_USO_XSD_DATI_SPEC' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ARO_USO_XSD_DATI_SPEC ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_VERS_INI_DOC as ID_PK_LIV_3, 'ARO_VERS_INI_DOC' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ARO_VERS_INI_DOC ON ID_PK_LIV_2=ID_DOC
UNION ALL
SELECT ID, MODIFIED, ID_DOC as ID_PK_LIV_3, 'ARO_XML_DOC_OBJECT_STORAGE' as TBL_LIV_3 FROM CTE_ARO_DOC INNER JOIN ARO_XML_DOC_OBJECT_STORAGE ON ID_PK_LIV_2=ID_DOC
/* ARO_INDICE_AIP_UD */
UNION ALL
SELECT ID, MODIFIED, ID_AIP_REST_ARCHIVIO as ID_PK_LIV_3, 'ARO_AIP_RESTITUZIONE_ARCHIVIO' as TBL_LIV_3 FROM CTE_ARO_INDICE_AIP_UD INNER JOIN ARO_AIP_RESTITUZIONE_ARCHIVIO ON ID_PK_LIV_2=ID_INDICE_AIP
UNION ALL
SELECT ID, MODIFIED, ID_VER_INDICE_AIP as ID_PK_LIV_3, 'ARO_VER_INDICE_AIP_UD' as TBL_LIV_3 FROM CTE_ARO_INDICE_AIP_UD INNER JOIN ARO_VER_INDICE_AIP_UD ON ID_PK_LIV_2=ID_INDICE_AIP
/* ARO_INDICE_AIP_UD_DA_ELAB */
UNION ALL
SELECT ID, MODIFIED, ID_COMP_INDICE_AIP_DA_ELAB as ID_PK_LIV_3, 'ARO_COMP_INDICE_AIP_DA_ELAB' as TBL_LIV_3 FROM CTE_ARO_INDICE_AIP_UD_DA_ELAB INNER JOIN ARO_COMP_INDICE_AIP_DA_ELAB ON ID_PK_LIV_2=ID_INDICE_AIP_DA_ELAB
UNION ALL
SELECT ID, MODIFIED, ID_UPD_UD_INDICE_AIP_DA_ELAB as ID_PK_LIV_3, 'ARO_UPD_UD_INDICE_AIP_DA_ELAB' as TBL_LIV_3 FROM CTE_ARO_INDICE_AIP_UD_DA_ELAB INNER JOIN ARO_UPD_UD_INDICE_AIP_DA_ELAB ON ID_PK_LIV_2=ID_INDICE_AIP_DA_ELAB
/* ARO_ITEM_RICH_ANNUL_VERS */
UNION ALL
SELECT ID, MODIFIED, ID_ERR_RICH_ANNUL_VRS as ID_PK_LIV_3, 'ARO_ERR_RICH_ANNUL_VERS' as TBL_LIV_3 FROM CTE_ARO_ITEM_RICH_ANNUL_VERS INNER JOIN ARO_ERR_RICH_ANNUL_VERS ON ID_PK_LIV_2=ID_ITEM_RICH_ANNUL_VERS
/* ARO_UPD_UNITA_DOC */
UNION ALL
SELECT ID, MODIFIED, ID_SES_UPD_UNITA_DOC_KO as ID_PK_LIV_3, 'VRS_SES_UPD_UNITA_DOC_KO' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN VRS_SES_UPD_UNITA_DOC_KO ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_ARCHIV_SEC as ID_PK_LIV_3, 'ARO_UPD_ARCHIV_SEC' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_ARCHIV_SEC ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_DATI_SPEC_UD_OBJECT_STORAGE as ID_PK_LIV_3, 'ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_DATI_SPEC_UNITA_DOC as ID_PK_LIV_3, 'ARO_UPD_DATI_SPEC_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_DATI_SPEC_UNITA_DOC ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_DOC_UNITA_DOC as ID_PK_LIV_3, 'ARO_UPD_DOC_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_DOC_UNITA_DOC ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_LINK_UNITA_DOC as ID_PK_LIV_3, 'ARO_UPD_LINK_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_LINK_UNITA_DOC ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_UD_DA_ELAB_ELENCO as ID_PK_LIV_3, 'ELV_UPD_UD_DA_ELAB_ELENCO' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ELV_UPD_UD_DA_ELAB_ELENCO ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_UD_INDICE_AIP_DA_ELAB as ID_PK_LIV_3, 'ARO_UPD_UD_INDICE_AIP_DA_ELAB' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_UD_INDICE_AIP_DA_ELAB ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_UD_VER_INDICE_AIP_UD as ID_PK_LIV_3, 'ARO_UPD_UD_VER_INDICE_AIP_UD' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_UPD_UD_VER_INDICE_AIP_UD ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_WARN_UPD_UNITA_DOC as ID_PK_LIV_3, 'ARO_WARN_UPD_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_WARN_UPD_UNITA_DOC ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_XML_UPD_UNITA_DOC as ID_PK_LIV_3, 'ARO_XML_UPD_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_XML_UPD_UNITA_DOC ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_UPD_UNITA_DOC as ID_PK_LIV_3, 'ARO_XML_UPD_UD_OBJECT_STORAGE' as TBL_LIV_3 FROM CTE_ARO_UPD_UNITA_DOC INNER JOIN ARO_XML_UPD_UD_OBJECT_STORAGE ON ID_PK_LIV_2=ID_UPD_UNITA_DOC
/* ARO_USO_XSD_DATI_SPEC */
UNION ALL
SELECT ID, MODIFIED, ID_VALORE_ATTRIB_DATI_SPEC as ID_PK_LIV_3, 'ARO_VALORE_ATTRIB_DATI_SPEC' as TBL_LIV_3 FROM CTE_ARO_USO_XSD_DATI_SPEC INNER JOIN ARO_VALORE_ATTRIB_DATI_SPEC ON ID_PK_LIV_2=ID_USO_XSD_DATI_SPEC
/* ARO_VERS_INI_UNITA_DOC */
UNION ALL
SELECT ID, MODIFIED, ID_VERS_INI_ARCHIV_SEC as ID_PK_LIV_3, 'ARO_VERS_INI_ARCHIV_SEC' as TBL_LIV_3 FROM CTE_ARO_VERS_INI_UNITA_DOC INNER JOIN ARO_VERS_INI_ARCHIV_SEC ON ID_PK_LIV_2=ID_VERS_INI_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_VERS_INI_DOC as ID_PK_LIV_3, 'ARO_VERS_INI_DOC' as TBL_LIV_3 FROM CTE_ARO_VERS_INI_UNITA_DOC INNER JOIN ARO_VERS_INI_DOC ON ID_PK_LIV_2=ID_VERS_INI_UNITA_DOC
UNION ALL
SELECT ID, MODIFIED, ID_VERS_INI_LINK_UNITA_DOC as ID_PK_LIV_3, 'ARO_VERS_INI_LINK_UNITA_DOC' as TBL_LIV_3 FROM CTE_ARO_VERS_INI_UNITA_DOC INNER JOIN ARO_VERS_INI_LINK_UNITA_DOC ON ID_PK_LIV_2=ID_VERS_INI_UNITA_DOC
/* FAS_FASCICOLO */
UNION ALL
SELECT ID, MODIFIED, ID_VER_AIP_FASCICOLO as ID_PK_LIV_3, 'FAS_VER_AIP_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_VER_AIP_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_AIP_FASCICOLO_DA_ELAB as ID_PK_LIV_3, 'FAS_AIP_FASCICOLO_DA_ELAB' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_AIP_FASCICOLO_DA_ELAB ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_AMMIN_PARTEC as ID_PK_LIV_3, 'FAS_AMMIN_PARTEC' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_AMMIN_PARTEC ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_ELENCO_VERS_FASC_ANNUL as ID_PK_LIV_3, 'ELV_ELENCO_VERS_FASC_ANNUL' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN ELV_ELENCO_VERS_FASC_ANNUL ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_STATO_FASCICOLO_ELENCO as ID_PK_LIV_3, 'FAS_STATO_FASCICOLO_ELENCO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_STATO_FASCICOLO_ELENCO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_EVENTO_FASCICOLO as ID_PK_LIV_3, 'FAS_EVENTO_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_EVENTO_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_FASC_DA_ELAB_ELENCO as ID_PK_LIV_3, 'ELV_FASC_DA_ELAB_ELENCO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN ELV_FASC_DA_ELAB_ELENCO ON ID_PK_LIV_2=ID_FASCICOLO
/* SELF-JOIN */
/* UNION ALL */
/* SELECT ID, MODIFIED, ID_FASCICOLO as ID_PK_LIV_3, 'FAS_FASCICOLO' as TBL_LIV_3 FROM FDL_UD_TABLE_LEVEL_2 INNER JOIN FAS_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO_PADRE WHERE TBL_LIV_2='FAS_FASCICOLO' */
/* end SELF-JOIN */
UNION ALL
SELECT ID, MODIFIED, ID_ITEM_RICH_ANNUL_VERS as ID_PK_LIV_3, 'ARO_ITEM_RICH_ANNUL_VERS' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN ARO_ITEM_RICH_ANNUL_VERS ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_LINK_FASCICOLO as ID_PK_LIV_3, 'FAS_LINK_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_LINK_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO_LINK
UNION ALL
SELECT ID, MODIFIED, ID_LINK_FASCICOLO as ID_PK_LIV_3, 'FAS_LINK_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_LINK_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_RESP_FASCICOLO as ID_PK_LIV_3, 'FAS_RESP_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_RESP_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_SES_FASCICOLO_KO as ID_PK_LIV_3, 'VRS_SES_FASCICOLO_KO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN VRS_SES_FASCICOLO_KO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_SOG_FASCICOLO as ID_PK_LIV_3, 'FAS_SOG_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_SOG_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_STATO_CONSERV_FASCICOLO as ID_PK_LIV_3, 'FAS_STATO_CONSERV_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_STATO_CONSERV_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_UNITA_DOC_FASCICOLO as ID_PK_LIV_3, 'FAS_UNITA_DOC_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_UNITA_DOC_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_UNI_ORG_RESP_FASCICOLO as ID_PK_LIV_3, 'FAS_UNI_ORG_RESP_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_UNI_ORG_RESP_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_VALORE_ATTRIB_FASCICOLO as ID_PK_LIV_3, 'FAS_VALORE_ATTRIB_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_VALORE_ATTRIB_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_VOCE_CLASSIF as ID_PK_LIV_3, 'FAS_VOCE_CLASSIF' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_VOCE_CLASSIF ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_WARN_FASCICOLO as ID_PK_LIV_3, 'FAS_WARN_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_WARN_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_XML_VERS_FASCICOLO as ID_PK_LIV_3, 'FAS_XML_VERS_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_XML_VERS_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_FASCICOLO as ID_PK_LIV_3, 'FAS_XML_FASC_OBJECT_STORAGE' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_XML_FASC_OBJECT_STORAGE ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_XML_FASCICOLO as ID_PK_LIV_3, 'FAS_XML_FASCICOLO' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_XML_FASCICOLO ON ID_PK_LIV_2=ID_FASCICOLO
UNION ALL
SELECT ID, MODIFIED, ID_FASCICOLO as ID_PK_LIV_3, 'FAS_XML_VERS_FASC_OBJECT_STORAGE' as TBL_LIV_3 FROM CTE_FAS_FASCICOLO INNER JOIN FAS_XML_VERS_FASC_OBJECT_STORAGE ON ID_PK_LIV_2=ID_FASCICOLO
/* REC_UNITA_DOC_RECUP */
UNION ALL
SELECT ID, MODIFIED, ID_SESSIONE_RECUP as ID_PK_LIV_3, 'REC_SESSIONE_RECUP' as TBL_LIV_3 FROM CTE_REC_UNITA_DOC_RECUP INNER JOIN REC_SESSIONE_RECUP ON ID_PK_LIV_2=ID_UNITA_DOC_RECUP
/* VOL_APPART_UNITA_DOC_VOLUME */
UNION ALL
SELECT ID, MODIFIED, ID_APPART_DOC_VOLUME as ID_PK_LIV_3, 'VOL_APPART_DOC_VOLUME' as TBL_LIV_3 FROM CTE_VOL_APPART_UNITA_DOC_VOLUME INNER JOIN VOL_APPART_DOC_VOLUME ON ID_PK_LIV_2=ID_APPART_UNITA_DOC_VOLUME
/* VRS_SESSIONE_VERS */
UNION ALL
SELECT ID, MODIFIED, ID_DATI_SESSIONE_VERS as ID_PK_LIV_3, 'VRS_DATI_SESSIONE_VERS' as TBL_LIV_3 FROM CTE_VRS_SESSIONE_VERS INNER JOIN VRS_DATI_SESSIONE_VERS ON ID_PK_LIV_2=ID_SESSIONE_VERS
/* VRS_SESSIONE_VERS_KO */
UNION ALL
SELECT ID, MODIFIED, ID_DATI_SESSIONE_VERS_KO as ID_PK_LIV_3, 'VRS_DATI_SESSIONE_VERS_KO' as TBL_LIV_3 FROM CTE_VRS_SESSIONE_VERS_KO INNER JOIN VRS_DATI_SESSIONE_VERS_KO ON ID_PK_LIV_2=ID_SESSIONE_VERS_KO;

-- changeset root:1751554768189-283
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_STRUT_PARTITION_ORIGINALE (ID_STRUT, FL_PART_OK) AS select tmp_1.id_strut,
 case
	when tmp_1.fl_part_uni_doc_ok = '1'
	and tmp_1.fl_part_uni_doc_anno_ok = '1'

	and tmp_1.fl_part_contenuto_comp_ok = '1'
	and tmp_1.fl_part_contenuto_comp_mese_ok = '1'

	and tmp_1.fl_part_ix_aip_ud_ok = '1'
	and tmp_1.fl_part_ix_aip_ud_mese_ok = '1'

	and tmp_1.fl_part_sessione_ok = '1'
	and tmp_1.fl_part_sessione_data_ok = '1'

	and tmp_1.fl_part_file_ses_ok = '1'
	and tmp_1.fl_part_file_ses_mese_ok = '1'

	and tmp_1.fl_part_vol_ser_ok = '1'
	and tmp_1.fl_part_vol_ser_data_ok = '1'

	and tmp_1.fl_part_ix_aip_ser_ok = '1'
	and tmp_1.fl_part_ix_aip_ser_data_ok = '1'
		 
	and tmp_1.fl_part_file_ele_vers_ok = '1'
	and tmp_1.fl_part_file_ele_vers_data_ok = '1'
	
		then '1'
		else '0'
 end fl_part_ok

from 
	(select
	 tmp.id_strut,
	 tmp.fl_part_uni_doc_ok,
	 case
		when tmp.fl_part_uni_doc_ok = '1'
			then
				case
					when exists (select *
								 from ORG_V_CHK_SUB_STRUT_PARTITION chk_substrut
								 where chk_substrut.id_strut = tmp.id_strut
								 and fl_part_uni_doc_anno_ok = '0'
								)
						then '0'
						else '1'
				end
			else '0'
	 end fl_part_uni_doc_anno_ok,

	 
	 nvl(tmp.fl_part_contenuto_comp_ok, '1') fl_part_contenuto_comp_ok,
	 case
		when tmp.fl_part_contenuto_comp_ok = '1'
			then
				case
					when (select ds_valore_param_applic
						  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
										 from ORG_PARTITION_STRUT part_strut
										 join ORG_PARTITION part
										  on (part.id_partition = part_strut.id_partition)
										 join ORG_SUB_PARTITION subpart
										  on (subpart.id_partition = part.id_partition)
										 join ORG_VAL_SUB_PARTITION val_subpart
										  on (val_subpart.id_sub_partition = subpart.id_sub_partition
										  and val_subpart.id_partition = part.id_partition
										  and to_number(val_subpart.cd_val_sub_partition) = to_number(substr(to_char (sysdate, 'dd/mm/yyyy'), 7) || substr(to_char (sysdate, 'dd/mm/yyyy'), 4, 2)))
										 where part_strut.id_strut = tmp.id_strut
										 and part_strut.ti_partition = 'BLOB'
										)
									then '0'
									else '1'
							end
				end
		when tmp.fl_part_contenuto_comp_ok is null
			then '1'
			else '0'
	 end fl_part_contenuto_comp_mese_ok,


	 tmp.fl_part_ix_aip_ud_ok,
	 case
		when fl_part_ix_aip_ud_ok = '1'
			then
				case
					when (select ds_valore_param_applic
						  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
												 from ORG_PARTITION_STRUT part_strut
												 join ORG_PARTITION part
												  on (part.id_partition = part_strut.id_partition)
												 join ORG_SUB_PARTITION subpart
												  on (subpart.id_partition = part.id_partition)
												 join ORG_VAL_SUB_PARTITION val_subpart
												  on (val_subpart.id_sub_partition = subpart.id_sub_partition
												  and val_subpart.id_partition = part.id_partition
												  and to_number(val_subpart.cd_val_sub_partition) = to_number(substr(to_char (sysdate, 'dd/mm/yyyy'), 7) || substr(to_char (sysdate, 'dd/mm/yyyy'), 4, 2)))
												 where part_strut.id_strut = tmp.id_strut
												 and part_strut.ti_partition = 'AIP_UD'
												)
										then '0'
										else '1'
							end
				end 
			else '0'
	 end fl_part_ix_aip_ud_mese_ok,


	 tmp.fl_part_sessione_ok,
	 case
		when tmp.fl_part_sessione_ok = '1'
			then
				case
					when (select ds_valore_param_applic
						  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
												 from ORG_PARTITION_STRUT part_strut
												 join ORG_PARTITION part
												  on (part.id_partition = part_strut.id_partition)
												 join ORG_SUB_PARTITION subpart
												  on (subpart.id_partition = part.id_partition)
												 join ORG_VAL_SUB_PARTITION val_subpart
												  on (val_subpart.id_sub_partition = subpart.id_sub_partition
												  and val_subpart.id_partition = part.id_partition
												  and to_date(val_subpart.cd_val_sub_partition, 'dd/mm/yyyy') > trunc(sysdate))
												 where part_strut.id_strut = tmp.id_strut
												 and part_strut.ti_partition = 'SES'
												)
										then '0'
										else '1'
							end
				end
			else '0'
	 end  fl_part_sessione_data_ok,	


	 tmp.fl_part_file_ses_ok,
	 case
		when tmp.fl_part_file_ses_ok = '1'
			then
				case
					when (select ds_valore_param_applic
						 from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
												 from ORG_PARTITION_STRUT part_strut
												 join ORG_PARTITION part
												  on (part.id_partition = part_strut.id_partition)
												 join ORG_SUB_PARTITION subpart
												  on (subpart.id_partition = part.id_partition)
												 join ORG_VAL_SUB_PARTITION val_subpart
												  on (val_subpart.id_sub_partition = subpart.id_sub_partition
												  and val_subpart.id_partition = part.id_partition
												  and to_number(val_subpart.cd_val_sub_partition) = to_number(substr(to_char (sysdate, 'dd/mm/yyyy'), 7) || substr(to_char (sysdate, 'dd/mm/yyyy'), 4, 2)))
												 where part_strut.id_strut = tmp.id_strut
												 and part_strut.ti_partition = 'FILE_SES'
												)
										then '0'
										else '1'
							end
				end 
			else '0'
	 end fl_part_file_ses_mese_ok,


	 tmp.fl_part_vol_ser_ok,   
	 case
		when tmp.fl_part_vol_ser_ok = '1'
			then 
				case
					when (select ds_valore_param_applic
						  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
												 from ORG_PARTITION_STRUT part_strut
												 join ORG_PARTITION part
												  on (part.id_partition = part_strut.id_partition)
												 join ORG_SUB_PARTITION subpart
												  on (subpart.id_partition = part.id_partition)
												 join ORG_VAL_SUB_PARTITION val_subpart
												  on (val_subpart.id_sub_partition = subpart.id_sub_partition
												  and val_subpart.id_partition = part.id_partition
												  and to_date(val_subpart.cd_val_sub_partition, 'dd/mm/yyyy') > trunc(sysdate))
												 where part_strut.id_strut = tmp.id_strut
												 and part_strut.ti_partition = 'FILE_VOL_SER'
												)
										then '0'
										else '1'
							end
				end
			else '0'
	 end fl_part_vol_ser_data_ok,


	 tmp.fl_part_ix_aip_ser_ok,  
	 case
		when tmp.fl_part_ix_aip_ser_ok = '1'
			then
				case
					when (select ds_valore_param_applic
						 from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
												 from ORG_PARTITION_STRUT part_strut
												 join ORG_PARTITION part
												  on (part.id_partition = part_strut.id_partition)
												 join ORG_SUB_PARTITION subpart
												  on (subpart.id_partition = part.id_partition)
												 join ORG_VAL_SUB_PARTITION val_subpart
												  on (val_subpart.id_sub_partition = subpart.id_sub_partition
												  and val_subpart.id_partition = part.id_partition
												  and to_date(val_subpart.cd_val_sub_partition, 'dd/mm/yyyy') > trunc(sysdate))
												 where part_strut.id_strut = tmp.id_strut
												 and part_strut.ti_partition = 'FILE_SER'
												)
										then '0'
										else '1'
							end
				end 
			else '0'
	 end fl_part_ix_aip_ser_data_ok,

	 tmp.fl_part_file_ele_vers_ok,
	 case
		when tmp.fl_part_file_ele_vers_ok = '1'
			then
				case
					when (select ds_valore_param_applic
						  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
						then '1'
						else
							case
								when not exists (select *
												 from ORG_PARTITION_STRUT part_strut
												 join ORG_PARTITION part
												  on (part.id_partition = part_strut.id_partition)
												 join ORG_SUB_PARTITION subpart
												  on (subpart.id_partition = part.id_partition)
												 join ORG_VAL_SUB_PARTITION val_subpart
												  on (val_subpart.id_sub_partition = subpart.id_sub_partition
												  and val_subpart.id_partition = part.id_partition
												  and to_date(val_subpart.cd_val_sub_partition, 'dd/mm/yyyy') > trunc(sysdate))
												 where part_strut.id_strut = tmp.id_strut
												 and part_strut.ti_partition = 'FILE_ELENCHI_VERS'
												)
										then '0'
										else '1'
							end
				end 
			else '0'
	 end fl_part_file_ele_vers_data_ok	 

	 from 	(select
			 strut.id_strut,

			 case
				when exists (select *
							 from ORG_V_CHK_SUB_STRUT_PARTITION chk_substrut
							 where chk_substrut.id_strut = strut.id_strut
							 )
					then
						case
							when exists (select *
										 from ORG_V_CHK_SUB_STRUT_PARTITION chk_substrut
										 where chk_substrut.id_strut = strut.id_strut
										 and fl_part_uni_doc_ok = '0'
										)
								then '0'
								else '1'
						end
					else '0'
			 end fl_part_uni_doc_ok,

			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when exists (select *
										 from DEC_TIPO_UNITA_DOC tipo_ud
										 where tipo_ud.id_strut = strut.id_strut
										 and tipo_ud.ti_save_file = 'BLOB'
										 )
								then 
									case
										when not exists (select *
														 from ORG_PARTITION_STRUT part_strut
														 where part_strut.id_strut = strut.id_strut
														 and part_strut.ti_partition = 'BLOB'
														)
												then '0'
												else '1'
									end
								else null
						end
			 end fl_part_contenuto_comp_ok,

			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when not exists (select *
											 from ORG_PARTITION_STRUT part_strut
											 where part_strut.id_strut = strut.id_strut
											 and part_strut.ti_partition = 'AIP_UD'
											)
								then '0'
								else '1'
						end
			 end fl_part_ix_aip_ud_ok,

			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when not exists (select *
											 from ORG_PARTITION_STRUT part_strut
											 where part_strut.id_strut = strut.id_strut
											 and part_strut.ti_partition = 'SES'
											)
								then '0'
								else '1'
						end
			 end fl_part_sessione_ok,

			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when not exists (select *
											 from ORG_PARTITION_STRUT part_strut
											 where part_strut.id_strut = strut.id_strut
											 and part_strut.ti_partition = 'FILE_SES'
											)
								then '0'
								else '1'
						end
			 end fl_part_file_ses_ok,

			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when not exists (select *
											 from ORG_PARTITION_STRUT part_strut
											 where part_strut.id_strut = strut.id_strut
											 and part_strut.ti_partition = 'FILE_VOL_SER'
											)
								then '0'
								else '1'
						end
			 end fl_part_vol_ser_ok,

			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when not exists (select *
											 from ORG_PARTITION_STRUT part_strut
											 where part_strut.id_strut = strut.id_strut
											 and part_strut.ti_partition = 'FILE_SER'
											)
								then '0'
								else '1'
						end
			 end fl_part_ix_aip_ser_ok,


			 case
				when (select ds_valore_param_applic
					  from APL_PARAM_APPLIC par
						  join APL_VALORE_PARAM_APPLIC val
						  on (val.id_param_applic = par.id_param_applic)
						  where par.fl_appart_applic = '1' 
						  and val.ti_appart = 'APPLIC'
						  and nm_param_applic = 'VERIFICA_PARTIZIONI') = 'false'
					then '1'
					else
						case
							when not exists (select *
											 from ORG_PARTITION_STRUT part_strut
											 where part_strut.id_strut = strut.id_strut
											 and part_strut.ti_partition = 'FILE_ELENCHI_VERS'
											)
								then '0'
								else '1'
						end
			 end fl_part_file_ele_vers_ok			 
			from ORG_STRUT strut
			) tmp
	) tmp_1;

-- changeset root:1751554768189-284
COMMENT ON COLUMN ORG_V_CHK_STRUT_PARTITION_ORIGINALE.ID_STRUT IS 'PK.1';

-- changeset root:1751554768189-285
CREATE OR REPLACE FORCE VIEW MON_V_LIS_UD_NON_VERS_IAM_prova_14042023 (ID_USER_IAM, ID_AMBIENTE, NM_AMBIENTE, ID_ENTE, NM_ENTE, ID_STRUT, NM_STRUT, ID_UNITA_DOC_NON_VERS, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, FL_VERIF, FL_NON_RISOLUB, DS_KEY_ORD, CD_ERR, DT_FIRST_SES_ERR, DT_LAST_SES_ERR) AS select 
 abil_org.id_user_iam,
 amb.id_ambiente, amb.nm_ambiente, 
 ente.id_ente, ente.nm_ente, 
 strut.id_strut, strut.nm_strut,

 ud_non_vers.id_unita_doc_non_vers, 
 ud_non_vers.cd_registro_key_unita_doc, 
 ud_non_vers.aa_key_unita_doc, 
 ud_non_vers.cd_key_unita_doc,

 ud_non_vers.fl_verif,
 ud_non_vers.fl_non_risolub,
 ud_non_vers.cd_registro_key_unita_doc || to_char(ud_non_vers.aa_key_unita_doc) || lpad(ud_non_vers.cd_key_unita_doc, 12, '0') ds_key_ord,
 
 ud_non_vers.ds_err_princ, 
 ud_non_vers.dt_first_ses_err, ud_non_vers.dt_last_ses_err
 
from IAM_ABIL_ORGANIZ abil_org
join ORG_STRUT strut
 on (strut.id_strut = abil_org.id_organiz_applic and strut.fl_cessato = 0)
join ORG_ENTE ente 
 on (ente.id_ente = strut.id_ente and ente.fl_cessato = 0)
join ORG_AMBIENTE amb
 on (amb.id_ambiente = ente.id_ambiente)

join VRS_V_UNITA_DOC_NON_VERS ud_non_vers
on (ud_non_vers.id_strut = strut.id_strut);

-- changeset root:1751554768189-286
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_TABLE_PARTITION_FASC_NEW_DDN (ID_STRUT, FL_PART_FASC_OK, CD_PARTITION_FASC, FL_PART_FASCKO_OK, CD_PARTITION_FASCKO, FL_PART_SESFASCKO_OK, CD_PARTITION_SESFASCKO, FL_PART_XMLVERSFASC_OK, CD_PARTITION_XMLVERSFASC, FL_PART_XMLFASC_OK, CD_PARTITION_XMLFASC, FL_PART_XMLSESFASCKO_OK, CD_PARTITION_XMLSESFASCKO, FL_PART_FILEELEVRSFASC_OK, CD_PARTITION_FILEELEVRSFASC, FL_PART_SESFASCERR_OK, CD_PARTITION_SESFASCERR) AS SELECT strut.id_strut,
           CASE -- verifica se per la struttura la partizione per FAS_FASCICOLO e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'FAS_FASCICOLO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_fasc_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'FAS_FASCICOLO')
           END    cd_partition_fasc,
           CASE -- verifica se per la struttura la partizione per VRS_FASCICOLO_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'VRS_FASCICOLO_KO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_fascko_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'VRS_FASCICOLO_KO')
           END    cd_partition_fascko,
           CASE -- verifica se per la struttura la partizione per VRS_SES_FASCICOLO_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'VRS_SES_FASCICOLO_KO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_sesfascko_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'VRS_SES_FASCICOLO_KO')
           END    cd_partition_sesfascko,
           CASE -- verifica se per la struttura la partizione per FAS_XML_VERS_FASCICOLO e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'FAS_XML_VERS_FASCICOLO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_xmlversfasc_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'FAS_XML_VERS_FASCICOLO')
           END    cd_partition_xmlversfasc,
           CASE -- verifica se per la struttura la partizione per FAS_XML_FASCICOLO e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'FAS_XML_FASCICOLO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_xmlfasc_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'FAS_XML_FASCICOLO')
           END    cd_partition_xmlfasc,
           CASE -- verifica se per la struttura la partizione per VRS_XML_SES_FASCICOLO_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'VRS_XML_SES_FASCICOLO_KO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_xmlsesfascko_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'VRS_XML_SES_FASCICOLO_KO')
           END    cd_partition_xmlsesfascko,
           CASE -- verifica se per la struttura la partizione per ELV_FILE_ELENCO_VERS_FASC e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_2
                                        part_strut
                                  WHERE part_strut.key_partition =
                                        strut.id_strut
                                    AND part_strut.TABLE_NAME =
                                        'ELV_FILE_ELENCO_VERS_FASC') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_fileelevrsfasc_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT part_strut.partition_name
                     FROM ORG_v_chk_strut_partition_ORA_2 part_strut
                    WHERE part_strut.key_partition = strut.id_strut
                      AND part_strut.TABLE_NAME = 'ELV_FILE_ELENCO_VERS_FASC')
           END    cd_partition_fileelevrsfasc,
           CASE -- verifica se a data corrente la partizione per VRS_SES_FASCICOLO_ERR e' definita
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ORG_v_chk_strut_partition_ORA_1
                                        part_strut
                                  WHERE part_strut.TABLE_NAME =
                                        'VRS_SES_FASCICOLO_ERR'
                                    AND TO_DATE (
                                            SUBSTR (part_strut.high_value,
                                                    12,
                                                    10),
                                            'yyyy/mm/dd') >
                                        TRUNC (SYSDATE)) THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_sesfascerr_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                      FROM APL_PARAM_APPLIC  par
                           JOIN APL_VALORE_PARAM_APPLIC val
                               ON (val.id_param_applic = par.id_param_applic)
                     WHERE par.fl_appart_applic = '1'
                       AND val.ti_appart = 'APPLIC'
                       AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false' THEN
                   NULL
               ELSE
                   (SELECT MAX (
                                TO_DATE (
                                    SUBSTR (part_strut.high_value, 12, 10),
                                    'yyyy/mm/dd'))
                     FROM ORG_v_chk_strut_partition_ORA_1 part_strut
                    WHERE part_strut.TABLE_NAME = 'VRS_SES_FASCICOLO_ERR'
                      AND TO_DATE (SUBSTR (part_strut.high_value, 12, 10),
                                   'yyyy/mm/dd') >
                          TRUNC (SYSDATE))
           END    cd_partition_sesfascerr
      FROM ORG_STRUT strut;

-- changeset root:1751554768189-287
CREATE TABLE ALLINEA_ANNULL_UD_DDN_SUE38183 (DT_RIF_CONTA date, ID_STRUT NUMBER, ID_SUB_STRUT NUMBER NOT NULL, ID_REGISTRO_UNITA_DOC NUMBER NOT NULL, AA_KEY_UNITA_DOC NUMBER(4, 0) NOT NULL, ID_TIPO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_DOC NUMBER NOT NULL, NI_AGG NUMBER);

-- changeset root:1751554768189-288
CREATE TABLE ALLINEA_COMP_ANNUL_SUE38318 (DT_RIF_CONTA date, ID_STRUT NUMBER, ID_SUB_STRUT NUMBER NOT NULL, ID_REGISTRO_UNITA_DOC NUMBER NOT NULL, AA_KEY_UNITA_DOC NUMBER(4, 0) NOT NULL, ID_TIPO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_DOC_PRINC NUMBER NOT NULL, NI_COMP_AGG NUMBER, SIZE_COMP_AGG NUMBER);

-- changeset root:1751554768189-289
CREATE TABLE ALLINEA_DOC_ANNUL_DDN_SUE38183 (DT_RIF_CONTA date, ID_STRUT NUMBER, ID_SUB_STRUT NUMBER NOT NULL, ID_REGISTRO_UNITA_DOC NUMBER NOT NULL, AA_KEY_UNITA_DOC NUMBER(4, 0) NOT NULL, ID_TIPO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_DOC NUMBER NOT NULL, NI_DOC_AGG NUMBER);

-- changeset root:1751554768189-290
CREATE TABLE ARO_COMP_DOC_DA_MIGRARE_OS (ID_COMP_DOC NUMBER NOT NULL, ID_CONTEN_COMP NUMBER NOT NULL, ID_STRUT NUMBER NOT NULL, SIZEMB NUMBER);

-- changeset root:1751554768189-291
CREATE TABLE ARO_UPD_DATI_SPEC_UNITA_DOC_OLD (ID_UPD_DATI_SPEC_UNITA_DOC NUMBER NOT NULL, TI_USO_XSD VARCHAR2(20 BYTE) NOT NULL, TI_ENTITA_SACER VARCHAR2(20 BYTE) NOT NULL, ID_UPD_UNITA_DOC NUMBER NOT NULL, ID_UPD_DOC_UNITA_DOC NUMBER, ID_UPD_COMP_UNITA_DOC NUMBER, ID_XSD_DATI_SPEC NUMBER NOT NULL, BL_XML_DATI_SPEC CLOB NOT NULL, ID_STRUT NUMBER NOT NULL, DT_INI_SES date NOT NULL, AA_INI_SES NUMBER(4, 0));

-- changeset root:1751554768189-292
CREATE TABLE ARO_VERS_INI_DATI_SPEC_OLD (ID_VERS_INI_DATI_SPEC NUMBER NOT NULL, TI_USO_XSD VARCHAR2(20 BYTE) NOT NULL, TI_ENTITA_SACER VARCHAR2(20 BYTE) NOT NULL, ID_VERS_INI_UNITA_DOC NUMBER NOT NULL, ID_VERS_INI_DOC NUMBER, ID_VERS_INI_COMP NUMBER, ID_XSD_DATI_SPEC NUMBER NOT NULL, BL_XML_DATI_SPEC CLOB NOT NULL, ID_STRUT NUMBER NOT NULL, DT_REG date NOT NULL, AA_DT_REG NUMBER(4, 0));

-- changeset root:1751554768189-293
CREATE TABLE ARO_XML_UPD_UNITA_DOC_OLD (ID_XML_UPD_UNITA_DOC NUMBER NOT NULL, ID_UPD_UNITA_DOC NUMBER NOT NULL, TI_XML_UPD_UNITA_DOC VARCHAR2(20 BYTE) NOT NULL, BL_XML CLOB NOT NULL, CD_VERSIONE_XML VARCHAR2(100 BYTE) NOT NULL, DS_HASH_XML VARCHAR2(254 BYTE) NOT NULL, DS_ALGO_HASH_XML VARCHAR2(254 BYTE) NOT NULL, CD_ENCODING_HASH_XML VARCHAR2(20 BYTE) NOT NULL, DS_URN_XML VARCHAR2(254 BYTE) NOT NULL, ID_STRUT NUMBER NOT NULL, DT_INI_SES date NOT NULL, DS_URN_NORMALIZ_XML VARCHAR2(254 BYTE) NOT NULL, AA_INI_SES NUMBER(4, 0));

-- changeset root:1751554768189-294
CREATE TABLE BCK_APL_PARAM_APPLIC_DDN (ID_PARAM_APPLIC NUMBER NOT NULL, NM_PARAM_APPLIC VARCHAR2(100 BYTE) NOT NULL, DS_PARAM_APPLIC VARCHAR2(254 BYTE) NOT NULL, TI_PARAM_APPLIC VARCHAR2(50 BYTE) NOT NULL, TI_GESTIONE_PARAM VARCHAR2(30 BYTE) NOT NULL, FL_APPART_APPLIC CHAR(1 BYTE) NOT NULL, FL_APPART_AMBIENTE CHAR(1 BYTE) NOT NULL, FL_APPART_STRUT CHAR(1 BYTE) NOT NULL, FL_APPART_TIPO_UNITA_DOC CHAR(1 BYTE) NOT NULL, FL_APPART_AA_TIPO_FASCICOLO CHAR(1 BYTE) NOT NULL, DS_LISTA_VALORI_AMMESSI VARCHAR2(4000 BYTE), FL_MULTI CHAR(1 BYTE) NOT NULL, DM_PARAM_APPLIC VARCHAR2(100 BYTE), TI_VALORE_PARAM_APPLIC VARCHAR2(100 BYTE) NOT NULL, CD_VERSIONE_APP_INI VARCHAR2(11 CHAR) NOT NULL, CD_VERSIONE_APP_FINE VARCHAR2(11 CHAR));

-- changeset root:1751554768189-295
CREATE TABLE BCK_APL_VALORE_PARAM_APPLIC_DDN (ID_VALORE_PARAM_APPLIC NUMBER NOT NULL, ID_PARAM_APPLIC NUMBER NOT NULL, TI_APPART VARCHAR2(30 BYTE) NOT NULL, DS_VALORE_PARAM_APPLIC VARCHAR2(4000 BYTE) NOT NULL, ID_AMBIENTE NUMBER, ID_STRUT NUMBER, ID_TIPO_UNITA_DOC NUMBER, ID_AA_TIPO_FASCICOLO NUMBER);

-- changeset root:1751554768189-296
CREATE TABLE BCK_DEC_BACKEND_DDN (ID_DEC_BACKEND NUMBER NOT NULL, NM_BACKEND VARCHAR2(100 BYTE) NOT NULL, NM_TIPO_BACKEND VARCHAR2(4 BYTE) NOT NULL, DL_BACKEND_URI VARCHAR2(100 BYTE), DS_DESCRIZIONE_BACKEND VARCHAR2(500 BYTE));

-- changeset root:1751554768189-297
CREATE TABLE BCK_FAS_AIP_FASCICOLO_DA_ELAB_16072024 (ID_AIP_FASCICOLO_DA_ELAB NUMBER NOT NULL, ID_FASCICOLO NUMBER NOT NULL, PG_CREAZIONE_DA_ELAB NUMBER NOT NULL, DT_CREAZIONE_DA_ELAB date NOT NULL, DS_CAUSALE VARCHAR2(254 BYTE) NOT NULL, TI_CREAZIONE VARCHAR2(20 BYTE) NOT NULL, ID_ELENCO_VERS_FASC NUMBER);

-- changeset root:1751554768189-298
CREATE TABLE BCK_FAS_FASCIOLO (CD_VERSIONE_XML VARCHAR2(100 BYTE) NOT NULL, ID_FASCICOLO NUMBER NOT NULL, ID_STRUT NUMBER NOT NULL, AA_FASCICOLO NUMBER(4, 0) NOT NULL, CD_KEY_FASCICOLO VARCHAR2(100 BYTE) NOT NULL, DT_ANNULL date NOT NULL, TS_INI_SES TIMESTAMP(6) NOT NULL, TS_FINE_SES TIMESTAMP(6) NOT NULL, CD_IND_IP_CLIENT VARCHAR2(100 BYTE) NOT NULL, CD_IND_SERVER VARCHAR2(100 BYTE) NOT NULL, ID_USER_IAM_VERS NUMBER NOT NULL, ID_TIPO_FASCICOLO NUMBER NOT NULL, TI_CONSERVAZIONE VARCHAR2(30 BYTE) NOT NULL, ID_SISTEMA_MIGRAZ NUMBER, FL_FORZA_CONTR_CLASSIF CHAR(1 BYTE) NOT NULL, FL_FORZA_CONTR_NUMERO CHAR(1 BYTE) NOT NULL, FL_FORZA_CONTR_COLLEG CHAR(1 BYTE) NOT NULL, CD_INDICE_CLASSIF VARCHAR2(100 BYTE), DS_INDICE_CLASSIF VARCHAR2(254 BYTE), ID_VOCE_TITOL NUMBER, DS_OGGETTO_FASCICOLO VARCHAR2(4000 BYTE), DT_APE_FASCICOLO date, DT_CHIU_FASCICOLO date, NI_AA_CONSERVAZIONE NUMBER(4, 0) NOT NULL, CD_LIVELLO_RISERV VARCHAR2(100 BYTE), CD_PROC_AMMIN VARCHAR2(100 BYTE), DS_PROC_AMMIN VARCHAR2(100 BYTE), DS_NOTA VARCHAR2(4000 BYTE), CD_AMMIN_TITOL VARCHAR2(100 BYTE), DS_AMMIN_TITOL VARCHAR2(254 BYTE), AA_FASCICOLO_PADRE NUMBER(4, 0), CD_KEY_FASCICOLO_PADRE VARCHAR2(100 BYTE), DS_OGGETTO_FASCICOLO_PADRE VARCHAR2(4000 BYTE), ID_FASCICOLO_PADRE NUMBER, CD_KEY_ORD VARCHAR2(100 BYTE) NOT NULL, NI_UNITA_DOC NUMBER NOT NULL, NI_SOTTO_FASCICOLI NUMBER NOT NULL, TI_STATO_FASC_ELENCO_VERS VARCHAR2(50 BYTE), TI_STATO_CONSERVAZIONE VARCHAR2(30 BYTE) NOT NULL, FL_SES_FASCICOLO_KO CHAR(1 BYTE) NOT NULL, ID_ELENCO_VERS_FASC NUMBER, ID_UNITA_DOC_FIRST NUMBER, ID_UNITA_DOC_LAST NUMBER, TI_CODICE_AMMIN_TITOL VARCHAR2(20 BYTE), FL_UPD_MODIF_UNITA_DOC CHAR(1 BYTE) NOT NULL, ID_VER_AIP_FASCICOLO_COR NUMBER, NT_ANNUL VARCHAR2(2000 BYTE), FL_UPD_ANNUL_UNITA_DOC CHAR(1 BYTE) NOT NULL, CD_KEY_NORMALIZ_FASCICOLO VARCHAR2(100 BYTE), DS_PROC_AMMIN_MATERIA_ARG_STRUT VARCHAR2(254 BYTE), DS_INFO_CONSERVAZIONE VARCHAR2(1024 BYTE));

-- changeset root:1751554768189-299
CREATE TABLE CRY_CERTIFICATE (SUBJECTDN VARCHAR2(1000 BYTE) NOT NULL, EXPIRATION_DATE date NOT NULL, CERTIFICATE BLOB NOT NULL, ACTIVE CHAR(1 BYTE) DEFAULT 1, SUBJECT_KEY_ID VARCHAR2(100 BYTE) NOT NULL, CONSTRAINT PK_CRY_CERTIF PRIMARY KEY (SUBJECTDN, SUBJECT_KEY_ID));

-- changeset root:1751554768189-300
CREATE TABLE CRY_CONFIG (SUBJECTDN VARCHAR2(1000 BYTE) NOT NULL, CRLURL VARCHAR2(400 BYTE) NOT NULL, NI_ORD_URL_DISTRIB_CRL NUMBER(3, 0) DEFAULT 1 NOT NULL, SUBJECT_KEY_ID VARCHAR2(100 BYTE) NOT NULL);

-- changeset root:1751554768189-301
CREATE TABLE CRY_CRL (SUBJECTDN VARCHAR2(1000 BYTE) NOT NULL, UPDATE_DATA date NOT NULL, CRL BLOB NOT NULL, NEXT_EXPIRATION date NOT NULL, SUBJECT_KEY_ID VARCHAR2(100 BYTE) NOT NULL, CONSTRAINT PK_CRY_CRL PRIMARY KEY (SUBJECTDN, SUBJECT_KEY_ID));

-- changeset root:1751554768189-302
CREATE TABLE DEC_CONFIG_OBJECT_STORAGE_GCP_BKP (ID_DEC_CONFIG_OBJECT_STORAGE NUMBER NOT NULL, ID_DEC_BACKEND NUMBER NOT NULL, NM_CONFIG_OBJECT_STORAGE VARCHAR2(100 BYTE) NOT NULL, DS_VALORE_CONFIG_OBJECT_STORAGE VARCHAR2(100 BYTE) NOT NULL, TI_USO_CONFIG_OBJECT_STORAGE VARCHAR2(50 BYTE) NOT NULL, DS_DESCRIZIONE_CONFIG_OBJECT_STORAGE VARCHAR2(500 BYTE));

-- changeset root:1751554768189-303
CREATE TABLE DEC_MODELLO_XSD_ATTRIB_FASC_BCK_20241212 (ID_MODELLO_XSD_ATTRIB_FASC NUMBER NOT NULL, ID_MODELLO_XSD_FASCICOLO NUMBER NOT NULL, ID_ATTRIB_FASCICOLO NUMBER NOT NULL, NI_ORD_ATTRIB NUMBER NOT NULL, FL_OBBL CHAR(1 BYTE), NI_CHAR_MIN NUMBER, NI_CHAR_MAX NUMBER, DS_VAL_ENUM VARCHAR2(1024 BYTE), DS_REG_EXP VARCHAR2(254 BYTE), CD_LABEL VARCHAR2(100 BYTE));

-- changeset root:1751554768189-304
CREATE TABLE DEC_MODELLO_XSD_FASCICOLO_DA_RIMUOVERE (ID_MODELLO_XSD_FASCICOLO NUMBER NOT NULL, ID_AMBIENTE NUMBER NOT NULL, TI_MODELLO_XSD VARCHAR2(40 BYTE) NOT NULL, TI_USO_MODELLO_XSD VARCHAR2(20 BYTE) NOT NULL, CD_XSD VARCHAR2(100 BYTE) NOT NULL, DS_XSD VARCHAR2(254 BYTE) NOT NULL, BL_XSD CLOB NOT NULL, DT_ISTITUZ date NOT NULL, DT_SOPPRES date NOT NULL, ID_SISTEMA_MIGRAZ NUMBER, FL_DEFAULT CHAR(1 BYTE) NOT NULL);

-- changeset root:1751554768189-305
CREATE TABLE DEC_USO_MODELLO_XSD_FASC_DA_RIMUOVERE (ID_USO_MODELLO_XSD_FASC NUMBER NOT NULL, ID_AA_TIPO_FASCICOLO NUMBER NOT NULL, ID_MODELLO_XSD_FASCICOLO NUMBER NOT NULL, FL_STANDARD CHAR(1 BYTE) NOT NULL, DT_ISTITUZ date NOT NULL, DT_SOPPRES date NOT NULL);

-- changeset root:1751554768189-306
CREATE TABLE ELV_FILE_ELENCO_VERS_OLD_DDN_DA_DROPPARE (ID_FILE_ELENCO_VERS NUMBER NOT NULL, ID_ELENCO_VERS NUMBER NOT NULL, TI_FILE_ELENCO_VERS VARCHAR2(30 BYTE) NOT NULL, BL_FILE_ELENCO_VERS BLOB, ID_STRUT NUMBER NOT NULL, DT_CREAZIONE_FILE date NOT NULL, DS_HASH_FILE VARCHAR2(254 BYTE), DS_ALGO_HASH_FILE VARCHAR2(254 BYTE), CD_ENCODING_HASH_FILE VARCHAR2(20 BYTE), CD_VER_XSD_FILE VARCHAR2(100 BYTE), TI_FIRMA VARCHAR2(30 BYTE));

-- changeset root:1751554768189-307
CREATE TABLE FAS_AIP_FASCICOLO_DA_ELAB_20250110 (ID_AIP_FASCICOLO_DA_ELAB NUMBER NOT NULL, ID_FASCICOLO NUMBER NOT NULL, PG_CREAZIONE_DA_ELAB NUMBER NOT NULL, DT_CREAZIONE_DA_ELAB date NOT NULL, DS_CAUSALE VARCHAR2(254 BYTE) NOT NULL, TI_CREAZIONE VARCHAR2(20 BYTE) NOT NULL, ID_ELENCO_VERS_FASC NUMBER);

-- changeset root:1751554768189-308
CREATE TABLE FAS_UD_AIP_FASCICOLO_DA_ELAB_20250110 (ID_UD_AIP_FASCICOLO_DA_ELAB NUMBER NOT NULL, ID_AIP_FASCICOLO_DA_ELAB NUMBER NOT NULL, ID_VER_INDICE_AIP NUMBER NOT NULL);

-- changeset root:1751554768189-309
CREATE TABLE FAS_VALORE_ATTRIB_FASCICOLO_BCK_20241212 (ID_VALORE_ATTRIB_FASCICOLO NUMBER NOT NULL, ID_USO_MODELLO_XSD_FASC NUMBER NOT NULL, ID_FASCICOLO NUMBER NOT NULL, ID_ATTRIB_FASCICOLO NUMBER NOT NULL, DL_VALORE VARCHAR2(4000 BYTE), ID_AA_TIPO_FASCICOLO NUMBER NOT NULL);

-- changeset root:1751554768189-310
CREATE TABLE FAS_XML_FASCICOLO_DA_RIMUOVERE (ID_XML_FASCICOLO NUMBER NOT NULL, ID_FASCICOLO NUMBER NOT NULL, TI_MODELLO_XSD VARCHAR2(40 BYTE) NOT NULL, ID_MODELLO_XSD_FASCICOLO NUMBER NOT NULL, BL_XML CLOB, ID_STRUT NUMBER NOT NULL, DT_VERS_FASCICOLO date NOT NULL, FL_CANONICALIZED CHAR(1 BYTE) NOT NULL, AA_VERS_FASCICOLO VARCHAR2(40 BYTE));

-- changeset root:1751554768189-311
CREATE TABLE FAS_XSD_META_VER_AIP_FASC_DA_RIMUOVERE (ID_XSD_META_VER_AIP_FASC NUMBER NOT NULL, ID_META_VER_AIP_FASCICOLO NUMBER NOT NULL, ID_MODELLO_XSD_FASCICOLO NUMBER NOT NULL, NM_XSD VARCHAR2(254 BYTE) NOT NULL);

-- changeset root:1751554768189-312
CREATE TABLE FDL_UD_TABLE_LEVEL_2 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_2 NUMBER(*, 127), TBL_LIV_2 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064438 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-313
CREATE TABLE FDL_UD_TABLE_LEVEL_3 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_3 NUMBER(*, 127), TBL_LIV_3 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064442 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-314
CREATE TABLE FDL_UD_TABLE_LEVEL_4 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_4 NUMBER(*, 127), TBL_LIV_4 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064446 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-315
CREATE TABLE FDL_UD_TABLE_LEVEL_5 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_5 NUMBER(*, 127), TBL_LIV_5 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064450 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-316
CREATE TABLE FDL_UD_TABLE_LEVEL_6 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_6 NUMBER(*, 127), TBL_LIV_6 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064454 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-317
CREATE TABLE FDL_UD_TABLE_LEVEL_7 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_7 NUMBER(*, 127), TBL_LIV_7 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064458 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-318
CREATE TABLE FDL_UD_TABLE_LEVEL_8 (__connect_topic VARCHAR2(4000 BYTE) NOT NULL, __connect_partition NUMBER(10, 0) NOT NULL, __connect_offset NUMBER(19, 0) NOT NULL, ID NUMBER(*, 0), MODIFIED TIMESTAMP(6), ID_PK_LIV_8 NUMBER(*, 127), TBL_LIV_8 VARCHAR2(4000 BYTE), CONSTRAINT SYS_C0064462 PRIMARY KEY (__connect_topic, __connect_partition, __connect_offset));

-- changeset root:1751554768189-319
CREATE TABLE MON_CONTA_BY_STATO_CONSERV_NEW_RECUPERO (DT_CREAZIONE date, ID_STRUT NUMBER, ID_SUB_STRUT NUMBER NOT NULL, AA_KEY_UNITA_DOC NUMBER(4, 0) NOT NULL, ID_REGISTRO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_DOC CHAR(1 BYTE), NI_COMP_AIP_GENERATO NUMBER, NI_COMP_AIP_IN_AGG NUMBER, NI_COMP_PRESA_IN_CARICO NUMBER, NI_COMP_VOLUME NUMBER, NI_COMP_ANNUL NUMBER);

-- changeset root:1751554768189-320
CREATE TABLE MON_CONTA_UD_DOC_COMP_BCK_03062025 (ID_CONTA_UD_DOC_COMP NUMBER NOT NULL, DT_RIF_CONTA date NOT NULL, ID_STRUT NUMBER NOT NULL, ID_SUB_STRUT NUMBER NOT NULL, AA_KEY_UNITA_DOC NUMBER(4, 0) NOT NULL, ID_REGISTRO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_UNITA_DOC NUMBER NOT NULL, ID_TIPO_DOC_PRINC NUMBER NOT NULL, NI_UNITA_DOC_VERS NUMBER NOT NULL, NI_DOC_VERS NUMBER NOT NULL, NI_COMP_VERS NUMBER NOT NULL, NI_SIZE_VERS NUMBER NOT NULL, NI_DOC_AGG NUMBER NOT NULL, NI_COMP_AGG NUMBER NOT NULL, NI_SIZE_AGG NUMBER NOT NULL, NI_UNITA_DOC_ANNUL NUMBER NOT NULL, NI_DOC_ANNUL_UD NUMBER NOT NULL, NI_COMP_ANNUL_UD NUMBER NOT NULL, NI_SIZE_ANNUL_UD NUMBER NOT NULL);

-- changeset root:1751554768189-321
CREATE TABLE PARTIZIONI_2023_DDN (TABELLA VARCHAR2(4000 BYTE), PARTIZIONE VARCHAR2(4000 BYTE), SUBPARTIZIONE VARCHAR2(4000 BYTE), TABLESPACE VARCHAR2(4000 BYTE), SCRIPT_P1 VARCHAR2(4000 BYTE), SCRIPT_P2 VARCHAR2(4000 BYTE), SCRIPT_P3 VARCHAR2(4000 BYTE));

-- changeset root:1751554768189-322
CREATE TABLE PARTIZIONI_2025_DDN (TABELLA VARCHAR2(4000 BYTE), PARTIZIONE VARCHAR2(4000 BYTE), SUBPARTIZIONE VARCHAR2(4000 BYTE), TABLESPACE VARCHAR2(4000 BYTE), SCRIPT_P1 VARCHAR2(4000 BYTE), SCRIPT_P2 VARCHAR2(4000 BYTE), SCRIPT_P3 VARCHAR2(4000 BYTE));

-- changeset root:1751554768189-323
CREATE TABLE PLAN_TABLE (STATEMENT_ID VARCHAR2(30 BYTE), PLAN_ID NUMBER, TIMESTAMP date, REMARKS VARCHAR2(4000 BYTE), OPERATION VARCHAR2(30 BYTE), OPTIONS VARCHAR2(255 BYTE), OBJECT_NODE VARCHAR2(128 BYTE), OBJECT_OWNER VARCHAR2(30 BYTE), OBJECT_NAME VARCHAR2(30 BYTE), OBJECT_ALIAS VARCHAR2(65 BYTE), OBJECT_INSTANCE NUMBER(*, 0), OBJECT_TYPE VARCHAR2(30 BYTE), OPTIMIZER VARCHAR2(255 BYTE), SEARCH_COLUMNS NUMBER, ID NUMBER(*, 0), PARENT_ID NUMBER(*, 0), DEPTH NUMBER(*, 0), POSITION NUMBER(*, 0), COST NUMBER(*, 0), CARDINALITY NUMBER(*, 0), BYTES NUMBER(*, 0), OTHER_TAG VARCHAR2(255 BYTE), PARTITION_START VARCHAR2(255 BYTE), PARTITION_STOP VARCHAR2(255 BYTE), PARTITION_ID NUMBER(*, 0), OTHER LONG, DISTRIBUTION VARCHAR2(30 BYTE), CPU_COST NUMBER(*, 0), IO_COST NUMBER(*, 0), TEMP_SPACE NUMBER(*, 0), ACCESS_PREDICATES VARCHAR2(4000 BYTE), FILTER_PREDICATES VARCHAR2(4000 BYTE), PROJECTION VARCHAR2(4000 BYTE), TIME NUMBER(*, 0), QBLOCK_NAME VARCHAR2(30 BYTE), OTHER_XML CLOB);

-- changeset root:1751554768189-324
CREATE TABLE PROVA_PARTITION_BY_REF (ID_PROVA NUMBER NOT NULL, ID_COMP_DOC NUMBER NOT NULL, CONSTRAINT PK_PROVA PRIMARY KEY (ID_PROVA));

-- changeset root:1751554768189-325
CREATE TABLE RECUPERO_DDN_VRS_ERR_SESSIONE_VERS (ID_ERR_SESSIONE_VERS NUMBER NOT NULL, ID_DATI_SESSIONE_VERS NUMBER NOT NULL, PG_ERR_SESSIONE_VERS NUMBER DEFAULT 1 NOT NULL, TI_ERR VARCHAR2(20 BYTE) NOT NULL, DS_ERR VARCHAR2(4000 BYTE) NOT NULL, CD_ERR VARCHAR2(20 BYTE), ID_STRUT NUMBER, FL_ERR_PRINC CHAR(1 BYTE) DEFAULT '1' NOT NULL);

-- changeset root:1751554768189-326
CREATE TABLE SEQ_CUSTODE_SEQUESTRO (ID_CUSTODE_SEQUESTRO NUMBER NOT NULL, ID_VAL_CUSTODE_SEQUESTRO NUMBER NOT NULL, ID_USER_IAM NUMBER NOT NULL, CONSTRAINT PK_CUST_SEQ PRIMARY KEY (ID_CUSTODE_SEQUESTRO));

-- changeset root:1751554768189-327
CREATE TABLE SEQ_ELENCO_SEQUESTRO (ID_ELENCO_SEQUESTRO NUMBER NOT NULL, ID_SEQUESTRO NUMBER NOT NULL, NM_ELENCO_SEQUESTRO VARCHAR2(100 BYTE) NOT NULL, PG_ELENCO_SEQUESTRO NUMBER(4, 0) NOT NULL, DS_ELENCO_SEQUESTRO VARCHAR2(254 BYTE) NOT NULL, ID_STATO_ELENCO_SEQUESTRO_COR NUMBER, NI_MAX_FILE NUMBER, NI_MAX_BYTE NUMBER, BL_INDICE_ELENCO_SEQUESTRO CLOB, ID_STATO_TRASM_SEQUESTRO_COR NUMBER, NI_UD_ELENCO_SEQUESTRO NUMBER NOT NULL, NI_FILE_ELENCO_SEQUESTRO NUMBER NOT NULL, NI_BYTE_ELENCO_SEQUESTRO NUMBER NOT NULL, CONSTRAINT PK_ELE_SEQ PRIMARY KEY (ID_ELENCO_SEQUESTRO));

-- changeset root:1751554768189-328
CREATE TABLE SEQ_NOTA_ELENCO_SEQUESTRO (ID_NOTA_ELENCO_SEQUESTRO NUMBER NOT NULL, ID_ELENCO_SEQUESTRO NUMBER NOT NULL, PG_NOTA_ELENCO_SEQUESTRO NUMBER NOT NULL, DT_NOTA_ELENCO_SEQUESTRO date NOT NULL, DL_NOTA_ELENCO_SEQUESTRO VARCHAR2(4000 BYTE) NOT NULL, ID_USER_IAM_AUTORE_NOTA NUMBER NOT NULL, CONSTRAINT PK_NOTA_ELE_SEQ PRIMARY KEY (ID_NOTA_ELENCO_SEQUESTRO));

-- changeset root:1751554768189-329
CREATE TABLE SEQ_NOTA_SEQUESTRO (ID_NOTA_SEQUESTRO NUMBER NOT NULL, ID_SEQUESTRO NUMBER NOT NULL, PG_NOTA_SEQUESTRO NUMBER NOT NULL, DT_NOTA_SEQUESTRO date NOT NULL, DL_NOTA_SEQUESTRO VARCHAR2(4000 BYTE) NOT NULL, ID_USER_IAM_AUTORE_NOTA NUMBER NOT NULL, CONSTRAINT PK_NOTA_SEQ PRIMARY KEY (ID_NOTA_SEQUESTRO));

-- changeset root:1751554768189-330
CREATE TABLE SEQ_SEQUESTRO (ID_SEQUESTRO NUMBER NOT NULL, ID_STRUT NUMBER NOT NULL, DS_SEQUESTRO VARCHAR2(254 BYTE) NOT NULL, TI_SEQUESTRO VARCHAR2(30 BYTE) NOT NULL, DT_INI_SEQUESTRO date, DT_FIN_SEQUESTRO date, ID_STATO_SEQUESTRO_COR NUMBER, ID_ELENCO_SEQUESTRO_COR NUMBER, NI_UD_ELENCO NUMBER NOT NULL, NI_FILE_ELENCO NUMBER NOT NULL, NI_BYTE_ELENCO NUMBER NOT NULL, CONSTRAINT PK_SEQ PRIMARY KEY (ID_SEQUESTRO));

-- changeset root:1751554768189-331
CREATE TABLE SEQ_STATO_ELENCO_SEQUESTRO (ID_STATO_ELENCO_SEQUESTRO NUMBER NOT NULL, ID_ELENCO_SEQUESTRO NUMBER NOT NULL, PG_STATO_ELENCO_SEQUESTRO NUMBER NOT NULL, DT_STATO_ELENCO_SEQUESTRO date NOT NULL, TI_STATO_ELENCO_SEQUESTRO VARCHAR2(20 BYTE) NOT NULL, ID_USER_IAM NUMBER NOT NULL, CONSTRAINT PK_STATO_ELE_SEQ PRIMARY KEY (ID_STATO_ELENCO_SEQUESTRO));

-- changeset root:1751554768189-332
CREATE TABLE SEQ_STATO_SEQUESTRO (ID_STATO_SEQUESTRO NUMBER NOT NULL, ID_SEQUESTRO NUMBER NOT NULL, PG_STATO_SEQUESTRO NUMBER(4, 0) NOT NULL, DT_STATO_SEQUESTRO date NOT NULL, TI_STATO_SEQUESTRO VARCHAR2(20 BYTE) NOT NULL, ID_USER_IAM NUMBER NOT NULL, CONSTRAINT PK_STATO_SEQ PRIMARY KEY (ID_STATO_SEQUESTRO));

-- changeset root:1751554768189-333
CREATE TABLE SEQ_STATO_TRASM_ELENCO (ID_STATO_TRASM_ELENCO NUMBER NOT NULL, ID_ELENCO_SEQUESTRO NUMBER NOT NULL, DT_STATO_TRASM_ELENCO date NOT NULL, TI_STATO_TRASM_ELENCO VARCHAR2(30 BYTE) NOT NULL, CONSTRAINT PK_STATO_TRS_ELE PRIMARY KEY (ID_STATO_TRASM_ELENCO));

-- changeset root:1751554768189-334
CREATE TABLE SEQ_VAL_CUSTODE_SEQUESTRO (ID_VAL_CUSTODE_SEQUESTRO NUMBER NOT NULL, ID_SEQUESTRO NUMBER NOT NULL, DT_INI_VAL_CUSTODE_SEQUESTRO date NOT NULL, DT_FIN_VAL_CUSTODE_SEQUESTRO date NOT NULL, CONSTRAINT PK_VAL_CUST_SEQ PRIMARY KEY (ID_VAL_CUSTODE_SEQUESTRO));

-- changeset root:1751554768189-335
CREATE TABLE SEQ_VOL_ELENCO_SEQUESTRO (ID_VOL_ELENCO_SEQUESTRO NUMBER NOT NULL, ID_ELENCO_SEQUESTRO NUMBER NOT NULL, PG_VOL_ELENCO_SEQUESTRO NUMBER NOT NULL, BL_INDICE_VOL_ELENCO_SEQUESTRO CLOB NOT NULL, DS_HASH_SHA1_INDICE VARCHAR2(254 BYTE) NOT NULL, DS_HASH_MD5_INDICE VARCHAR2(254 BYTE) NOT NULL, NI_UD_VOL_ELENCO_SEQUESTRO NUMBER NOT NULL, NI_FILE_VOL_ELENCO_SEQUESTRO NUMBER NOT NULL, NI_BYTE_VOL_ELENCO_SEQUESTRO NUMBER NOT NULL, CONSTRAINT PK_VOL_ELE_SEQ PRIMARY KEY (ID_VOL_ELENCO_SEQUESTRO));

-- changeset root:1751554768189-336
CREATE TABLE TBS_DA_RIMUOVERE_PER_DBA_220525 (TABLESPACE_NAME VARCHAR2(30 BYTE) NOT NULL, STATUS VARCHAR2(9 BYTE), CONTENTS VARCHAR2(21 BYTE), INCLUDED_IN_DATABASE_BACKUP VARCHAR2(3 BYTE));

-- changeset root:1751554768189-337
CREATE TABLE TEST_PARTIZIONI (ID_STRUT NUMBER, FL_PART_OK CHAR(1 BYTE));

-- changeset root:1751554768189-338
CREATE TABLE TEST_VRS_SESSIONE_VERS_1 (ID_SESSIONE_VERS NUMBER NOT NULL, ID_USER NUMBER, DT_APERTURA date NOT NULL, DT_CHIUSURA date NOT NULL, TI_SESSIONE_VERS VARCHAR2(20 BYTE) NOT NULL, TI_STATO_SESSIONE_VERS VARCHAR2(20 BYTE) NOT NULL, ID_STRUT NUMBER, CD_REGISTRO_KEY_UNITA_DOC VARCHAR2(100 BYTE), AA_KEY_UNITA_DOC NUMBER(4, 0), CD_KEY_UNITA_DOC VARCHAR2(100 BYTE), ID_UNITA_DOC NUMBER, NM_USERID VARCHAR2(100 BYTE), CD_VERSIONE_WS VARCHAR2(100 BYTE), NM_AMBIENTE VARCHAR2(100 BYTE), NM_ENTE VARCHAR2(100 BYTE), NM_STRUT VARCHAR2(100 BYTE), CD_KEY_DOC_VERS VARCHAR2(100 BYTE), ID_DOC NUMBER, FL_SESSIONE_ERR_VERIF CHAR(1 BYTE), NM_USERID_WS VARCHAR2(100 BYTE), FL_SESSIONE_ERR_NON_RISOLUB CHAR(1 BYTE), CD_ERR_PRINC VARCHAR2(20 BYTE), DS_ERR_PRINC VARCHAR2(4000 BYTE), NI_FILE_ERR NUMBER, CD_IND_IP_CLIENT VARCHAR2(100 BYTE), CD_IND_SERVER VARCHAR2(100 BYTE), DT_VIRTUAL_APERTURA VARCHAR2(10 BYTE), TS_APERTURA TIMESTAMP(3), TS_CHIUSURA TIMESTAMP(3), NM_UTENTE VARCHAR2(100 BYTE));

-- changeset root:1751554768189-339
CREATE TABLE TEST_VRS_SESSIONE_VERS_2 (ID_SESSIONE_VERS NUMBER NOT NULL, ID_USER NUMBER, DT_APERTURA date NOT NULL, DT_CHIUSURA date NOT NULL, TI_SESSIONE_VERS VARCHAR2(20 BYTE) NOT NULL, TI_STATO_SESSIONE_VERS VARCHAR2(20 BYTE) NOT NULL, ID_STRUT NUMBER, CD_REGISTRO_KEY_UNITA_DOC VARCHAR2(100 BYTE), AA_KEY_UNITA_DOC NUMBER(4, 0), CD_KEY_UNITA_DOC VARCHAR2(100 BYTE), ID_UNITA_DOC NUMBER, NM_USERID VARCHAR2(100 BYTE), CD_VERSIONE_WS VARCHAR2(100 BYTE), NM_AMBIENTE VARCHAR2(100 BYTE), NM_ENTE VARCHAR2(100 BYTE), NM_STRUT VARCHAR2(100 BYTE), CD_KEY_DOC_VERS VARCHAR2(100 BYTE), ID_DOC NUMBER, FL_SESSIONE_ERR_VERIF CHAR(1 BYTE), NM_USERID_WS VARCHAR2(100 BYTE), FL_SESSIONE_ERR_NON_RISOLUB CHAR(1 BYTE), CD_ERR_PRINC VARCHAR2(20 BYTE), DS_ERR_PRINC VARCHAR2(4000 BYTE), NI_FILE_ERR NUMBER, CD_IND_IP_CLIENT VARCHAR2(100 BYTE), CD_IND_SERVER VARCHAR2(100 BYTE), DT_VIRTUAL_APERTURA VARCHAR2(10 BYTE), TS_APERTURA TIMESTAMP(3), TS_CHIUSURA TIMESTAMP(3), NM_UTENTE VARCHAR2(100 BYTE));

-- changeset root:1751554768189-340
CREATE TABLE TMP_SUE27900_DEC_FORMATO_FILE_AMMESSO (ID_FORMATO_FILE_AMMESSO NUMBER NOT NULL, ID_TIPO_COMP_DOC NUMBER NOT NULL, ID_FORMATO_FILE_DOC NUMBER NOT NULL);

-- changeset root:1751554768189-341
CREATE TABLE TMP_SUE27900_DEC_FORMATO_FILE_DOC (ID_FORMATO_FILE_DOC NUMBER NOT NULL, ID_STRUT NUMBER NOT NULL, NM_FORMATO_FILE_DOC VARCHAR2(100 BYTE) NOT NULL, DS_FORMATO_FILE_DOC VARCHAR2(254 BYTE) NOT NULL, CD_VERSIONE VARCHAR2(100 BYTE) NOT NULL, DT_ISTITUZ date NOT NULL, DT_SOPPRES date NOT NULL);

-- changeset root:1751554768189-342
CREATE TABLE TMP_SUE27900_DEC_USO_FORMATO_FILE_STANDARD (ID_USO_FORMATO_FILE_AMMESSO NUMBER NOT NULL, ID_FORMATO_FILE_DOC NUMBER NOT NULL, NI_ORD_USO NUMBER NOT NULL, ID_FORMATO_FILE_STANDARD NUMBER NOT NULL);

-- changeset root:1751554768189-343
CREATE TABLE TMP_SUE_27900_DEC_FORMATO_FILE_STANDARD (ID_FORMATO_FILE_STANDARD NUMBER NOT NULL, NM_FORMATO_FILE_STANDARD VARCHAR2(100 BYTE) NOT NULL, DS_FORMATO_FILE_STANDARD VARCHAR2(254 BYTE) NOT NULL, CD_VERSIONE VARCHAR2(100 BYTE) NOT NULL, DS_COPYRIGHT VARCHAR2(254 BYTE) NOT NULL, NM_MIMETYPE_FILE VARCHAR2(100 BYTE) NOT NULL, TI_ESITO_CONTR_FORMATO VARCHAR2(20 BYTE) NOT NULL, FL_FORMATO_CONCAT CHAR(1 BYTE) NOT NULL);

-- changeset root:1751554768189-344
CREATE TABLE TMP_VALORE_PARAM_AA_TIPO_FASC (ID_VALORE_PARAM_APPLIC NUMBER NOT NULL, ID_PARAM_APPLIC NUMBER NOT NULL, TI_APPART VARCHAR2(30 BYTE) NOT NULL, DS_VALORE_PARAM_APPLIC VARCHAR2(4000 BYTE) NOT NULL, ID_AMBIENTE NUMBER, ID_STRUT NUMBER, ID_TIPO_UNITA_DOC NUMBER, ID_AA_TIPO_FASCICOLO NUMBER, ID_STRUT_AATIPOFASC NUMBER NOT NULL, ID_AMBIENTE_AATIPOFASC NUMBER NOT NULL);

-- changeset root:1751554768189-345
CREATE TABLE TMP_XML_EMPTY (ID_STRUT NUMBER, NUMERO NUMBER);

-- changeset root:1751554768189-346
CREATE TABLE TMP_XML_EMPTY_UD (ID_UNITA_DOC NUMBER NOT NULL, AA_KEY_UNITA_DOC NUMBER(4, 0) NOT NULL, CD_KEY_UNITA_DOC VARCHAR2(100 BYTE) NOT NULL, CD_REGISTRO_KEY_UNITA_DOC VARCHAR2(100 BYTE) NOT NULL, NM_STRUT VARCHAR2(100 BYTE) NOT NULL);

-- changeset root:1751554768189-347
CREATE TABLE TOAD_PLAN_TABLE (STATEMENT_ID VARCHAR2(30 BYTE), PLAN_ID NUMBER, TIMESTAMP date, REMARKS VARCHAR2(4000 BYTE), OPERATION VARCHAR2(30 BYTE), OPTIONS VARCHAR2(255 BYTE), OBJECT_NODE VARCHAR2(128 BYTE), OBJECT_OWNER VARCHAR2(128 BYTE), OBJECT_NAME VARCHAR2(128 BYTE), OBJECT_ALIAS VARCHAR2(65 BYTE), OBJECT_INSTANCE NUMBER(*, 0), OBJECT_TYPE VARCHAR2(30 BYTE), OPTIMIZER VARCHAR2(255 BYTE), SEARCH_COLUMNS NUMBER, ID NUMBER(*, 0), PARENT_ID NUMBER(*, 0), DEPTH NUMBER(*, 0), POSITION NUMBER(*, 0), COST NUMBER(*, 0), CARDINALITY NUMBER(*, 0), BYTES NUMBER(*, 0), OTHER_TAG VARCHAR2(255 BYTE), PARTITION_START VARCHAR2(255 BYTE), PARTITION_STOP VARCHAR2(255 BYTE), PARTITION_ID NUMBER(*, 0), OTHER LONG, DISTRIBUTION VARCHAR2(30 BYTE), CPU_COST NUMBER(*, 0), IO_COST NUMBER(*, 0), TEMP_SPACE NUMBER(*, 0), ACCESS_PREDICATES VARCHAR2(4000 BYTE), FILTER_PREDICATES VARCHAR2(4000 BYTE), PROJECTION VARCHAR2(4000 BYTE), TIME NUMBER(*, 0), QBLOCK_NAME VARCHAR2(128 BYTE), OTHER_XML CLOB);

-- changeset root:1751554768189-348
CREATE UNIQUE INDEX PK_CRY_CONFIG ON CRY_CONFIG(SUBJECTDN, SUBJECT_KEY_ID, NI_ORD_URL_DISTRIB_CRL);

-- changeset root:1751554768189-349
ALTER TABLE CRY_CONFIG ADD CONSTRAINT PK_CRY_CONFIG PRIMARY KEY (SUBJECTDN, SUBJECT_KEY_ID, NI_ORD_URL_DISTRIB_CRL) USING INDEX PK_CRY_CONFIG;

-- changeset root:1751554768189-350
CREATE UNIQUE INDEX UN_CUST_SEQ ON SEQ_CUSTODE_SEQUESTRO(ID_VAL_CUSTODE_SEQUESTRO, ID_USER_IAM);

-- changeset root:1751554768189-351
ALTER TABLE SEQ_CUSTODE_SEQUESTRO ADD CONSTRAINT UN_CUST_SEQ UNIQUE (ID_VAL_CUSTODE_SEQUESTRO, ID_USER_IAM) USING INDEX UN_CUST_SEQ;

-- changeset root:1751554768189-352
CREATE UNIQUE INDEX UN_DOC_PROV_SEQ ON SEQ_DOC_PROVVED_SEQUESTRO(ID_SEQUESTRO, CD_DOC_PROVVED_SEQUESTRO);

-- changeset root:1751554768189-353
ALTER TABLE SEQ_DOC_PROVVED_SEQUESTRO ADD CONSTRAINT UN_DOC_PROV_SEQ UNIQUE (ID_SEQUESTRO, CD_DOC_PROVVED_SEQUESTRO) USING INDEX UN_DOC_PROV_SEQ;

-- changeset root:1751554768189-354
CREATE UNIQUE INDEX UN_ELE_SEQ ON SEQ_ELENCO_SEQUESTRO(ID_SEQUESTRO, NM_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-355
ALTER TABLE SEQ_ELENCO_SEQUESTRO ADD CONSTRAINT UN_ELE_SEQ UNIQUE (ID_SEQUESTRO, NM_ELENCO_SEQUESTRO) USING INDEX UN_ELE_SEQ;

-- changeset root:1751554768189-356
CREATE UNIQUE INDEX UN_NOTA_ELE_SEQ ON SEQ_NOTA_ELENCO_SEQUESTRO(ID_ELENCO_SEQUESTRO, PG_NOTA_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-357
ALTER TABLE SEQ_NOTA_ELENCO_SEQUESTRO ADD CONSTRAINT UN_NOTA_ELE_SEQ UNIQUE (ID_ELENCO_SEQUESTRO, PG_NOTA_ELENCO_SEQUESTRO) USING INDEX UN_NOTA_ELE_SEQ;

-- changeset root:1751554768189-358
CREATE UNIQUE INDEX UN_NOTA_SEQ ON SEQ_NOTA_SEQUESTRO(ID_SEQUESTRO, PG_NOTA_SEQUESTRO);

-- changeset root:1751554768189-359
ALTER TABLE SEQ_NOTA_SEQUESTRO ADD CONSTRAINT UN_NOTA_SEQ UNIQUE (ID_SEQUESTRO, PG_NOTA_SEQUESTRO) USING INDEX UN_NOTA_SEQ;

-- changeset root:1751554768189-360
CREATE UNIQUE INDEX UN_SEQ ON SEQ_SEQUESTRO(ID_STRUT, DS_SEQUESTRO);

-- changeset root:1751554768189-361
ALTER TABLE SEQ_SEQUESTRO ADD CONSTRAINT UN_SEQ UNIQUE (ID_STRUT, DS_SEQUESTRO) USING INDEX UN_SEQ;

-- changeset root:1751554768189-362
CREATE UNIQUE INDEX UN_STATO_ELE_SEQ ON SEQ_STATO_ELENCO_SEQUESTRO(ID_ELENCO_SEQUESTRO, PG_STATO_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-363
ALTER TABLE SEQ_STATO_ELENCO_SEQUESTRO ADD CONSTRAINT UN_STATO_ELE_SEQ UNIQUE (ID_ELENCO_SEQUESTRO, PG_STATO_ELENCO_SEQUESTRO) USING INDEX UN_STATO_ELE_SEQ;

-- changeset root:1751554768189-364
CREATE UNIQUE INDEX UN_STATO_SEQ ON SEQ_STATO_SEQUESTRO(ID_SEQUESTRO, PG_STATO_SEQUESTRO);

-- changeset root:1751554768189-365
ALTER TABLE SEQ_STATO_SEQUESTRO ADD CONSTRAINT UN_STATO_SEQ UNIQUE (ID_SEQUESTRO, PG_STATO_SEQUESTRO) USING INDEX UN_STATO_SEQ;

-- changeset root:1751554768189-366
CREATE UNIQUE INDEX UN_STATO_TRS_ELE ON SEQ_STATO_TRASM_ELENCO(DT_STATO_TRASM_ELENCO, ID_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-367
ALTER TABLE SEQ_STATO_TRASM_ELENCO ADD CONSTRAINT UN_STATO_TRS_ELE UNIQUE (DT_STATO_TRASM_ELENCO, ID_ELENCO_SEQUESTRO) USING INDEX UN_STATO_TRS_ELE;

-- changeset root:1751554768189-368
CREATE UNIQUE INDEX UN_UD_APP_SEQ ON SEQ_UD_APPART_SEQUESTRO(ID_SEQUESTRO, ID_UNITA_DOC);

-- changeset root:1751554768189-369
ALTER TABLE SEQ_UD_APPART_SEQUESTRO ADD CONSTRAINT UN_UD_APP_SEQ UNIQUE (ID_SEQUESTRO, ID_UNITA_DOC) USING INDEX UN_UD_APP_SEQ;

-- changeset root:1751554768189-370
CREATE UNIQUE INDEX UN_VAL_CUST_SEQ ON SEQ_VAL_CUSTODE_SEQUESTRO(ID_SEQUESTRO, DT_INI_VAL_CUSTODE_SEQUESTRO);

-- changeset root:1751554768189-371
ALTER TABLE SEQ_VAL_CUSTODE_SEQUESTRO ADD CONSTRAINT UN_VAL_CUST_SEQ UNIQUE (ID_SEQUESTRO, DT_INI_VAL_CUSTODE_SEQUESTRO) USING INDEX UN_VAL_CUST_SEQ;

-- changeset root:1751554768189-372
CREATE UNIQUE INDEX UN_VOL_ELE_SEQ ON SEQ_VOL_ELENCO_SEQUESTRO(ID_ELENCO_SEQUESTRO, PG_VOL_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-373
ALTER TABLE SEQ_VOL_ELENCO_SEQUESTRO ADD CONSTRAINT UN_VOL_ELE_SEQ UNIQUE (ID_ELENCO_SEQUESTRO, PG_VOL_ELENCO_SEQUESTRO) USING INDEX UN_VOL_ELE_SEQ;

-- changeset root:1751554768189-374
CREATE INDEX IDX_DT_CHIUSURA_KO ON VRS_SESSIONE_VERS_KO(DT_CHIUSURA);

-- changeset root:1751554768189-375
CREATE INDEX IDX_ID_FASCICOLO_TEST ON FAS_XML_FASCICOLO(ID_FASCICOLO);

-- changeset root:1751554768189-376
CREATE INDEX IDX_ID_STRUT_MIGRAZ ON ARO_COMP_DOC_DA_MIGRARE_OS(ID_STRUT);

-- changeset root:1751554768189-377
CREATE INDEX IDX_ID_STRUT_SES_VRS_KO ON VRS_SESSIONE_VERS_KO(ID_STRUT);

-- changeset root:1751554768189-378
CREATE INDEX IDX_IS_STRUT_NEW ON ARO_COMP_DOC(ID_STRUT);

-- changeset root:1751554768189-379
CREATE INDEX IDX_NOTA_ELE_SEQ_USR ON SEQ_NOTA_ELENCO_SEQUESTRO(ID_USER_IAM_AUTORE_NOTA);

-- changeset root:1751554768189-380
CREATE INDEX IDX_NOTA_SEQ_USR ON SEQ_NOTA_SEQUESTRO(ID_USER_IAM_AUTORE_NOTA);

-- changeset root:1751554768189-381
CREATE INDEX IDX_SES_VRS_DOC_KO ON VRS_SESSIONE_VERS_KO(ID_DOC);

-- changeset root:1751554768189-382
CREATE INDEX IDX_SES_VRS_FL_SES_ERR_VERIF_KO ON VRS_SESSIONE_VERS_KO(FL_SESSIONE_ERR_VERIF);

-- changeset root:1751554768189-383
CREATE INDEX IDX_SES_VRS_KEY_UNI_DOC_KO ON VRS_SESSIONE_VERS_KO(CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC);

-- changeset root:1751554768189-384
CREATE INDEX IDX_SES_VRS_UNI_DOC_KO ON VRS_SESSIONE_VERS_KO(ID_UNITA_DOC);

-- changeset root:1751554768189-385
CREATE INDEX IDX_SES_VRS_USER_KO ON VRS_SESSIONE_VERS_KO(ID_USER);

-- changeset root:1751554768189-386
CREATE INDEX IDX_STATO_ELE_SEQ_USR ON SEQ_STATO_ELENCO_SEQUESTRO(ID_USER_IAM);

-- changeset root:1751554768189-387
CREATE INDEX IDX_STATO_ELV_SEQ_USR ON SEQ_STATO_SEQUESTRO(ID_USER_IAM);

-- changeset root:1751554768189-388
CREATE INDEX IDX_UD_APP_SEQ_ELE ON SEQ_UD_APPART_SEQUESTRO(ID_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-389
CREATE INDEX IDX_UD_APP_SEQ_UNI_DOC ON SEQ_UD_APPART_SEQUESTRO(ID_UNITA_DOC);

-- changeset root:1751554768189-390
CREATE INDEX IDX_UD_APP_SEQ_VOL_ELE ON SEQ_UD_APPART_SEQUESTRO(ID_VOL_ELENCO_SEQUESTRO);

-- changeset root:1751554768189-391
CREATE INDEX MODIFIED_INDEX ON FDL_ARO_REQ_UD_DA_CANC(MODIFIED);

-- changeset root:1751554768189-392
ALTER TABLE ARO_CONTENUTO_COMP ADD CONSTRAINT FK_CONT_COMP FOREIGN KEY (ID_COMP_STRUT_DOC) REFERENCES ARO_COMP_DOC (ID_COMP_DOC) ON DELETE CASCADE;

-- changeset root:1751554768189-393
ALTER TABLE SEQ_CUSTODE_SEQUESTRO ADD CONSTRAINT FK_CUST_SEQ_USR FOREIGN KEY (ID_USER_IAM) REFERENCES IAM_USER (ID_USER_IAM);

-- changeset root:1751554768189-394
ALTER TABLE SEQ_CUSTODE_SEQUESTRO ADD CONSTRAINT FK_CUST_SEQ_VAL FOREIGN KEY (ID_VAL_CUSTODE_SEQUESTRO) REFERENCES SEQ_VAL_CUSTODE_SEQUESTRO (ID_VAL_CUSTODE_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-395
ALTER TABLE SEQ_DOC_PROVVED_SEQUESTRO ADD CONSTRAINT FK_DOC_PROV_SEQ FOREIGN KEY (ID_SEQUESTRO) REFERENCES SEQ_SEQUESTRO (ID_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-396
ALTER TABLE SEQ_DOC_PROVVED_SEQUESTRO ADD CONSTRAINT FK_DOC_PROV_SEQ_UNI_DOC FOREIGN KEY (ID_UNITA_DOC) REFERENCES ARO_UNITA_DOC (ID_UNITA_DOC);

-- changeset root:1751554768189-397
ALTER TABLE SEQ_ELENCO_SEQUESTRO ADD CONSTRAINT FK_ELE_SEQ FOREIGN KEY (ID_SEQUESTRO) REFERENCES SEQ_SEQUESTRO (ID_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-398
ALTER TABLE ELV_FILE_ELENCO_VERS_OBJECT_STORAGE ADD CONSTRAINT FK_FILE_ELENCO_VERS_OBJ_STO_BACKEND_NEW FOREIGN KEY (ID_DEC_BACKEND) REFERENCES DEC_BACKEND (ID_DEC_BACKEND);

-- changeset root:1751554768189-399
ALTER TABLE SEQ_NOTA_ELENCO_SEQUESTRO ADD CONSTRAINT FK_NOTA_ELE_SEQ FOREIGN KEY (ID_ELENCO_SEQUESTRO) REFERENCES SEQ_ELENCO_SEQUESTRO (ID_ELENCO_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-400
ALTER TABLE SEQ_NOTA_ELENCO_SEQUESTRO ADD CONSTRAINT FK_NOTA_ELE_SEQ_USR FOREIGN KEY (ID_USER_IAM_AUTORE_NOTA) REFERENCES IAM_USER (ID_USER_IAM);

-- changeset root:1751554768189-401
ALTER TABLE SEQ_NOTA_SEQUESTRO ADD CONSTRAINT FK_NOTA_SEQ FOREIGN KEY (ID_SEQUESTRO) REFERENCES SEQ_SEQUESTRO (ID_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-402
ALTER TABLE SEQ_NOTA_SEQUESTRO ADD CONSTRAINT FK_NOTA_SEQ_USR FOREIGN KEY (ID_USER_IAM_AUTORE_NOTA) REFERENCES IAM_USER (ID_USER_IAM);

-- changeset root:1751554768189-403
ALTER TABLE PROVA_PARTITION_BY_REF ADD CONSTRAINT FK_PROVA_COMP_DOC FOREIGN KEY (ID_COMP_DOC) REFERENCES ARO_COMP_DOC (ID_COMP_DOC);

-- changeset root:1751554768189-404
ALTER TABLE SEQ_SEQUESTRO ADD CONSTRAINT FK_SEQ_STRUT FOREIGN KEY (ID_STRUT) REFERENCES ORG_STRUT (ID_STRUT) ON DELETE CASCADE;

-- changeset root:1751554768189-405
ALTER TABLE SEQ_STATO_ELENCO_SEQUESTRO ADD CONSTRAINT FK_STATO_ELE_SEQ FOREIGN KEY (ID_ELENCO_SEQUESTRO) REFERENCES SEQ_ELENCO_SEQUESTRO (ID_ELENCO_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-406
ALTER TABLE SEQ_STATO_ELENCO_SEQUESTRO ADD CONSTRAINT FK_STATO_ELV_SEQ_USR FOREIGN KEY (ID_USER_IAM) REFERENCES IAM_USER (ID_USER_IAM);

-- changeset root:1751554768189-407
ALTER TABLE SEQ_STATO_SEQUESTRO ADD CONSTRAINT FK_STATO_SEQ FOREIGN KEY (ID_SEQUESTRO) REFERENCES SEQ_SEQUESTRO (ID_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-408
ALTER TABLE SEQ_STATO_SEQUESTRO ADD CONSTRAINT FK_STATO_SEQ_USR FOREIGN KEY (ID_USER_IAM) REFERENCES IAM_USER (ID_USER_IAM);

-- changeset root:1751554768189-409
ALTER TABLE SEQ_STATO_TRASM_ELENCO ADD CONSTRAINT FK_STATO_TRS_ELE_SEQ FOREIGN KEY (ID_ELENCO_SEQUESTRO) REFERENCES SEQ_ELENCO_SEQUESTRO (ID_ELENCO_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-410
ALTER TABLE SEQ_UD_APPART_SEQUESTRO ADD CONSTRAINT FK_UD_APP_SEQ FOREIGN KEY (ID_SEQUESTRO) REFERENCES SEQ_SEQUESTRO (ID_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-411
ALTER TABLE SEQ_UD_APPART_SEQUESTRO ADD CONSTRAINT FK_UD_APP_SEQ_ELE_SEQ FOREIGN KEY (ID_ELENCO_SEQUESTRO) REFERENCES SEQ_ELENCO_SEQUESTRO (ID_ELENCO_SEQUESTRO) ON DELETE SET NULL;

-- changeset root:1751554768189-412
ALTER TABLE SEQ_UD_APPART_SEQUESTRO ADD CONSTRAINT FK_UD_APP_SEQ_SES_REC FOREIGN KEY (ID_SESSIONE_RECUP) REFERENCES REC_SESSIONE_RECUP (ID_SESSIONE_RECUP) ON DELETE SET NULL;

-- changeset root:1751554768189-413
ALTER TABLE SEQ_UD_APPART_SEQUESTRO ADD CONSTRAINT FK_UD_APP_SEQ_UNI_DOC FOREIGN KEY (ID_UNITA_DOC) REFERENCES ARO_UNITA_DOC (ID_UNITA_DOC);

-- changeset root:1751554768189-414
ALTER TABLE SEQ_UD_APPART_SEQUESTRO ADD CONSTRAINT FK_UD_APP_SEQ_VOL_ELE FOREIGN KEY (ID_VOL_ELENCO_SEQUESTRO) REFERENCES SEQ_VOL_ELENCO_SEQUESTRO (ID_VOL_ELENCO_SEQUESTRO) ON DELETE SET NULL;

-- changeset root:1751554768189-415
ALTER TABLE SEQ_VAL_CUSTODE_SEQUESTRO ADD CONSTRAINT FK_VAL_CUST_SEQ FOREIGN KEY (ID_SEQUESTRO) REFERENCES SEQ_SEQUESTRO (ID_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-416
ALTER TABLE SEQ_VOL_ELENCO_SEQUESTRO ADD CONSTRAINT FK_VOL_ELE_SEQ FOREIGN KEY (ID_ELENCO_SEQUESTRO) REFERENCES SEQ_ELENCO_SEQUESTRO (ID_ELENCO_SEQUESTRO) ON DELETE CASCADE;

-- changeset root:1751554768189-431
ALTER TABLE FIR_CERTIF_OCSP DROP CONSTRAINT UN_CER_OCSP DROP INDEX;

-- changeset root:1751554768189-432
ALTER TABLE VRS_XML_DATI_SES_OBJECT_STORAGE DROP CONSTRAINT UN_DATI_SES_OBJECT_STORAGE DROP INDEX;

-- changeset root:1751554768189-433
ALTER TABLE VRS_FILE_SES_OBJECT_STORAGE DROP CONSTRAINT UN_FILE_SESSIONE DROP INDEX;

-- changeset root:1751554768189-434
ALTER TABLE VRS_FILE_SESSIONE DROP CONSTRAINT UN_FIL_SES DROP INDEX;

-- changeset root:1751554768189-435
ALTER TABLE VRS_SESSIONE_VERS_SOSP DROP CONSTRAINT UN_SES_VRS_SOSP DROP INDEX;

-- changeset root:1751554768189-436
ALTER TABLE FAS_XML_FASCICOLO DROP CONSTRAINT UN_XML_FASC DROP INDEX;

-- changeset root:1751554768189-437
DROP TABLE VRS_FILE_SESSIONE;

-- changeset root:1751554768189-438
DROP TABLE VRS_FILE_SES_OBJECT_STORAGE;

-- changeset root:1751554768189-439
DROP TABLE VRS_SESSIONE_VERS_SOSP;

-- changeset root:1751554768189-440
DROP TABLE VRS_XML_DATI_SES_OBJECT_STORAGE;

-- changeset root:1751554768189-441
DROP INDEX IDX_CERTIF_CA_NI_SERIAL;

-- changeset root:1751554768189-442
DROP INDEX IDX_ELV_FILE_ELENCO_VERS_ID_ELENCO_NEW;

-- changeset root:1751554768189-443
DROP INDEX IDX_FK_VRS_DATI_SESSIONE_VERSKO;

-- changeset root:1751554768189-444
DROP INDEX IDX_FK_VRS_XML_DATI_SESS_VERS_KO;

-- changeset root:1751554768189-2
ALTER TABLE ARO_COMP_OBJECT_STORAGE ADD CONSTRAINT FK_COMP_OBJ_STO_BACKEND FOREIGN KEY (ID_DEC_BACKEND) REFERENCES DEC_BACKEND (ID_DEC_BACKEND);

-- changeset root:1751554768189-4
ALTER TABLE VRS_XML_DATI_SES_OBJECT_STORAGE_KO ADD CONSTRAINT FK_DAT_SES_VRS_XML_DATI_SES_OBJ_STO_KO FOREIGN KEY (ID_DATI_SESSIONE_VERS_KO) REFERENCES VRS_DATI_SESSIONE_VERS_KO (ID_DATI_SESSIONE_VERS_KO) ON DELETE CASCADE;

-- changeset root:1751554768189-6
ALTER TABLE ELV_FILE_ELENCO_VERS ADD CONSTRAINT FK_FILE_ELE_VRS_ELE_VRS FOREIGN KEY (ID_ELENCO_VERS) REFERENCES ELV_ELENCO_VERS (ID_ELENCO_VERS) ON DELETE CASCADE;

-- changeset root:1751554768189-8
ALTER TABLE VRS_FILE_SESSIONE_KO ADD CONSTRAINT FK_ID_DATI_SESSIONE_VERS_KO FOREIGN KEY (ID_DATI_SESSIONE_VERS_KO) REFERENCES VRS_DATI_SESSIONE_VERS_KO (ID_DATI_SESSIONE_VERS_KO) ON DELETE CASCADE;

-- changeset root:1751554768189-10
ALTER TABLE ARO_UNITA_DOC ADD CONSTRAINT FK_ID_USER_VERS_ID_USER_IAM FOREIGN KEY (ID_USER_VERS) REFERENCES USR_USER (ID_USER_IAM);

-- changeset root:1751554768189-12
ALTER TABLE ELV_LOG_ELENCO_VERS_HISTORY ADD CONSTRAINT FK_LOG_ELE_VRS_STRUT_HIST FOREIGN KEY (ID_STRUT) REFERENCES ORG_STRUT (ID_STRUT);

-- changeset root:1751554768189-14
ALTER TABLE ELV_LOG_ELENCO_VERS_HISTORY ADD CONSTRAINT FK_LOG_ELE_VRS_USR_HIST FOREIGN KEY (ID_USER) REFERENCES IAM_USER (ID_USER_IAM);

-- changeset root:1751554768189-16
ALTER TABLE LOG_JOB_HISTORY ADD CONSTRAINT FK_LOG_JOB_STRUT_HIST FOREIGN KEY (ID_STRUT) REFERENCES ORG_STRUT (ID_STRUT) ON DELETE CASCADE;

-- changeset root:1751554768189-18
ALTER TABLE DEC_MODELLO_TIPO_SERIE ADD CONSTRAINT FK_MODL_TI_SER_TI_UD_SPEC FOREIGN KEY (ID_TIPO_UNITA_DOC_DATI_SPEC) REFERENCES DEC_TIPO_UNITA_DOC (ID_TIPO_UNITA_DOC);

-- changeset root:1751554768189-20
ALTER TABLE FIR_REPORT ADD CONSTRAINT FK_REPORT_OBJ_STO_BACKEND FOREIGN KEY (ID_DEC_BACKEND) REFERENCES DEC_BACKEND (ID_DEC_BACKEND);

-- changeset root:1751554768189-22
ALTER TABLE VRS_DATI_SESSIONE_VERS_KO ADD CONSTRAINT FK_SESSIONE_VERS_KO FOREIGN KEY (ID_SESSIONE_VERS_KO) REFERENCES VRS_SESSIONE_VERS_KO (ID_SESSIONE_VERS_KO) ON DELETE CASCADE;

-- changeset root:1751554768189-24
ALTER TABLE SER_VER_SERIE_OBJECT_STORAGE ADD CONSTRAINT FK_VER_IX_AIP_SERIE_OBJ_STO_BACKEND_NEW FOREIGN KEY (ID_DEC_BACKEND) REFERENCES DEC_BACKEND (ID_DEC_BACKEND);

-- changeset root:1751554768189-26
ALTER TABLE SER_VER_SERIE_OBJECT_STORAGE ADD CONSTRAINT FK_VER_IX_AIP_SER_VER_SERIE_OBJ_STO FOREIGN KEY (ID_VER_SERIE) REFERENCES SER_VER_SERIE (ID_VER_SERIE) ON DELETE CASCADE;

-- changeset root:1751554768189-28
ALTER TABLE ARO_VER_INDICE_AIP_UD_OBJECT_STORAGE ADD CONSTRAINT FK_VER_IX_AIP_UD_OBJ_STO_BACKEND_NEW FOREIGN KEY (ID_DEC_BACKEND) REFERENCES DEC_BACKEND (ID_DEC_BACKEND);

-- changeset root:1751554768189-30
ALTER TABLE VRS_ERR_SESSIONE_VERS_KO ADD CONSTRAINT FK_VRS_ERR_SESSIONE_VERS_KO FOREIGN KEY (ID_DATI_SESSIONE_VERS_KO) REFERENCES VRS_DATI_SESSIONE_VERS_KO (ID_DATI_SESSIONE_VERS_KO) ON DELETE CASCADE;

-- changeset root:1751554768189-32
ALTER TABLE VRS_XML_DATI_SESSIONE_VERS_KO ADD CONSTRAINT FK_VRS_XML_DATI_SESSIONE_VERS_KO FOREIGN KEY (ID_DATI_SESSIONE_VERS_KO) REFERENCES VRS_DATI_SESSIONE_VERS_KO (ID_DATI_SESSIONE_VERS_KO) ON DELETE CASCADE;

-- changeset root:1751554768189-33
ALTER SEQUENCE SARO_AIP_RESTITUZIONE_ARCHIVIO CACHE 20;

-- changeset root:1751554768189-34
ALTER SEQUENCE SARO_COMP_DOC CACHE 1000;

-- changeset root:1751554768189-35
ALTER SEQUENCE SARO_COMP_DOC NOCYCLE;

-- changeset root:1751554768189-36
COMMENT ON TABLE ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE IS '';

-- changeset root:1751554768189-37
COMMENT ON COLUMN ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE.CD_KEY_FILE IS '';

-- changeset root:1751554768189-38
ALTER TABLE FIR_CERTIF_CA MODIFY DS_SERIAL_CERTIF_CA NOT NULL;

-- changeset root:1751554768189-39
ALTER TABLE FIR_CERTIF_FIRMATARIO MODIFY DS_SERIAL_CERTIF_FIRMATARIO NOT NULL;

-- changeset root:1751554768189-40
ALTER TABLE FIR_CERTIF_OCSP MODIFY DS_SERIAL_CERTIF_OCSP NOT NULL;

-- changeset root:1751554768189-41
COMMENT ON COLUMN ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE.ID_DEC_BACKEND IS '';

-- changeset root:1751554768189-42
COMMENT ON COLUMN ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE.ID_FILE_ELENCO_VERS_FASC IS '';

-- changeset root:1751554768189-43
COMMENT ON COLUMN ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE.ID_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE IS '';

-- changeset root:1751554768189-44
COMMENT ON COLUMN FIR_CERTIF_OCSP.NI_SERIAL_CERTIF_OCSP IS '';

-- changeset root:1751554768189-45
COMMENT ON COLUMN ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE.NM_BUCKET IS '';

-- changeset root:1751554768189-46
COMMENT ON COLUMN ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE.NM_TENANT IS '';

-- changeset root:1751554768189-47
ALTER TABLE DEC_FORMATO_GRUPPO_PROPRIETA DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-48
CREATE UNIQUE INDEX DEC_FORMATO_GRUPPO_PROPRIETA_PK ON DEC_FORMATO_GRUPPO_PROPRIETA(ID_FORMATO_GRUPPO_PROPRIETA);

-- changeset root:1751554768189-49
ALTER TABLE DEC_FORMATO_GRUPPO_PROPRIETA ADD CONSTRAINT DEC_FORMATO_GRUPPO_PROPRIETA_PK PRIMARY KEY (ID_FORMATO_GRUPPO_PROPRIETA) USING INDEX DEC_FORMATO_GRUPPO_PROPRIETA_PK;

-- changeset root:1751554768189-50
ALTER TABLE DEC_FORMATO_VALUTAZIONE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-51
CREATE UNIQUE INDEX DEC_FORMATO_VALUTAZIONE_PK ON DEC_FORMATO_VALUTAZIONE(ID_FORMATO_VALUTAZIONE);

-- changeset root:1751554768189-52
ALTER TABLE DEC_FORMATO_VALUTAZIONE ADD CONSTRAINT DEC_FORMATO_VALUTAZIONE_PK PRIMARY KEY (ID_FORMATO_VALUTAZIONE) USING INDEX DEC_FORMATO_VALUTAZIONE_PK;

-- changeset root:1751554768189-53
ALTER TABLE DEC_FORMATO_PROPRIETA DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-54
CREATE UNIQUE INDEX DEC_FROMATO_PROPRIETA_PK ON DEC_FORMATO_PROPRIETA(ID_FORMATO_PROPRIETA);

-- changeset root:1751554768189-55
ALTER TABLE DEC_FORMATO_PROPRIETA ADD CONSTRAINT DEC_FROMATO_PROPRIETA_PK PRIMARY KEY (ID_FORMATO_PROPRIETA) USING INDEX DEC_FROMATO_PROPRIETA_PK;

-- changeset root:1751554768189-56
DROP INDEX IDX_CNT_UD_DOC_COMP_REG_RO;

-- changeset root:1751554768189-57
CREATE INDEX IDX_CNT_UD_DOC_COMP_REG_RO ON MON_CONTA_UD_DOC_COMP_READ_ONLY(DT_RIF_CONTA, ID_REGISTRO_UNITA_DOC);

-- changeset root:1751554768189-58
DROP INDEX IDX_CNT_UD_DOC_COMP_TIPO_UD_RO;

-- changeset root:1751554768189-59
CREATE INDEX IDX_CNT_UD_DOC_COMP_TIPO_UD_RO ON MON_CONTA_UD_DOC_COMP_READ_ONLY(DT_RIF_CONTA, ID_TIPO_UNITA_DOC);

-- changeset root:1751554768189-60
DROP INDEX IDX_DT_RIF_CONTA_RO;

-- changeset root:1751554768189-61
CREATE INDEX IDX_DT_RIF_CONTA_RO ON MON_CONTA_BY_STATO_CONSERV_NEW_READ_ONLY(DT_RIF_CONTA);

-- changeset root:1751554768189-62
DROP INDEX IDX_ID_DEC_BACKEND_ELV_FILE_ELENCO_VERS_FAS_OS;

-- changeset root:1751554768189-63
CREATE INDEX IDX_ID_DEC_BACKEND_ELV_FILE_ELENCO_VERS_FAS_OS ON ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE(ID_DEC_BACKEND);

-- changeset root:1751554768189-64
DROP INDEX IDX_ID_DEC_BACKEND_META_VER_AIP_FASC_OS;

-- changeset root:1751554768189-65
CREATE INDEX IDX_ID_DEC_BACKEND_META_VER_AIP_FASC_OS ON FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE(ID_DEC_BACKEND);

-- changeset root:1751554768189-66
DROP INDEX IDX_ID_FILE_ELENCO_VERS_FASC_ELV_FILE_ELENCO_VERS_FAS_OS;

-- changeset root:1751554768189-67
CREATE INDEX IDX_ID_FILE_ELENCO_VERS_FASC_ELV_FILE_ELENCO_VERS_FAS_OS ON ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE(ID_FILE_ELENCO_VERS_FASC);

-- changeset root:1751554768189-68
DROP INDEX IDX_ID_STRUT_ELV_FILE_ELENCO_VERS_FAS_OS;

-- changeset root:1751554768189-69
CREATE INDEX IDX_ID_STRUT_ELV_FILE_ELENCO_VERS_FAS_OS ON ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE(ID_STRUT);

-- changeset root:1751554768189-70
DROP INDEX IDX_ID_STRUT_META_VER_AIP_FASC_OS;

-- changeset root:1751554768189-71
CREATE INDEX IDX_ID_STRUT_META_VER_AIP_FASC_OS ON FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE(ID_STRUT);

-- changeset root:1751554768189-72
DROP INDEX IDX_ID_STRUT_RO;

-- changeset root:1751554768189-73
CREATE INDEX IDX_ID_STRUT_RO ON MON_CONTA_BY_STATO_CONSERV_NEW_READ_ONLY(ID_STRUT);

-- changeset root:1751554768189-74
DROP INDEX IDX_ID_VER_AIP_FASCICOLO_META_VER_AIP_FASC_OS;

-- changeset root:1751554768189-75
CREATE INDEX IDX_ID_VER_AIP_FASCICOLO_META_VER_AIP_FASC_OS ON FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE(ID_VER_AIP_FASCICOLO);

-- changeset root:1751554768189-76
DROP INDEX IDX_ITEM_RICH_ANN_VRS_UD;

-- changeset root:1751554768189-77
CREATE INDEX IDX_ITEM_RICH_ANN_VRS_UD ON ARO_ITEM_RICH_ANNUL_VERS(ID_UNITA_DOC);

-- changeset root:1751554768189-78
DROP INDEX IDX_LOG_JOB_DT_HIST;

-- changeset root:1751554768189-79
CREATE INDEX IDX_LOG_JOB_DT_HIST ON LOG_JOB_HISTORY(NM_JOB, TI_REG_LOG_JOB, DT_REG_LOG_JOB);

-- changeset root:1751554768189-80
DROP INDEX IDX_LOG_JOB_REC_HIST;

-- changeset root:1751554768189-81
CREATE INDEX IDX_LOG_JOB_REC_HIST ON LOG_JOB_HISTORY(NM_JOB, NM_ENTITY_RECORD, ID_RECORD, DT_REG_LOG_JOB);

-- changeset root:1751554768189-82
DROP INDEX IDX_LOG_JOB_SERVER_HIST;

-- changeset root:1751554768189-83
CREATE INDEX IDX_LOG_JOB_SERVER_HIST ON LOG_JOB_HISTORY(CD_IND_SERVER, TO_CHAR("DT_REG_LOG_JOB",'yyyymmddhh24'));

-- changeset root:1751554768189-84
DROP INDEX IDX_TIP_UNI_DOC_ATTIV_TPUD;

-- changeset root:1751554768189-85
CREATE INDEX IDX_TIP_UNI_DOC_ATTIV_TPUD ON DEC_TIPO_UNITA_DOC(ID_TIPO_SERV_ATTIV_TIPO_UD);

-- changeset root:1751554768189-86
DROP INDEX IDX_TIP_UNI_DOC_CONSERV_TPUD;

-- changeset root:1751554768189-87
CREATE INDEX IDX_TIP_UNI_DOC_CONSERV_TPUD ON DEC_TIPO_UNITA_DOC(ID_TIPO_SERV_CONSERV_TIPO_UD);

-- changeset root:1751554768189-88
ALTER TABLE ARO_DOC DROP CONSTRAINT UN_DOC_NI DROP INDEX;

-- changeset root:1751554768189-89
CREATE INDEX IDX_UN_DOC_NI ON ARO_DOC(ID_UNITA_DOC, NI_ORD_DOC);

-- changeset root:1751554768189-90
ALTER TABLE ARO_DOC ADD CONSTRAINT UN_DOC_NI UNIQUE (ID_UNITA_DOC, NI_ORD_DOC) USING INDEX IDX_UN_DOC_NI;

-- changeset root:1751554768189-91
DROP INDEX IDX_UPD_DATI_SPEC_UPD_COMP_OBJECT_STORAGE;

-- changeset root:1751554768189-92
CREATE INDEX IDX_UPD_DATI_SPEC_UPD_COMP_OBJECT_STORAGE ON ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE(ID_UPD_COMP_UNITA_DOC);

-- changeset root:1751554768189-93
DROP INDEX IDX_UPD_DATI_SPEC_UPD_DOC_OBJECT_STORAGE;

-- changeset root:1751554768189-94
CREATE INDEX IDX_UPD_DATI_SPEC_UPD_DOC_OBJECT_STORAGE ON ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE(ID_UPD_DOC_UNITA_DOC);

-- changeset root:1751554768189-95
DROP INDEX IDX_UPD_DATI_SPEC_UPD_UD_OBJECT_STORAGE;

-- changeset root:1751554768189-96
CREATE INDEX IDX_UPD_DATI_SPEC_UPD_UD_OBJECT_STORAGE ON ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE(ID_UPD_UNITA_DOC);

-- changeset root:1751554768189-97
DROP INDEX IDX_VAL_PAR_APL_TI_APP;

-- changeset root:1751554768189-98
CREATE INDEX IDX_VAL_PAR_APL_TI_APP ON APL_VALORE_PARAM_APPLIC(TI_APPART, DS_VALORE_PARAM_APPLIC, ID_PARAM_APPLIC);

-- changeset root:1751554768189-99
DROP INDEX IDX_VERS_INI_DATI_SPEC_COMP_OBJECT_STORAGE;

-- changeset root:1751554768189-100
CREATE INDEX IDX_VERS_INI_DATI_SPEC_COMP_OBJECT_STORAGE ON ARO_VERS_INI_DATI_SPEC_OBJECT_STORAGE(ID_VERS_INI_COMP);

-- changeset root:1751554768189-101
DROP INDEX IDX_VERS_INI_DATI_SPEC_DOC_OBJECT_STORAGE;

-- changeset root:1751554768189-102
CREATE INDEX IDX_VERS_INI_DATI_SPEC_DOC_OBJECT_STORAGE ON ARO_VERS_INI_DATI_SPEC_OBJECT_STORAGE(ID_VERS_INI_DOC);

-- changeset root:1751554768189-103
DROP INDEX IDX_VERS_INI_DATI_SPEC_UD_OBJECT_STORAGE;

-- changeset root:1751554768189-104
CREATE INDEX IDX_VERS_INI_DATI_SPEC_UD_OBJECT_STORAGE ON ARO_VERS_INI_DATI_SPEC_OBJECT_STORAGE(ID_VERS_INI_UNITA_DOC);

-- changeset root:1751554768189-105
ALTER TABLE MON_CONTA_BY_STATO_CONSERV_NEW_READ_ONLY DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-106
CREATE UNIQUE INDEX MON_CONTA_BY_STATO_CONSERV_NEW_PK_RO ON MON_CONTA_BY_STATO_CONSERV_NEW_READ_ONLY(ID_CONTA_BY_STATO_CONSERV);

-- changeset root:1751554768189-107
ALTER TABLE MON_CONTA_BY_STATO_CONSERV_NEW_READ_ONLY ADD CONSTRAINT MON_CONTA_BY_STATO_CONSERV_NEW_PK_RO PRIMARY KEY (ID_CONTA_BY_STATO_CONSERV) USING INDEX MON_CONTA_BY_STATO_CONSERV_NEW_PK_RO;

-- changeset root:1751554768189-108
ALTER TABLE MON_CONTA_UD_DOC_COMP_READ_ONLY DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-109
CREATE UNIQUE INDEX PK_CNT_UD_DOC_COMP_RO ON MON_CONTA_UD_DOC_COMP_READ_ONLY(ID_CONTA_UD_DOC_COMP);

-- changeset root:1751554768189-110
ALTER TABLE MON_CONTA_UD_DOC_COMP_READ_ONLY ADD CONSTRAINT PK_CNT_UD_DOC_COMP_RO PRIMARY KEY (ID_CONTA_UD_DOC_COMP) USING INDEX PK_CNT_UD_DOC_COMP_RO;

-- changeset root:1751554768189-111
ALTER TABLE ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-112
CREATE UNIQUE INDEX PK_ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE ON ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE(ID_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE);

-- changeset root:1751554768189-113
ALTER TABLE ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE ADD CONSTRAINT PK_ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE PRIMARY KEY (ID_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE) USING INDEX PK_ELV_FILE_ELENCO_VERS_FASC_OBJECT_STORAGE;

-- changeset root:1751554768189-114
ALTER TABLE ARO_ERR_RICH_ANNUL_VERS DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-115
CREATE UNIQUE INDEX PK_ERR_RICH_ANN_VRS ON ARO_ERR_RICH_ANNUL_VERS(ID_ERR_RICH_ANNUL_VRS);

-- changeset root:1751554768189-116
ALTER TABLE ARO_ERR_RICH_ANNUL_VERS ADD CONSTRAINT PK_ERR_RICH_ANN_VRS PRIMARY KEY (ID_ERR_RICH_ANNUL_VRS) USING INDEX PK_ERR_RICH_ANN_VRS;

-- changeset root:1751554768189-117
ALTER TABLE FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-118
CREATE UNIQUE INDEX PK_FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE ON FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE(ID_FILE_META_VER_AIP_FASC_OBJECT_STORAGE);

-- changeset root:1751554768189-119
ALTER TABLE FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE ADD CONSTRAINT PK_FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE PRIMARY KEY (ID_FILE_META_VER_AIP_FASC_OBJECT_STORAGE) USING INDEX PK_FAS_FILE_META_VER_AIP_FASC_OBJECT_STORAGE;

-- changeset root:1751554768189-120
ALTER TABLE ARO_FILE_VER_INDICE_AIP_UD DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-121
CREATE UNIQUE INDEX PK_FILE_VER_IX_AIP_UD_NEW ON ARO_FILE_VER_INDICE_AIP_UD(ID_FILE_VER_INDICE_AIP);

-- changeset root:1751554768189-122
ALTER TABLE ARO_FILE_VER_INDICE_AIP_UD ADD CONSTRAINT PK_FILE_VER_IX_AIP_UD_NEW PRIMARY KEY (ID_FILE_VER_INDICE_AIP) USING INDEX PK_FILE_VER_IX_AIP_UD_NEW;

-- changeset root:1751554768189-123
ALTER TABLE DEC_FMT_FIR_BUSTA DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-124
CREATE UNIQUE INDEX PK_FMT_FIR_BUSTA ON DEC_FMT_FIR_BUSTA(ID_FMT_FIR_BUSTA);

-- changeset root:1751554768189-125
ALTER TABLE DEC_FMT_FIR_BUSTA ADD CONSTRAINT PK_FMT_FIR_BUSTA PRIMARY KEY (ID_FMT_FIR_BUSTA) USING INDEX PK_FMT_FIR_BUSTA;

-- changeset root:1751554768189-126
ALTER TABLE ARO_ITEM_RICH_ANNUL_VERS DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-127
CREATE UNIQUE INDEX PK_ITEM_RICH_ANN_VRS ON ARO_ITEM_RICH_ANNUL_VERS(ID_ITEM_RICH_ANNUL_VERS);

-- changeset root:1751554768189-128
ALTER TABLE ARO_ITEM_RICH_ANNUL_VERS ADD CONSTRAINT PK_ITEM_RICH_ANN_VRS PRIMARY KEY (ID_ITEM_RICH_ANNUL_VERS) USING INDEX PK_ITEM_RICH_ANN_VRS;

-- changeset root:1751554768189-129
ALTER TABLE LOG_JOB_HISTORY DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-130
CREATE UNIQUE INDEX PK_LOG_JOB_HIST ON LOG_JOB_HISTORY(ID_LOG_JOB_HIST);

-- changeset root:1751554768189-131
ALTER TABLE LOG_JOB_HISTORY ADD CONSTRAINT PK_LOG_JOB_HISTORY PRIMARY KEY (ID_LOG_JOB_HIST) USING INDEX PK_LOG_JOB_HIST;

-- changeset root:1751554768189-132
ALTER TABLE DEC_REPORT_SERVIZIO_VERIFICA_COMP_DOC DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-133
CREATE UNIQUE INDEX PK_REPORTSERVIZIOVERIFICACOMDOC ON DEC_REPORT_SERVIZIO_VERIFICA_COMP_DOC(ID_REPORT_SERVIZIO_VERIFICA_COMP_DOC);

-- changeset root:1751554768189-134
ALTER TABLE DEC_REPORT_SERVIZIO_VERIFICA_COMP_DOC ADD CONSTRAINT PK_REPORTSERVIZIOVERIFICACOMDOC PRIMARY KEY (ID_REPORT_SERVIZIO_VERIFICA_COMP_DOC) USING INDEX PK_REPORTSERVIZIOVERIFICACOMDOC;

-- changeset root:1751554768189-135
ALTER TABLE DEC_SERVIZIO_VERIFICA_COMP_DOC DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-136
CREATE UNIQUE INDEX PK_SERVIZIOVERIFICACOMPDOC ON DEC_SERVIZIO_VERIFICA_COMP_DOC(ID_SERVIZIO_VERIFICA_COMP_DOC);

-- changeset root:1751554768189-137
ALTER TABLE DEC_SERVIZIO_VERIFICA_COMP_DOC ADD CONSTRAINT PK_SERVIZIOVERIFICACOMPDOC PRIMARY KEY (ID_SERVIZIO_VERIFICA_COMP_DOC) USING INDEX PK_SERVIZIOVERIFICACOMPDOC;

-- changeset root:1751554768189-138
ALTER TABLE SER_VER_SERIE_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-139
CREATE UNIQUE INDEX PK_SER_VER_SERIE_OBJECT_STORAGE ON SER_VER_SERIE_OBJECT_STORAGE(ID_VER_SERIE_OBJECT_STORAGE);

-- changeset root:1751554768189-140
ALTER TABLE SER_VER_SERIE_OBJECT_STORAGE ADD CONSTRAINT PK_SER_VER_SERIE_OBJECT_STORAGE PRIMARY KEY (ID_VER_SERIE_OBJECT_STORAGE) USING INDEX PK_SER_VER_SERIE_OBJECT_STORAGE;

-- changeset root:1751554768189-141
ALTER TABLE VRS_SES_UPD_UNITA_DOC_KO DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-142
CREATE UNIQUE INDEX PK_SES_UPD_UD_KO ON VRS_SES_UPD_UNITA_DOC_KO(ID_SES_UPD_UNITA_DOC_KO);

-- changeset root:1751554768189-143
ALTER TABLE VRS_SES_UPD_UNITA_DOC_KO ADD CONSTRAINT PK_SES_UPD_UD_KO PRIMARY KEY (ID_SES_UPD_UNITA_DOC_KO) USING INDEX PK_SES_UPD_UD_KO;

-- changeset root:1751554768189-144
ALTER TABLE ARO_UPD_DATI_SPEC_UNITA_DOC DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-145
CREATE UNIQUE INDEX PK_UPD_DATI_SPEC ON ARO_UPD_DATI_SPEC_UNITA_DOC(ID_UPD_DATI_SPEC_UNITA_DOC);

-- changeset root:1751554768189-146
ALTER TABLE ARO_UPD_DATI_SPEC_UNITA_DOC ADD CONSTRAINT PK_UPD_DATI_SPEC PRIMARY KEY (ID_UPD_DATI_SPEC_UNITA_DOC) USING INDEX PK_UPD_DATI_SPEC;

-- changeset root:1751554768189-147
ALTER TABLE ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-148
CREATE UNIQUE INDEX PK_UPD_DATI_SPEC_UD_OBJECT_STORAGE ON ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE(ID_UPD_DATI_SPEC_UD_OBJECT_STORAGE);

-- changeset root:1751554768189-149
ALTER TABLE ARO_UPD_DATI_SPEC_UD_OBJECT_STORAGE ADD CONSTRAINT PK_UPD_DATI_SPEC_UD_OBJECT_STORAGE PRIMARY KEY (ID_UPD_DATI_SPEC_UD_OBJECT_STORAGE) USING INDEX PK_UPD_DATI_SPEC_UD_OBJECT_STORAGE;

-- changeset root:1751554768189-150
ALTER TABLE VRS_UPD_UNITA_DOC_KO DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-151
CREATE UNIQUE INDEX PK_UPD_UD_KO ON VRS_UPD_UNITA_DOC_KO(ID_UPD_UNITA_DOC_KO);

-- changeset root:1751554768189-152
ALTER TABLE VRS_UPD_UNITA_DOC_KO ADD CONSTRAINT PK_UPD_UD_KO PRIMARY KEY (ID_UPD_UNITA_DOC_KO) USING INDEX PK_UPD_UD_KO;

-- changeset root:1751554768189-153
ALTER TABLE APL_VAL_PARAM_APPLIC_MULTI DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-154
CREATE UNIQUE INDEX PK_VAL_PAR_APL_MULTI ON APL_VAL_PARAM_APPLIC_MULTI(ID_VAL_PARAM_APPLIC_MULTI);

-- changeset root:1751554768189-155
ALTER TABLE APL_VAL_PARAM_APPLIC_MULTI ADD CONSTRAINT PK_VAL_PAR_APL_MULTI PRIMARY KEY (ID_VAL_PARAM_APPLIC_MULTI) USING INDEX PK_VAL_PAR_APL_MULTI;

-- changeset root:1751554768189-156
ALTER TABLE ARO_VERS_INI_DATI_SPEC_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-157
CREATE UNIQUE INDEX PK_VERS_INI_DATI_SPEC_OBJECT_STORAGE ON ARO_VERS_INI_DATI_SPEC_OBJECT_STORAGE(ID_VERS_INI_DATI_SPEC_OBJECT_STORAGE);

-- changeset root:1751554768189-158
ALTER TABLE ARO_VERS_INI_DATI_SPEC_OBJECT_STORAGE ADD CONSTRAINT PK_VERS_INI_DATI_SPEC_OBJECT_STORAGE PRIMARY KEY (ID_VERS_INI_DATI_SPEC_OBJECT_STORAGE) USING INDEX PK_VERS_INI_DATI_SPEC_OBJECT_STORAGE;

-- changeset root:1751554768189-159
ALTER TABLE ARO_VERS_INI_DATI_SPEC DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-160
CREATE UNIQUE INDEX PK_VERS_INI_SPEC ON ARO_VERS_INI_DATI_SPEC(ID_VERS_INI_DATI_SPEC);

-- changeset root:1751554768189-161
ALTER TABLE ARO_VERS_INI_DATI_SPEC ADD CONSTRAINT PK_VERS_INI_SPEC PRIMARY KEY (ID_VERS_INI_DATI_SPEC) USING INDEX PK_VERS_INI_SPEC;

-- changeset root:1751554768189-162
ALTER TABLE VRS_XML_SES_FASC_ERR_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-163
CREATE UNIQUE INDEX PK_VRS_XML_SES_FASC_ERR_OBJECT_STORAGE ON VRS_XML_SES_FASC_ERR_OBJECT_STORAGE(ID_XML_SES_FASC_ERR_OBJECT_STORAGE);

-- changeset root:1751554768189-164
ALTER TABLE VRS_XML_SES_FASC_ERR_OBJECT_STORAGE ADD CONSTRAINT PK_VRS_XML_SES_FASC_ERR_OBJECT_STORAGE PRIMARY KEY (ID_XML_SES_FASC_ERR_OBJECT_STORAGE) USING INDEX PK_VRS_XML_SES_FASC_ERR_OBJECT_STORAGE;

-- changeset root:1751554768189-165
ALTER TABLE VRS_XML_SES_FASC_KO_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-166
CREATE UNIQUE INDEX PK_VRS_XML_SES_FASC_KO_OBJECT_STORAGE ON VRS_XML_SES_FASC_KO_OBJECT_STORAGE(ID_XML_SES_FASC_KO_OBJECT_STORAGE);

-- changeset root:1751554768189-167
ALTER TABLE VRS_XML_SES_FASC_KO_OBJECT_STORAGE ADD CONSTRAINT PK_VRS_XML_SES_FASC_KO_OBJECT_STORAGE PRIMARY KEY (ID_XML_SES_FASC_KO_OBJECT_STORAGE) USING INDEX PK_VRS_XML_SES_FASC_KO_OBJECT_STORAGE;

-- changeset root:1751554768189-168
ALTER TABLE VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-169
CREATE UNIQUE INDEX PK_VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE ON VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE(ID_XML_SES_UPD_UD_ERR_OBJECT_STORAGE);

-- changeset root:1751554768189-170
ALTER TABLE VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE ADD CONSTRAINT PK_VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE PRIMARY KEY (ID_XML_SES_UPD_UD_ERR_OBJECT_STORAGE) USING INDEX PK_VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE;

-- changeset root:1751554768189-171
ALTER TABLE VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-172
CREATE UNIQUE INDEX PK_VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE ON VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE(ID_XML_SES_UPD_UD_KO_OBJECT_STORAGE);

-- changeset root:1751554768189-173
ALTER TABLE VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE ADD CONSTRAINT PK_VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE PRIMARY KEY (ID_XML_SES_UPD_UD_KO_OBJECT_STORAGE) USING INDEX PK_VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE;

-- changeset root:1751554768189-174
ALTER TABLE FAS_XML_FASC_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-175
CREATE UNIQUE INDEX PK_XML_FASC_OS_FASC ON FAS_XML_FASC_OBJECT_STORAGE(ID_FASCICOLO);

-- changeset root:1751554768189-176
ALTER TABLE FAS_XML_FASC_OBJECT_STORAGE ADD CONSTRAINT PK_XML_FASC_OS_FASC PRIMARY KEY (ID_FASCICOLO) USING INDEX PK_XML_FASC_OS_FASC;

-- changeset root:1751554768189-177
ALTER TABLE VRS_XML_SES_UPD_UNITA_DOC_KO DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-178
CREATE UNIQUE INDEX PK_XML_SES_UPD_UD_KO ON VRS_XML_SES_UPD_UNITA_DOC_KO(ID_XML_SES_UPD_UNITA_DOC_KO);

-- changeset root:1751554768189-179
ALTER TABLE VRS_XML_SES_UPD_UNITA_DOC_KO ADD CONSTRAINT PK_XML_SES_UPD_UD_KO PRIMARY KEY (ID_XML_SES_UPD_UNITA_DOC_KO) USING INDEX PK_XML_SES_UPD_UD_KO;

-- changeset root:1751554768189-180
ALTER TABLE ARO_XML_UPD_UD_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-181
CREATE UNIQUE INDEX PK_XML_UPD_UD_OS_UPD ON ARO_XML_UPD_UD_OBJECT_STORAGE(ID_UPD_UNITA_DOC);

-- changeset root:1751554768189-182
ALTER TABLE ARO_XML_UPD_UD_OBJECT_STORAGE ADD CONSTRAINT PK_XML_UPD_UD_OS_UPD PRIMARY KEY (ID_UPD_UNITA_DOC) USING INDEX PK_XML_UPD_UD_OS_UPD;

-- changeset root:1751554768189-183
ALTER TABLE ARO_XML_UPD_UNITA_DOC DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-184
CREATE UNIQUE INDEX PK_XML_UPD_UNITA_DOC ON ARO_XML_UPD_UNITA_DOC(ID_XML_UPD_UNITA_DOC);

-- changeset root:1751554768189-185
ALTER TABLE ARO_XML_UPD_UNITA_DOC ADD CONSTRAINT PK_XML_UPD_UNITA_DOC PRIMARY KEY (ID_XML_UPD_UNITA_DOC) USING INDEX PK_XML_UPD_UNITA_DOC;

-- changeset root:1751554768189-186
ALTER TABLE FAS_XML_VERS_FASC_OBJECT_STORAGE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-187
CREATE UNIQUE INDEX PK_XML_VERS_FASC_OS_FASC ON FAS_XML_VERS_FASC_OBJECT_STORAGE(ID_FASCICOLO);

-- changeset root:1751554768189-188
ALTER TABLE FAS_XML_VERS_FASC_OBJECT_STORAGE ADD CONSTRAINT PK_XML_VERS_FASC_OS_FASC PRIMARY KEY (ID_FASCICOLO) USING INDEX PK_XML_VERS_FASC_OS_FASC;

-- changeset root:1751554768189-189
ALTER TABLE MON_CONTA_UD_DOC_COMP_READ_ONLY DROP CONSTRAINT UN_CNT_UD_DOC_COMP_RO DROP INDEX;

-- changeset root:1751554768189-190
CREATE UNIQUE INDEX UN_CNT_UD_DOC_COMP_RO ON MON_CONTA_UD_DOC_COMP_READ_ONLY(DT_RIF_CONTA, ID_STRUT, ID_SUB_STRUT, AA_KEY_UNITA_DOC, ID_REGISTRO_UNITA_DOC, ID_TIPO_UNITA_DOC, ID_TIPO_DOC_PRINC);

-- changeset root:1751554768189-191
ALTER TABLE MON_CONTA_UD_DOC_COMP_READ_ONLY ADD CONSTRAINT UN_CNT_UD_DOC_COMP_RO UNIQUE (DT_RIF_CONTA, ID_STRUT, ID_SUB_STRUT, AA_KEY_UNITA_DOC, ID_REGISTRO_UNITA_DOC, ID_TIPO_UNITA_DOC, ID_TIPO_DOC_PRINC) USING INDEX UN_CNT_UD_DOC_COMP_RO;

-- changeset root:1751554768189-192
ALTER TABLE ARO_ERR_RICH_ANNUL_VERS DROP CONSTRAINT UN_ERR_RICH_ANN_VRS DROP INDEX;

-- changeset root:1751554768189-193
CREATE UNIQUE INDEX UN_ERR_RICH_ANN_VRS ON ARO_ERR_RICH_ANNUL_VERS(ID_ITEM_RICH_ANNUL_VERS, PG_ERR);

-- changeset root:1751554768189-194
ALTER TABLE ARO_ERR_RICH_ANNUL_VERS ADD CONSTRAINT UN_ERR_RICH_ANN_VRS UNIQUE (ID_ITEM_RICH_ANNUL_VERS, PG_ERR) USING INDEX UN_ERR_RICH_ANN_VRS;

-- changeset root:1751554768189-195
ALTER TABLE VRS_ERR_SES_UPD_UNITA_DOC_KO DROP CONSTRAINT UN_ERR_SES_UPD_UD_KO DROP INDEX;

-- changeset root:1751554768189-196
CREATE UNIQUE INDEX UN_ERR_SES_UPD_UD_KO ON VRS_ERR_SES_UPD_UNITA_DOC_KO(ID_SES_UPD_UNITA_DOC_KO, PG_ERR);

-- changeset root:1751554768189-197
ALTER TABLE VRS_ERR_SES_UPD_UNITA_DOC_KO ADD CONSTRAINT UN_ERR_SES_UPD_UD_KO UNIQUE (ID_SES_UPD_UNITA_DOC_KO, PG_ERR) USING INDEX UN_ERR_SES_UPD_UD_KO;

-- changeset root:1751554768189-198
DROP INDEX UN_FILE_ELE_VRS_FASC;

-- changeset root:1751554768189-199
CREATE UNIQUE INDEX UN_FILE_ELE_VRS_FASC ON ELV_FILE_ELENCO_VERS_FASC(ID_STRUT, ID_ELENCO_VERS_FASC, TI_FILE_ELENCO_VERS);

-- changeset root:1751554768189-200
ALTER TABLE ARO_FILE_VER_INDICE_AIP_UD DROP CONSTRAINT UN_FILE_VER_IX_AIP_UD_NEW DROP INDEX;

-- changeset root:1751554768189-201
CREATE UNIQUE INDEX UN_FILE_VER_IX_AIP_UD_NEW ON ARO_FILE_VER_INDICE_AIP_UD(ID_VER_INDICE_AIP);

-- changeset root:1751554768189-202
ALTER TABLE ARO_FILE_VER_INDICE_AIP_UD ADD CONSTRAINT UN_FILE_VER_IX_AIP_UD_NEW UNIQUE (ID_VER_INDICE_AIP) USING INDEX UN_FILE_VER_IX_AIP_UD_NEW;

-- changeset root:1751554768189-203
ALTER TABLE DEC_FMT_FIR_BUSTA DROP CONSTRAINT UN_FMT_FIR_BUSTA DROP INDEX;

-- changeset root:1751554768189-204
CREATE UNIQUE INDEX UN_FMT_FIR_BUSTA ON DEC_FMT_FIR_BUSTA(TI_FORMATO);

-- changeset root:1751554768189-205
ALTER TABLE DEC_FMT_FIR_BUSTA ADD CONSTRAINT UN_FMT_FIR_BUSTA UNIQUE (TI_FORMATO) USING INDEX UN_FMT_FIR_BUSTA;

-- changeset root:1751554768189-206
ALTER TABLE DEC_FORMATO_VALUTAZIONE DROP CONSTRAINT UN_FMT_PROP_FMT_STD DROP INDEX;

-- changeset root:1751554768189-207
CREATE UNIQUE INDEX UN_FMT_PROP_FMT_STD ON DEC_FORMATO_VALUTAZIONE(ID_FORMATO_PROPRIETA, ID_FORMATO_FILE_STANDARD);

-- changeset root:1751554768189-208
ALTER TABLE DEC_FORMATO_VALUTAZIONE ADD CONSTRAINT UN_FMT_PROP_FMT_STD UNIQUE (ID_FORMATO_PROPRIETA, ID_FORMATO_FILE_STANDARD) USING INDEX UN_FMT_PROP_FMT_STD;

-- changeset root:1751554768189-209
ALTER TABLE ARO_ITEM_RICH_ANNUL_VERS DROP CONSTRAINT UN_ITEM_RICH_ANN_VRS DROP INDEX;

-- changeset root:1751554768189-210
CREATE UNIQUE INDEX UN_ITEM_RICH_ANN_VRS ON ARO_ITEM_RICH_ANNUL_VERS(ID_RICH_ANNUL_VERS, PG_ITEM_RICH_ANNUL_VERS);

-- changeset root:1751554768189-211
ALTER TABLE ARO_ITEM_RICH_ANNUL_VERS ADD CONSTRAINT UN_ITEM_RICH_ANN_VRS UNIQUE (ID_RICH_ANNUL_VERS, PG_ITEM_RICH_ANNUL_VERS) USING INDEX UN_ITEM_RICH_ANN_VRS;

-- changeset root:1751554768189-212
ALTER TABLE DEC_FORMATO_GRUPPO_PROPRIETA DROP CONSTRAINT UN_NM_FMT_GRP_PROP DROP INDEX;

-- changeset root:1751554768189-213
CREATE UNIQUE INDEX UN_NM_FMT_GRP_PROP ON DEC_FORMATO_GRUPPO_PROPRIETA(NM_FORMATO_GRUPPO_PROPRIETA);

-- changeset root:1751554768189-214
ALTER TABLE DEC_FORMATO_GRUPPO_PROPRIETA ADD CONSTRAINT UN_NM_FMT_GRP_PROP UNIQUE (NM_FORMATO_GRUPPO_PROPRIETA) USING INDEX UN_NM_FMT_GRP_PROP;

-- changeset root:1751554768189-215
ALTER TABLE DEC_FORMATO_PROPRIETA DROP CONSTRAINT UN_NM_FMT_PROP DROP INDEX;

-- changeset root:1751554768189-216
CREATE UNIQUE INDEX UN_NM_FMT_PROP ON DEC_FORMATO_PROPRIETA(NM_FORMATO_PROPRIETA);

-- changeset root:1751554768189-217
ALTER TABLE DEC_FORMATO_PROPRIETA ADD CONSTRAINT UN_NM_FMT_PROP UNIQUE (NM_FORMATO_PROPRIETA) USING INDEX UN_NM_FMT_PROP;

-- changeset root:1751554768189-218
ALTER TABLE FIR_OCSP DROP CONSTRAINT UN_OCSP DROP INDEX;

-- changeset root:1751554768189-219
CREATE UNIQUE INDEX UN_OCSP ON FIR_OCSP(ID_CERTIF_OCSP, DS_CERTIF_ISSUERNAME, DS_CERTIF_SERIAL_BASE64, DS_CERTIF_SKI_BASE64);

-- changeset root:1751554768189-220
ALTER TABLE FIR_OCSP ADD CONSTRAINT UN_OCSP UNIQUE (ID_CERTIF_OCSP, DS_CERTIF_ISSUERNAME, DS_CERTIF_SERIAL_BASE64, DS_CERTIF_SKI_BASE64) USING INDEX UN_OCSP;

-- changeset root:1751554768189-221
ALTER TABLE VRS_XML_SES_FASC_ERR_OBJECT_STORAGE DROP CONSTRAINT UN_SES_FASC_ERR_OBJECT_STORAGE DROP INDEX;

-- changeset root:1751554768189-222
CREATE UNIQUE INDEX UN_SES_FASC_ERR_OBJECT_STORAGE ON VRS_XML_SES_FASC_ERR_OBJECT_STORAGE(ID_SES_FASCICOLO_ERR);

-- changeset root:1751554768189-223
ALTER TABLE VRS_XML_SES_FASC_ERR_OBJECT_STORAGE ADD CONSTRAINT UN_SES_FASC_ERR_OBJECT_STORAGE UNIQUE (ID_SES_FASCICOLO_ERR) USING INDEX UN_SES_FASC_ERR_OBJECT_STORAGE;

-- changeset root:1751554768189-224
ALTER TABLE VRS_XML_SES_FASC_KO_OBJECT_STORAGE DROP CONSTRAINT UN_SES_FASC_KO_OBJECT_STORAGE DROP INDEX;

-- changeset root:1751554768189-225
CREATE UNIQUE INDEX UN_SES_FASC_KO_OBJECT_STORAGE ON VRS_XML_SES_FASC_KO_OBJECT_STORAGE(ID_SES_FASCICOLO_KO);

-- changeset root:1751554768189-226
ALTER TABLE VRS_XML_SES_FASC_KO_OBJECT_STORAGE ADD CONSTRAINT UN_SES_FASC_KO_OBJECT_STORAGE UNIQUE (ID_SES_FASCICOLO_KO) USING INDEX UN_SES_FASC_KO_OBJECT_STORAGE;

-- changeset root:1751554768189-227
ALTER TABLE VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE DROP CONSTRAINT UN_SES_UPD_UD_ERR_OBJECT_STORAGE DROP INDEX;

-- changeset root:1751554768189-228
CREATE UNIQUE INDEX UN_SES_UPD_UD_ERR_OBJECT_STORAGE ON VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE(ID_SES_UPD_UNITA_DOC_ERR);

-- changeset root:1751554768189-229
ALTER TABLE VRS_XML_SES_UPD_UD_ERR_OBJECT_STORAGE ADD CONSTRAINT UN_SES_UPD_UD_ERR_OBJECT_STORAGE UNIQUE (ID_SES_UPD_UNITA_DOC_ERR) USING INDEX UN_SES_UPD_UD_ERR_OBJECT_STORAGE;

-- changeset root:1751554768189-230
ALTER TABLE VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE DROP CONSTRAINT UN_SES_UPD_UD_KO_OBJECT_STORAGE DROP INDEX;

-- changeset root:1751554768189-231
CREATE UNIQUE INDEX UN_SES_UPD_UD_KO_OBJECT_STORAGE ON VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE(ID_SES_UPD_UNITA_DOC_KO);

-- changeset root:1751554768189-232
ALTER TABLE VRS_XML_SES_UPD_UD_KO_OBJECT_STORAGE ADD CONSTRAINT UN_SES_UPD_UD_KO_OBJECT_STORAGE UNIQUE (ID_SES_UPD_UNITA_DOC_KO) USING INDEX UN_SES_UPD_UD_KO_OBJECT_STORAGE;

-- changeset root:1751554768189-233
ALTER TABLE DEC_REPORT_SERVIZIO_VERIFICA_COMP_DOC DROP CONSTRAINT UN_TIREPORTSERVIZIO DROP INDEX;

-- changeset root:1751554768189-234
CREATE UNIQUE INDEX UN_TIREPORTSERVIZIO ON DEC_REPORT_SERVIZIO_VERIFICA_COMP_DOC(TI_REPORT, ID_SERVIZIO_VERIFICA_COMP_DOC);

-- changeset root:1751554768189-235
ALTER TABLE DEC_REPORT_SERVIZIO_VERIFICA_COMP_DOC ADD CONSTRAINT UN_TIREPORTSERVIZIO UNIQUE (TI_REPORT, ID_SERVIZIO_VERIFICA_COMP_DOC) USING INDEX UN_TIREPORTSERVIZIO;

-- changeset root:1751554768189-236
ALTER TABLE APL_VAL_PARAM_APPLIC_MULTI DROP CONSTRAINT UN_VAL_PAR_APL_MULTI DROP INDEX;

-- changeset root:1751554768189-237
CREATE UNIQUE INDEX UN_VAL_PAR_APL_MULTI ON APL_VAL_PARAM_APPLIC_MULTI(ID_PARAM_APPLIC, ID_AMBIENTE, DS_VALORE_PARAM_APPLIC);

-- changeset root:1751554768189-238
ALTER TABLE APL_VAL_PARAM_APPLIC_MULTI ADD CONSTRAINT UN_VAL_PAR_APL_MULTI UNIQUE (ID_PARAM_APPLIC, ID_AMBIENTE, DS_VALORE_PARAM_APPLIC) USING INDEX UN_VAL_PAR_APL_MULTI;

-- changeset root:1751554768189-239
ALTER TABLE DEC_SERVIZIO_VERIFICA_COMP_DOC DROP CONSTRAINT UN_VERSIONESERVIZIO DROP INDEX;

-- changeset root:1751554768189-240
CREATE UNIQUE INDEX UN_VERSIONESERVIZIO ON DEC_SERVIZIO_VERIFICA_COMP_DOC(CD_SERVIZIO, NM_VERSIONE);

-- changeset root:1751554768189-241
ALTER TABLE DEC_SERVIZIO_VERIFICA_COMP_DOC ADD CONSTRAINT UN_VERSIONESERVIZIO UNIQUE (CD_SERVIZIO, NM_VERSIONE) USING INDEX UN_VERSIONESERVIZIO;

-- changeset root:1751554768189-242
DROP INDEX UN_XML_FASC;

-- changeset root:1751554768189-243
CREATE UNIQUE INDEX UN_XML_FASC ON FAS_XML_FASCICOLO(ID_FASCICOLO, ID_MODELLO_XSD_FASCICOLO);

-- changeset root:1751554768189-244
ALTER TABLE VRS_XML_SES_UPD_UNITA_DOC_KO DROP CONSTRAINT UN_XML_SES_UPD_UD_KO DROP INDEX;

-- changeset root:1751554768189-245
CREATE UNIQUE INDEX UN_XML_SES_UPD_UD_KO ON VRS_XML_SES_UPD_UNITA_DOC_KO(ID_SES_UPD_UD_KO, TI_XML);

-- changeset root:1751554768189-246
ALTER TABLE VRS_XML_SES_UPD_UNITA_DOC_KO ADD CONSTRAINT UN_XML_SES_UPD_UD_KO UNIQUE (ID_SES_UPD_UD_KO, TI_XML) USING INDEX UN_XML_SES_UPD_UD_KO;

-- changeset root:1751554768189-247
ALTER TABLE VRS_SESSIONE_VERS_KO_ELIMINATE DROP PRIMARY KEY DROP INDEX;

-- changeset root:1751554768189-248
CREATE UNIQUE INDEX VRS_SESSIONE_VERS_KO_ELIMINATE_PK ON VRS_SESSIONE_VERS_KO_ELIMINATE(ID_SESSIONE_VERS_KO_ELIMINATE);

-- changeset root:1751554768189-249
ALTER TABLE VRS_SESSIONE_VERS_KO_ELIMINATE ADD CONSTRAINT VRS_SESSIONE_VERS_KO_ELIMINATE_PK PRIMARY KEY (ID_SESSIONE_VERS_KO_ELIMINATE) USING INDEX VRS_SESSIONE_VERS_KO_ELIMINATE_PK;

-- changeset root:1751554768189-250
CREATE OR REPLACE FORCE VIEW ARO_V_RIC_UNITA_DOC_RIC_DS (ID_UNITA_DOC, ID_STRUT_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, ID_SUB_STRUT, DT_CREAZIONE, FL_UNITA_DOC_FIRMATO, TI_ESITO_VERIF_FIRME, DS_MSG_ESITO_VERIF_FIRME, ID_TIPO_UNITA_DOC, ID_STRUT_TIPO_UNITA_DOC, NM_TIPO_UNITA_DOC, FL_FORZA_ACCETTAZIONE, FL_FORZA_CONSERVAZIONE, DS_KEY_ORD, DL_OGGETTO_UNITA_DOC, DT_REG_UNITA_DOC, TI_CONSERVAZIONE, NM_SISTEMA_MIGRAZ, NI_ALLEG, NI_ANNESSI, NI_ANNOT, ID_TIPO_DOC, NM_TIPO_DOC_PRINC, TI_STATO_CONSERVAZIONE, TI_STATO_UD_ELENCO_VERS, DS_LISTA_STATI_ELENCO_VERS) AS SELECT /*+ parallel */
           -- colonne unità documentaria
           ud.id_unita_doc,
           ud.id_strut                                     id_strut_unita_doc,
           ud.cd_registro_key_unita_doc,
           ud.aa_key_unita_doc,
           ud.cd_key_unita_doc,
           ud.id_sub_strut,
           ud.dt_creazione,
           ud.fl_unita_doc_firmato,
           ud.ti_esito_verif_firme,
           ud.ds_msg_esito_verif_firme,
           ud.id_tipo_unita_doc,
           tipo_unita_doc.id_strut                         id_strut_tipo_unita_doc,
           tipo_unita_doc.nm_tipo_unita_doc,
           ud.fl_forza_accettazione,
           ud.fl_forza_conservazione,
           ud.ds_key_ord,
           ud.dl_oggetto_unita_doc,
           ud.dt_reg_unita_doc,
           ud.ti_conservazione,
           ud.nm_sistema_migraz,
           ud.ni_alleg,
           ud.ni_annessi,
           ud.ni_annot,
           -- ===============================================================================
           doc.id_tipo_doc,
           (SELECT tipo_doc_princ.nm_tipo_doc
              FROM ARO_DOC  doc_princ
                   JOIN DEC_TIPO_DOC tipo_doc_princ
                       ON (tipo_doc_princ.id_tipo_doc = doc_princ.id_tipo_doc)
             WHERE     doc_princ.id_unita_doc = ud.id_unita_doc
                   AND doc_princ.ti_doc = 'PRINCIPALE')    nm_tipo_doc_princ,
           --  colonne aggiunte

           ud.ti_stato_conservazione,
           ud.ti_stato_ud_elenco_vers,
           (SELECT LISTAGG (tmp.ti_stato_elenco_vers, '; ')
                       WITHIN GROUP (ORDER BY tmp.ti_stato_elenco_vers)
              FROM (SELECT ud_elenco.ti_stato_ud_elenco_vers    ti_stato_elenco_vers
                      FROM ARO_UNITA_DOC ud_elenco
                     WHERE ud_elenco.id_unita_doc = ud.id_unita_doc
                    UNION 
                    SELECT 
                           doc_elenco.ti_stato_doc_elenco_vers    ti_stato_elenco_vers
                      FROM ARO_DOC doc_elenco
                     WHERE     doc_elenco.id_unita_doc = ud.id_unita_doc
                           AND doc_elenco.ti_stato_doc_elenco_vers
                                   IS NOT NULL) tmp)       ds_lista_stati_elenco_vers
      FROM ARO_UNITA_DOC  ud
           JOIN DEC_TIPO_UNITA_DOC tipo_unita_doc
               ON (tipo_unita_doc.id_tipo_unita_doc = ud.id_tipo_unita_doc)
           JOIN ARO_DOC doc ON (doc.id_unita_doc = ud.id_unita_doc);

-- changeset root:1751554768189-251
CREATE OR REPLACE FORCE VIEW ARO_V_VIS_COMP (NM_AMBIENTE, NM_ENTE, NM_STRUT, ID_UNITA_DOC, ID_STRUT_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, CD_KEY_UNITA_DOC_NORMALIZ, ID_TIPO_UNITA_DOC, NM_TIPO_UNITA_DOC, DT_ANNUL_UNITA_DOC, TI_ANNUL_UNITA_DOC, DL_OGGETTO_UNITA_DOC, DT_REG_UNITA_DOC, DT_CREAZIONE_UD, NT_ANNUL_UNITA_DOC, ID_DOC, CD_KEY_DOC_VERS, TI_DOC, PG_DOC, NM_TIPO_DOC, DL_DOC, DS_AUTORE_DOC, DT_ANNUL_DOC, TI_ANNUL_DOC, DT_CREAZIONE_DOC, TI_STATO_DOC, NM_TIPO_STRUT_DOC, NT_ANNUL_DOC, NI_ORD_DOC, ID_COMP_DOC, NI_ORD_COMP_DOC, NM_TIPO_COMP_DOC, TI_SUPPORTO_COMP, DS_NOME_COMP_VERS, DS_HASH_FILE_VERS, DL_URN_COMP_VERS, DS_ID_COMP_VERS, NM_FORMATO_VERS, NM_TIPO_RAPPR_COMP, TM_RIF_TEMP_VERS, DS_RIF_TEMP_VERS, FL_RIF_TEMP_DATA_FIRMA_VERS, NI_ORD_COMP_PADRE, FL_NO_CALC_FMT_VERIF_FIRME, FL_NO_CALC_HASH_FILE, DS_URN_COMP_CALC, NM_FORMATO_CALC, NI_SIZE_FILE_CALC, DS_HASH_FILE_CALC, DS_ALGO_HASH_FILE_CALC, CD_ENCODING_HASH_FILE_CALC, DS_HASH_FILE_256, DS_ALGO_HASH_FILE_256, CD_ENCODING_HASH_FILE_256, TI_ESITO_CONTR_FORMATO_FILE, DS_MSG_ESITO_CONTR_FORMATO, DS_FORMATO_RAPPR_CALC, DS_FORMATO_RAPPR_ESTESO_CALC, DS_FORMATO_RAPPR_FILE_DOC, FL_COMP_FIRMATO, TI_ESITO_VERIF_FIRME, DS_MSG_ESITO_VERIF_FIRME, NM_MIMETYPE_FILE, DS_URN_ORIGINALE, DS_URN_NORMALIZZATO, ID_VOLUME_CONSERV, NM_VOLUME_CONSERV, TI_STATO_VOLUME_CONSERV, DT_CHIUS_VOLUME, TI_ESITO_VERIF_FIRME_CHIUS, DS_ESITO_VERIF_FIRME_CHIUS, ID_ELENCO_VERS, NM_ELENCO_VERS, TI_STATO_ELENCO_VERS, DT_CHIUS_ELENCO_VERS, TI_ESITO_VERIF_FIRME_DT_VERS, DS_ESITO_VERIF_FIRME_DT_VERS, CD_REGISTRO_KEY_UNITA_DOC_RIF, AA_KEY_UNITA_DOC_RIF, CD_KEY_UNITA_DOC_RIF, TIPO_ARCHIVIAZIONE, CD_SUB_PARTITION, ID_FILE_ORACLE, NM_TENANT, NM_BUCKET, CD_KEY_FILE, DS_NOME_FILE_ARK, TI_STATO_DT_VERS, DS_SERVIZIO_VERIFICA_COMP_DOC) AS select
 amb.nm_ambiente,
 ente.nm_ente,
 strut.nm_strut,

-- info unit¿¿ documentaria
 ud.id_unita_doc,
 ud.id_strut, 
 ud.cd_registro_key_unita_doc, ud.aa_key_unita_doc, ud.cd_key_unita_doc, ud.cd_key_unita_doc_normaliz,
 tipo_ud.id_tipo_unita_doc, tipo_ud.nm_tipo_unita_doc, 
 ud.dt_annul dt_annul_unita_doc,
 ud.ti_annul ti_annul_unita_doc,
 ud.dl_oggetto_unita_doc,
 ud.dt_reg_unita_doc,
 ud.dt_creazione dt_creazione_ud,
 ud.nt_annul nt_annul_unita_doc,

 
-- info documento 
 doc.id_doc,
 doc.cd_key_doc_vers,
 doc.ti_doc,
 doc.pg_doc,
 tipo_doc.nm_tipo_doc,
 doc.dl_doc, doc.ds_autore_doc, 
 doc.dt_annul dt_annul_doc,
 doc.ti_annul ti_annul_doc,

 doc.dt_creazione dt_creazione_doc,
 doc.ti_stato_doc,
 tipo_strut_doc.nm_tipo_strut_doc,
 doc.nt_annul nt_annul_doc,
 doc.ni_ord_doc,

 
-- info componente versate
 comp_doc.id_comp_doc,
 comp_doc.ni_ord_comp_doc,
 tipo_comp.nm_tipo_comp_doc, 
 comp_doc.ti_supporto_comp, 
 comp_doc.ds_nome_comp_vers, comp_doc.ds_hash_file_vers, comp_doc.dl_urn_comp_vers, comp_doc.ds_id_comp_vers,
 fmt_file_vers.nm_formato_file_doc nm_formato_vers, 
 tipo_rappr.nm_tipo_rappr_comp, 
 comp_doc.tm_rif_temp_vers, comp_doc.ds_rif_temp_vers, comp_doc.fl_rif_temp_data_firma_vers, 
 comp_padre.ni_ord_comp_doc ni_ord_comp_padre,

-- info componente calcolate 
 comp_doc.fl_no_calc_fmt_verif_firme, comp_doc.fl_no_calc_hash_file,
 comp_doc.ds_urn_comp_calc, 
 fmt_file_calc.nm_formato_file_standard nm_formato_calc, 
 comp_doc.ni_size_file_calc, 
 comp_doc.ds_hash_file_calc, comp_doc.ds_algo_hash_file_calc, comp_doc.cd_encoding_hash_file_calc, 
 comp_hash.ds_hash_file, comp_hash.ds_algo_hash_file, comp_hash.cd_encoding_hash_file,
 comp_doc.ti_esito_contr_formato_file, 
 comp_doc.ds_msg_esito_contr_formato,
 comp_doc.ds_formato_rappr_calc,
 comp_doc.ds_formato_rappr_esteso_calc,
 case
	when comp_doc.ds_formato_rappr_calc = fmt_file_vers.nm_formato_file_doc
		then fmt_file_vers.ds_formato_file_doc
		else null
 end ds_formato_rappr_file_doc,
 comp_doc.fl_comp_firmato, comp_doc.ti_esito_verif_firme, comp_doc.ds_msg_esito_verif_firme,
 fmt_file_calc.nm_mimetype_file,
 (select ds_urn from ARO_COMP_URN_CALC where id_comp_doc = comp_doc.id_comp_doc and ti_urn = 'ORIGINALE') ds_urn_originale,  
 (select ds_urn from ARO_COMP_URN_CALC where id_comp_doc = comp_doc.id_comp_doc and ti_urn = 'NORMALIZZATO') ds_urn_normalizzato, 
 
-- info volume valido 
 case
	when doc.ti_stato_doc is not null
		then (select app_ud.id_volume_conserv
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  )
 end id_volume_conserv,
 case
	when doc.ti_stato_doc is not null
		then (select vol.nm_volume_conserv
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud, VOL_VOLUME_CONSERV vol
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  and vol.id_volume_conserv = app_ud.id_volume_conserv
			  )
 end nm_volume_conserv,
 case
	when doc.ti_stato_doc is not null
		then (select vol.ti_stato_volume_conserv
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud, VOL_VOLUME_CONSERV vol
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  and vol.id_volume_conserv = app_ud.id_volume_conserv
			  )
 end ti_stato_volume_conserv,
 case
	when doc.ti_stato_doc is not null
		then (select vol.dt_chius
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud, VOL_VOLUME_CONSERV vol
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  and vol.id_volume_conserv = app_ud.id_volume_conserv
			  )
 end dt_chius_volume,
 
-- info verifica firme a chiusura volume valido
 case
	when doc.ti_stato_doc is not null
		then (select app_comp.ti_esito_verif_firme_chius
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_COMP_VOLUME app_comp
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_comp.id_appart_doc_volume = app_doc.id_appart_doc_volume
			  and app_comp.id_comp_doc = comp_doc.id_comp_doc
			  )
 end ti_esito_verif_firme_chius,
 case
	when doc.ti_stato_doc is not null
		then (select app_comp.ds_esito_verif_firme_chius
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_COMP_VOLUME app_comp
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_comp.id_appart_doc_volume = app_doc.id_appart_doc_volume
			  and app_comp.id_comp_doc = comp_doc.id_comp_doc
			  )
 end ds_esito_verif_firme_chius,

 
-- info elenco versamento
 case
	when ud.id_elenco_vers is not null then ud.id_elenco_vers
	when doc.id_elenco_vers is not null then doc.id_elenco_vers
	else null
 end id_elenco_vers,
 case
	when ud.id_elenco_vers is not null then (select nm_elenco from ELV_ELENCO_VERS where id_elenco_vers = ud.id_elenco_vers)
	when doc.id_elenco_vers is not null then (select nm_elenco from ELV_ELENCO_VERS where id_elenco_vers = doc.id_elenco_vers)
	else null
 end nm_elenco_vers,
 case
	when ud.id_elenco_vers is not null then (select ti_stato_elenco from ELV_ELENCO_VERS where id_elenco_vers = ud.id_elenco_vers)
	when doc.id_elenco_vers is not null then (select ti_stato_elenco from ELV_ELENCO_VERS where id_elenco_vers = doc.id_elenco_vers)
	else null
 end ti_stato_elenco_vers,
 case
	when ud.id_elenco_vers is not null then (select dt_chius from ELV_ELENCO_VERS where id_elenco_vers = ud.id_elenco_vers)
	when doc.id_elenco_vers is not null then (select dt_chius from ELV_ELENCO_VERS where id_elenco_vers = doc.id_elenco_vers)
	else null
 end dt_chius_elenco_vers,

-- info su verifica firme a data versamento
 comp_doc.ti_esito_verif_firme_dt_vers, comp_doc.ds_esito_verif_firme_dt_vers,
 
-- info ud riferita
 ud_rif.cd_registro_key_unita_doc, ud_rif.aa_key_unita_doc, ud_rif.cd_key_unita_doc,

-- info archiviazione
case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						case
							when obj_sto.nm_tenant is null
								then 'DATABASE'
								else backend.nm_tipo_backend || ' (' || backend.nm_backend || ')'
						end
					else 'NASTRO'
			end
		else 'METADATI'
end tipo_archiviazione,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						case
							when obj_sto.nm_tenant is null
								then (select subpart.cd_sub_partition
									  from ORG_PARTITION_STRUT part_strut
									  join ORG_PARTITION part
										on (part.id_partition = part_strut.id_partition)
									  join ORG_SUB_PARTITION subpart
										on (subpart.id_partition = part.id_partition)
									  join ORG_VAL_SUB_PARTITION val_subpart
										on (val_subpart.id_sub_partition = subpart.id_sub_partition
										and val_subpart.cd_val_sub_partition = to_char (doc.dt_creazione, 'yyyymm'))
									  where part_strut.id_strut = ud.id_strut
									  and part_strut.ti_partition = 'BLOB'
									  )
								else null
						end
					else null
			end
		else null
end cd_sub_partition,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						case
							when obj_sto.nm_tenant is null
								then comp_doc.id_comp_doc
								else null
						end
					else null
			end
		else null
end id_file_oracle,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						case
							when obj_sto.nm_tenant is null
								then null
								else obj_sto.nm_tenant
						end
					else null
			end
		else null
end nm_tenant,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						case
							when obj_sto.nm_tenant is null
								then null
								else obj_sto.nm_bucket
						end
					else null
			end
		else null
end nm_bucket,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						case
							when obj_sto.nm_tenant is null
								then null
								else obj_sto.cd_key_file
						end
					else null
			end
		else null
end cd_key_file,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						null
					else comp_doc.ds_nome_file_ark
			end
		else null
end ds_nome_file_ark
,

case
	when comp_doc.ti_supporto_comp = 'FILE'
		then 
			case
				when tipo_ud.ti_save_file = 'BLOB'
					then 
						null
					else (select data_vers.ti_stato_dt_vers
						  from VRS_DT_VERS data_vers
						  where data_vers.dt_vers = trunc (doc.dt_creazione)
						 )
		end
		else null
end ti_stato_dt_vers,
servizio_verif.ds_servizio_verifica_comp_doc

from ARO_COMP_DOC comp_doc

left join  dec_servizio_verifica_comp_doc servizio_verif
 on (servizio_verif.id_servizio_verifica_comp_doc = comp_doc.id_servizio_verifica_comp_doc)
join ARO_STRUT_DOC strut_doc
 on (strut_doc.id_strut_doc = comp_doc.id_strut_doc)
join ARO_DOC doc
 on (doc.id_doc = strut_doc.id_doc)
join DEC_TIPO_DOC tipo_doc
 on (tipo_doc.id_tipo_doc = doc.id_tipo_doc)

join ARO_UNITA_DOC ud
 on (ud.id_unita_doc = doc.id_unita_doc)
join DEC_TIPO_UNITA_DOC tipo_ud
 on (tipo_ud.id_tipo_unita_doc = ud.id_tipo_unita_doc)

join ORG_STRUT strut
 on (strut.id_strut = ud.id_strut)
join ORG_ENTE ente
 on (ente.id_ente = strut.id_ente)
join ORG_AMBIENTE amb
 on (amb.id_ambiente = ente.id_ambiente)

join DEC_TIPO_STRUT_DOC tipo_strut_doc
 on (tipo_strut_doc.id_tipo_strut_doc = strut_doc.id_tipo_strut_doc)
join DEC_TIPO_COMP_DOC tipo_comp
 on (tipo_comp.id_tipo_comp_doc = comp_doc.id_tipo_comp_doc)
left join DEC_FORMATO_FILE_DOC fmt_file_vers
 on (fmt_file_vers.id_formato_file_doc = comp_doc.id_formato_file_vers)
left join DEC_FORMATO_FILE_STANDARD fmt_file_calc
 on (fmt_file_calc.id_formato_file_standard = comp_doc.id_formato_file_calc)

left join DEC_TIPO_RAPPR_COMP tipo_rappr
 on(tipo_rappr.id_tipo_rappr_comp = comp_doc.id_tipo_rappr_comp)

left join ARO_COMP_DOC comp_padre
 on (comp_padre.id_comp_doc = comp_doc.id_comp_doc_padre)
 
left join ARO_UNITA_DOC ud_rif
 on (ud_rif.id_unita_doc = comp_doc.id_unita_doc_rif)
 
left join ARO_COMP_OBJECT_STORAGE obj_sto
on (obj_sto.id_comp_doc = comp_doc.id_comp_doc)

left join DEC_BACKEND backend
on (backend.ID_DEC_BACKEND = obj_sto.ID_DEC_BACKEND)

left join ARO_COMP_HASH_CALC comp_hash
on (comp_hash.id_comp_doc = comp_doc.id_comp_doc
and comp_hash.ds_algo_hash_file = 'SHA-256');

-- changeset root:1751554768189-252
CREATE OR REPLACE FORCE VIEW ARO_V_VIS_DOC_IAM (NM_AMBIENTE, NM_ENTE, NM_STRUT, ID_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, ID_TIPO_UNITA_DOC, NM_TIPO_UNITA_DOC, DL_OGGETTO_UNITA_DOC, DT_REG_UNITA_DOC, DT_ANNUL_UNITA_DOC, TI_ANNUL_UNITA_DOC, DT_CREAZIONE_UD, NT_ANNUL_UNITA_DOC, TI_STATO_CONSERVAZIONE, CD_KEY_UNITA_DOC_NORMALIZ, ID_DOC, TI_DOC, PG_DOC, NM_TIPO_DOC, DL_DOC, DS_AUTORE_DOC, CD_KEY_DOC_VERS, DT_CREAZIONE, FL_DOC_FIRMATO, TI_ESITO_VERIF_FIRME, DS_MSG_ESITO_VERIF_FIRME, TI_STATO_DOC, FL_FORZA_ACCETTAZIONE, FL_FORZA_CONSERVAZIONE, TI_CONSERVAZIONE, NM_SISTEMA_MIGRAZ, DT_ANNUL_DOC, TI_ANNUL_DOC, NT_ANNUL_DOC, NT_DOC, NI_ORD_DOC, ID_STRUT_DOC, NM_TIPO_STRUT_DOC, ID_VOLUME_CONSERV, NM_VOLUME_CONSERV, TI_STATO_VOLUME_CONSERV, ID_ELENCO_VERS, NM_ELENCO_VERS, TI_STATO_ELENCO_VERS, CD_VERSIONE_XML, UTENTE_VERS, BL_XML_RICH_DOC, DS_HASH_XML_RICH_DOC, DS_ALGO_HASH_XML_RICH_DOC, CD_ENCODING_HASH_XML_RICH_DOC, DS_URN_XML_RICH_DOC, DS_URN_XML_RICH_DOC_NORMALIZ, DS_URN_XML_RICH_DOC_INIZIALE, BL_XML_RISP_DOC, DS_HASH_XML_RISP_DOC, DS_ALGO_HASH_XML_RISP_DOC, CD_ENCODING_HASH_XML_RISP_DOC, DS_URN_XML_RISP_DOC, DS_URN_XML_RISP_DOC_NORMALIZ, DS_URN_XML_RISP_DOC_INIZIALE, BL_XML_RAPP_DOC, DS_HASH_XML_RAPP_DOC, DS_ALGO_HASH_XML_RAPP_DOC, CD_ENCODING_HASH_XML_RAPP_DOC, DS_URN_XML_RAPP_DOC, DS_URN_XML_RAPP_DOC_NORMALIZ, DS_URN_XML_RAPP_DOC_INIZIALE, UTENTE, ID_SESSIONE_VERS) AS select
 amb.nm_ambiente,
 ente.nm_ente,
 strut.nm_strut,

-- info unità documentaria
  ud.id_unita_doc, 
  ud.cd_registro_key_unita_doc, ud.aa_key_unita_doc, ud.cd_key_unita_doc,
  tipo_ud.id_tipo_unita_doc, tipo_ud.nm_tipo_unita_doc,
  ud.dl_oggetto_unita_doc,
  ud.dt_reg_unita_doc,
  ud.dt_annul dt_annul_unita_doc,
  ud.ti_annul ti_annul_unita_doc,
  ud.dt_creazione dt_creazione_ud,
  ud.nt_annul nt_annul_unita_doc,
  ud.ti_stato_conservazione,
  ud.cd_key_unita_doc_normaliz,
 
-- info documento 
 doc.id_doc,
 doc.ti_doc,
 doc.pg_doc,
 tipo_doc.nm_tipo_doc,
 doc.dl_doc, doc.ds_autore_doc, 
 doc.cd_key_doc_vers,
 doc.dt_creazione,
 doc.fl_doc_firmato, doc.ti_esito_verif_firme, doc.ds_msg_esito_verif_firme,
 doc.ti_stato_doc, 
 doc.fl_forza_accettazione,
 doc.fl_forza_conservazione,
 doc.ti_conservazione,
 doc.nm_sistema_migraz,
 doc.dt_annul dt_annul_doc,
 doc.ti_annul ti_annul_doc,
 doc.nt_annul nt_annul_doc,
 doc.nt_doc,
 doc.ni_ord_doc,
 
-- info su struttura originale del documento
 strut_doc.id_strut_doc,
 tipo_strut.nm_tipo_strut_doc,
 
-- info volume valido 
 case
	when doc.ti_stato_doc is not null
		then (select app_ud.id_volume_conserv
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  )
 end id_volume_conserv,
 case
	when doc.ti_stato_doc is not null
		then (select vol.nm_volume_conserv
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud, VOL_VOLUME_CONSERV vol
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  and vol.id_volume_conserv = app_ud.id_volume_conserv
			  )
 end nm_volume_conserv,
 case
	when doc.ti_stato_doc is not null
		then (select vol.ti_stato_volume_conserv
			  from VOL_APPART_DOC_VOLUME app_doc, VOL_APPART_UNITA_DOC_VOLUME app_ud, VOL_VOLUME_CONSERV vol
			  where app_doc.id_doc = doc.id_doc
			  and app_doc.fl_valida = '1'
			  and app_ud.id_appart_unita_doc_volume = app_doc.id_appart_unita_doc_volume
			  and vol.id_volume_conserv = app_ud.id_volume_conserv
			  )
 end ti_stato_volume_conserv,

 
-- info elenco versamento
 case
	when doc.id_elenco_vers is not null then doc.id_elenco_vers
	when ud.id_elenco_vers is not null then ud.id_elenco_vers
	else null
 end id_elenco_vers,
 case
	when doc.id_elenco_vers is not null then (select nm_elenco from ELV_ELENCO_VERS where id_elenco_vers = doc.id_elenco_vers)
	when ud.id_elenco_vers is not null then (select nm_elenco from ELV_ELENCO_VERS where id_elenco_vers = ud.id_elenco_vers)
	else null
 end nm_elenco_vers,
  
 case
	when doc.id_elenco_vers is not null then doc.ti_stato_doc_elenco_vers
	when ud.id_elenco_vers is not null then  ud.ti_stato_ud_elenco_vers
	else null
 end ti_stato_elenco_vers,
  
-- info sessione
 case
	when doc.ti_creazione = 'VERSAMENTO_UNITA_DOC'
		then (select ses.cd_versione_ws 
			  from VRS_SESSIONE_VERS ses
			  where ses.id_unita_doc = ud.id_unita_doc
			  and ses.ti_sessione_vers = 'VERSAMENTO'
			  and ses.ti_stato_sessione_vers = 'CHIUSA_OK')
		else (select ses.cd_versione_ws 
			  from VRS_SESSIONE_VERS ses
			  where ses.id_doc = doc.id_doc
			  and ses.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO'
			  and ses.ti_stato_sessione_vers = 'CHIUSA_OK')
 end cd_versione_xml,
 
 case
	when doc.ti_creazione = 'VERSAMENTO_UNITA_DOC'
		then (select usr.nm_userid
			  from IAM_USER usr
			  where usr.id_user_iam = ud.id_user_vers)
		else (select usr.nm_userid
			  from VRS_SESSIONE_VERS ses, IAM_USER usr
			  where ses.id_doc = doc.id_doc
			  and ses.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO'
			  and ses.ti_stato_sessione_vers = 'CHIUSA_OK'
			  and usr.id_user_iam = ses.id_user)
 end utente_vers,

 xml_rich.bl_xml bl_xml_rich_doc,
 xml_rich.ds_hash_xml_vers ds_hash_xml_rich_doc,
 xml_rich.ds_algo_hash_xml_vers ds_algo_hash_xml_rich_doc,
 xml_rich.cd_encoding_hash_xml_vers cd_encoding_hash_xml_rich_doc,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
				 where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
			  where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
			  and urn_xml_rich.ti_urn = 'ORIGINALE'
			  )
		else xml_rich.ds_urn_xml_vers 
 end ds_urn_xml_rich_doc,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
			  where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
			  and urn_xml_rich.ti_urn = 'NORMALIZZATO'
			  )ds_urn_xml_rich_doc_normaliz,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
			  where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
			  and urn_xml_rich.ti_urn = 'INIZIALE'
			  ) ds_urn_xml_rich_doc_iniziale,

 xml_risp.bl_xml bl_xml_risp_doc,
 xml_risp.ds_hash_xml_vers ds_hash_xml_risp_doc,
 xml_risp.ds_algo_hash_xml_vers ds_algo_hash_xml_risp_doc,
 xml_risp.cd_encoding_hash_xml_vers cd_encoding_hash_xml_risp_doc,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
				 where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
			  where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
			  and urn_xml_risp.ti_urn = 'ORIGINALE'
			  )
		else xml_risp.ds_urn_xml_vers 
 end ds_urn_xml_risp_doc,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
			  where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
			  and urn_xml_risp.ti_urn = 'NORMALIZZATO'
			  )ds_urn_xml_risp_doc_normaliz,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
			  where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
			  and urn_xml_risp.ti_urn = 'INIZIALE'
			  ) ds_urn_xml_risp_doc_iniziale,

 xml_rapp.bl_xml bl_xml_rapp_doc,
 xml_rapp.ds_hash_xml_vers ds_hash_xml_rapp_doc,
 xml_rapp.ds_algo_hash_xml_vers ds_algo_hash_xml_rapp_doc,
 xml_rapp.cd_encoding_hash_xml_vers cd_encoding_hash_xml_rapp_doc,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
				 where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
			  where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
			  and urn_xml_rapp.ti_urn = 'ORIGINALE'
			  )
		else xml_rapp.ds_urn_xml_vers 
 end ds_urn_xml_rapp_doc,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
			  where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
			  and urn_xml_rapp.ti_urn = 'NORMALIZZATO'
			  ) ds_urn_xml_rapp_doc_normaliz,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
			  where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
			  and urn_xml_rapp.ti_urn = 'INIZIALE'
			  ) ds_urn_xml_rapp_doc_iniziale,
 case
	when doc.ti_creazione = 'VERSAMENTO_UNITA_DOC'
		then (select ses.nm_utente
			  from VRS_SESSIONE_VERS ses
			  where ses.id_unita_doc = ud.id_unita_doc
		      and ses.ti_sessione_vers = 'VERSAMENTO'
			  and ses.ti_stato_sessione_vers = 'CHIUSA_OK')
		else (select ses.nm_utente
			  from VRS_SESSIONE_VERS ses, IAM_USER usr
			  where ses.id_doc = doc.id_doc
			  and ses.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO'
			  and ses.ti_stato_sessione_vers = 'CHIUSA_OK'
			  and usr.id_user_iam = ses.id_user)
 end utente,
 ses.id_sessione_vers
 
from ARO_DOC doc
join DEC_TIPO_DOC tipo_doc
 on (tipo_doc.id_tipo_doc = doc.id_tipo_doc)

join ARO_UNITA_DOC ud
 on (ud.id_unita_doc = doc.id_unita_doc)
join ORG_STRUT strut
 on (strut.id_strut = ud.id_strut)
join ORG_ENTE ente
 on (ente.id_ente = strut.id_ente)
join ORG_AMBIENTE amb
 on (amb.id_ambiente = ente.id_ambiente)
join DEC_TIPO_UNITA_DOC tipo_ud
 on (tipo_ud.id_tipo_unita_doc = ud.id_tipo_unita_doc)

join ARO_STRUT_DOC strut_doc
 on (strut_doc.id_doc = doc.id_doc
 and strut_doc.fl_strut_orig = '1')
join DEC_TIPO_STRUT_DOC tipo_strut
 on (tipo_strut.id_tipo_strut_doc = strut_doc.id_tipo_strut_doc)
 
left join VRS_SESSIONE_VERS ses
 on (ses.id_doc = doc.id_doc
 and ses.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO'
 and ses.ti_stato_sessione_vers = 'CHIUSA_OK')
left join VRS_DATI_SESSIONE_VERS dati_ses
 on (dati_ses.id_sessione_vers = ses.id_sessione_vers)
 
left join VRS_XML_DATI_SESSIONE_VERS xml_rich
 on (xml_rich.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_rich.ti_xml_dati = 'RICHIESTA')
 
left join VRS_XML_DATI_SESSIONE_VERS xml_risp
 on (xml_risp.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_risp.ti_xml_dati = 'RISPOSTA')
 
left join VRS_XML_DATI_SESSIONE_VERS xml_rapp
 on (xml_rapp.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_rapp.ti_xml_dati = 'RAPP_VERS');

-- changeset root:1751554768189-253
CREATE OR REPLACE FORCE VIEW ARO_V_VIS_UNITA_DOC_IAM (NM_AMBIENTE, NM_ENTE, NM_STRUT, ID_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, ID_TIPO_UNITA_DOC, NM_TIPO_UNITA_DOC, DL_OGGETTO_UNITA_DOC, DT_REG_UNITA_DOC, DS_UFF_COMP_UNITA_DOC, FL_CARTACEO, DS_CLASSIF_PRINC, CD_FASCIC_PRINC, DS_OGGETTO_FASCIC_PRINC, CD_SOTTOFASCIC_PRINC, DS_OGGETTO_SOTTOFASCIC_PRINC, NI_ALLEG, NI_ANNESSI, NI_ANNOT, FL_FORZA_ACCETTAZIONE, FL_FORZA_CONSERVAZIONE, FL_FORZA_COLLEGAMENTO, TI_CONSERVAZIONE, UTENTE_VERS, DT_CREAZIONE, FL_UNITA_DOC_FIRMATO, TI_ESITO_VERIF_FIRME_UD, DS_MSG_ESITO_VERIF_FIRME_UD, NM_SISTEMA_MIGRAZ, CD_VERSIONE_XML, BL_XML_RICH_UD, DS_HASH_XML_RICH_UD, DS_ALGO_HASH_XML_RICH_UD, CD_ENCODING_HASH_XML_RICH_UD, DS_URN_XML_RICH_UD, DS_URN_XML_RICH_UD_NORMALIZ, DS_URN_XML_RICH_UD_INIZIALE, BL_XML_INDEX_UD, DS_HASH_XML_INDEX_UD, DS_ALGO_HASH_XML_INDEX_UD, CD_ENCODING_HASH_XML_INDEX_UD, DS_URN_XML_INDEX_UD, DS_URN_XML_INDEX_UD_NORMALIZ, DS_URN_XML_INDEX_UD_INIZIALE, BL_XML_RISP_UD, DS_HASH_XML_RISP_UD, DS_ALGO_HASH_XML_RISP_UD, CD_ENCODING_HASH_XML_RISP_UD, DS_URN_XML_RISP_UD, DS_URN_XML_RISP_UD_NORMALIZ, DS_URN_XML_RISP_UD_INIZIALE, BL_XML_RAPP_UD, DS_HASH_XML_RAPP_UD, DS_ALGO_HASH_XML_RAPP_UD, CD_ENCODING_HASH_XML_RAPP_UD, DS_URN_XML_RAPP_UD, DS_URN_XML_RAPP_UD_NORMALIZ, DS_URN_XML_RAPP_UD_INIZIALE, NT_UNITA_DOC, ID_DOC, CD_KEY_DOC_VERS, NM_TIPO_DOC, DL_DOC, DS_AUTORE_DOC, FL_DOC_FIRMATO, TI_ESITO_VERIF_FIRME_DOC, DT_ANNUL, TI_ANNUL, NT_ANNUL, TI_STATO_CONSERVAZIONE, FL_HASH_VERSATO, CD_KEY_UNITA_DOC_NORMALIZ, CD_IND_IP_CLIENT, NM_SISTEMA_VERSANTE, UTENTE, ID_SESSIONE_VERS) AS select
-- info organizzazione
 amb.nm_ambiente,
 ente.nm_ente,
 strut.nm_strut,
-- info versate unità documentaria
 ud.id_unita_doc, 
 ud.cd_registro_key_unita_doc, ud.aa_key_unita_doc, ud.cd_key_unita_doc, 
 tipo_unita.id_tipo_unita_doc, tipo_unita.nm_tipo_unita_doc, 
 ud.dl_oggetto_unita_doc, ud.dt_reg_unita_doc, ud.ds_uff_comp_unita_doc,
 ud.fl_cartaceo, 
 ud.ds_classif_princ, ud.cd_fascic_princ, ud.ds_oggetto_fascic_princ, ud.cd_sottofascic_princ, ud.ds_oggetto_sottofascic_princ, 
 ud.ni_alleg, ud.ni_annessi, ud.ni_annot,
 
-- info versamento unità documentaria
 ud.fl_forza_accettazione, ud.fl_forza_conservazione, ud.fl_forza_collegamento, ud.ti_conservazione,
 usr.nm_userid utente_vers,
 ud.dt_creazione, 
 ud.fl_unita_doc_firmato, ud.ti_esito_verif_firme ti_esito_verif_firme_ud, ud.ds_msg_esito_verif_firme ds_msg_esito_verif_firme_ud,
 ud.nm_sistema_migraz,

-- info sessione versamento 
 ses.cd_versione_ws cd_versione_xml,
 
 xml_rich.bl_xml bl_xml_rich_ud,
 xml_rich.ds_hash_xml_vers ds_hash_xml_rich_ud,
 xml_rich.ds_algo_hash_xml_vers ds_algo_hash_xml_rich_ud,
 xml_rich.cd_encoding_hash_xml_vers cd_encoding_hash_xml_rich_ud,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
				 where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
			  where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
			  and urn_xml_rich.ti_urn = 'ORIGINALE'
			  )
		else xml_rich.ds_urn_xml_vers
 end ds_urn_xml_rich_ud,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
			  where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
			  and urn_xml_rich.ti_urn = 'NORMALIZZATO'
			  )ds_urn_xml_rich_ud_normaliz,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rich
			  where urn_xml_rich.id_xml_dati_sessione_vers = xml_rich.id_xml_dati_sessione_vers
			  and urn_xml_rich.ti_urn = 'INIZIALE'
			  ) ds_urn_xml_rich_ud_iniziale,
 xml_index.bl_xml bl_xml_index_ud,
 xml_index.ds_hash_xml_vers ds_hash_xml_index_ud,
 xml_index.ds_algo_hash_xml_vers ds_algo_hash_xml_index_ud,
 xml_index.cd_encoding_hash_xml_vers cd_encoding_hash_xml_index_ud,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_index
				 where urn_xml_index.id_xml_dati_sessione_vers = xml_index.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_index
			  where urn_xml_index.id_xml_dati_sessione_vers = xml_index.id_xml_dati_sessione_vers
			  and urn_xml_index.ti_urn = 'ORIGINALE'
			  )
		else xml_index.ds_urn_xml_vers
 end ds_urn_xml_index_ud,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_index
			  where urn_xml_index.id_xml_dati_sessione_vers = xml_index.id_xml_dati_sessione_vers
			  and urn_xml_index.ti_urn = 'NORMALIZZATO'
			  )ds_urn_xml_index_ud_normaliz,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_index
			  where urn_xml_index.id_xml_dati_sessione_vers = xml_index.id_xml_dati_sessione_vers
			  and urn_xml_index.ti_urn = 'INIZIALE'
			  ) ds_urn_xml_index_ud_iniziale,

 xml_risp.bl_xml bl_xml_risp_ud,
 xml_risp.ds_hash_xml_vers ds_hash_xml_risp_ud,
 xml_risp.ds_algo_hash_xml_vers ds_algo_hash_xml_risp_ud,
 xml_risp.cd_encoding_hash_xml_vers cd_encoding_hash_xml_risp_ud,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
				 where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
			  where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
			  and urn_xml_risp.ti_urn = 'ORIGINALE'
			  )
		else xml_risp.ds_urn_xml_vers
 end ds_urn_xml_risp_ud,
  (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
			  where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
			  and urn_xml_risp.ti_urn = 'NORMALIZZATO'
			  ) ds_urn_xml_risp_ud_normaliz,
  (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_risp
			  where urn_xml_risp.id_xml_dati_sessione_vers = xml_risp.id_xml_dati_sessione_vers
			  and urn_xml_risp.ti_urn = 'INIZIALE'
			  )ds_urn_xml_risp_ud_iniziale,
 xml_rapp.bl_xml bl_xml_rapp_ud,
 xml_rapp.ds_hash_xml_vers ds_hash_xml_rapp_ud,
 xml_rapp.ds_algo_hash_xml_vers ds_algo_hash_xml_rapp_ud,
 xml_rapp.cd_encoding_hash_xml_vers cd_encoding_hash_xml_rapp_ud,
 case
	when exists (select *
				 from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
				 where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
				 )
		then (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
			  where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
			  and urn_xml_rapp.ti_urn = 'ORIGINALE'
			  )
		else xml_rapp.ds_urn_xml_vers
 end ds_urn_xml_rapp_ud,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
			  where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
			  and urn_xml_rapp.ti_urn = 'NORMALIZZATO'
			  ) ds_urn_xml_rapp_ud_normaliz,
 (select ds_urn
			  from VRS_URN_XML_SESSIONE_VERS urn_xml_rapp
			  where urn_xml_rapp.id_xml_dati_sessione_vers = xml_rapp.id_xml_dati_sessione_vers
			  and urn_xml_rapp.ti_urn = 'INIZIALE'
			  ) ds_urn_xml_rapp_ud_iniziale,
 ud.nt_unita_doc,
 
-- info documento principale
 doc.id_doc,
 doc.cd_key_doc_vers,
 tipo_doc.nm_tipo_doc,
 doc.dl_doc, doc.ds_autore_doc, 
 doc.fl_doc_firmato, doc.ti_esito_verif_firme ti_esito_verif_firme_doc,
  
 ud.dt_annul,
 ud.ti_annul,
 ud.nt_annul,
 ud.ti_stato_conservazione,
 
 case
	when exists (select *
				 from ARO_STRUT_DOC strut_doc
				 join ARO_COMP_DOC comp
				  on (comp.id_strut_doc = strut_doc.id_strut_doc
				  and comp.ds_hash_file_vers is not null)
				 where strut_doc.id_doc = doc.id_doc
				)
		then '1'
		else '0'
 end fl_hash_versato,
 ud.cd_key_unita_doc_normaliz,
 ses.cd_ind_ip_client,
 apl_sisvers.nm_sistema_versante,
 ses.nm_utente,
 ses.id_sessione_vers
 
from ARO_UNITA_DOC ud
join ORG_STRUT strut
 on (strut.id_strut = ud.id_strut)
join ORG_ENTE ente
 on (ente.id_ente = strut.id_ente)
join ORG_AMBIENTE amb
 on (amb.id_ambiente = ente.id_ambiente)
join DEC_TIPO_UNITA_DOC tipo_unita
 on (tipo_unita.id_tipo_unita_doc = ud.id_tipo_unita_doc)
join IAM_USER usr
 on (usr.id_user_iam = ud.id_user_vers)
join SACER_IAM.usr_user usr_user
 on (usr_user.id_user_iam = usr.id_user_iam)
left join SACER_IAM.apl_sistema_versante apl_sisvers
 on (apl_sisvers.id_sistema_versante = usr_user.id_sistema_versante)

join VRS_SESSIONE_VERS ses
 on (ses.id_unita_doc = ud.id_unita_doc
 and ses.ti_sessione_vers = 'VERSAMENTO'
 and ses.ti_stato_sessione_vers = 'CHIUSA_OK')
join VRS_DATI_SESSIONE_VERS dati_ses
 on (dati_ses.id_sessione_vers = ses.id_sessione_vers
 and dati_ses.pg_dati_sessione_vers = 1)
 
join VRS_XML_DATI_SESSIONE_VERS xml_rich
 on (xml_rich.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_rich.ti_xml_dati = 'RICHIESTA')
 
left join VRS_XML_DATI_SESSIONE_VERS xml_index
 on (xml_index.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_index.ti_xml_dati = 'INDICE_FILE')
 
join VRS_XML_DATI_SESSIONE_VERS xml_risp
 on (xml_risp.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_risp.ti_xml_dati = 'RISPOSTA')
 
left join VRS_XML_DATI_SESSIONE_VERS xml_rapp
 on (xml_rapp.id_dati_sessione_vers = dati_ses.id_dati_sessione_vers
 and xml_rapp.ti_xml_dati = 'RAPP_VERS')
 
join ARO_DOC doc
 on (doc.id_unita_doc = ud.id_unita_doc
 and doc.ti_doc = 'PRINCIPALE')
join DEC_TIPO_DOC tipo_doc
 on (tipo_doc.id_tipo_doc = doc.id_tipo_doc);

-- changeset root:1751554768189-254
CREATE OR REPLACE FORCE VIEW ARO_V_VIS_UPD_UNITA_DOC (ID_UPD_UNITA_DOC, NM_AMBIENTE, NM_ENTE, NM_STRUT, ID_STRUT, ID_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, ID_REGISTRO_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, ID_TIPO_UNITA_DOC, NM_TIPO_UNITA_DOC, ID_TIPO_DOC_PRINC, NM_TIPO_DOC_PRINC, PG_UPD_UNITA_DOC, DS_URN_UPD_UNITA_DOC, FL_UPD_PROFILO_ARCHIV, FL_UPD_FASCICOLO_PRINC, FL_UPD_FASCICOLI_SEC, FL_UPD_PROFILO_UNITA_DOC, FL_UPD_LINK_UNITA_DOC, FL_UPD_DATI_SPEC, FL_UPD_DATI_SPEC_MIGRAZ, FL_UPD_PROFILO_NORMATIVO, CD_VERSIONE_XML, NM_USERID, TS_INI_SES, FL_FORZA_UPD, NT_UPD, TIPO_UPD_UNITA_DOC, TI_STATO_UPD_ELENCO_VERS, ID_ELENCO_VERS, TI_STATO_CONSERVAZIONE, BL_XML_RICH, DS_HASH_XML_RICH, DS_ALGO_HASH_XML_RICH, CD_ENCODING_HASH_XML_RICH, DS_URN_XML_RICH, DS_URN_NORMALIZ_XML_RICH, BL_XML_RISP, DS_HASH_XML_RISP, DS_ALGO_HASH_XML_RISP, CD_ENCODING_HASH_XML_RISP, DS_URN_XML_RISP, DS_URN_NORMALIZ_XML_RISP) AS select
 upd_ud.id_upd_unita_doc,
 amb.nm_ambiente, ente.nm_ente, strut.nm_strut, upd_ud.id_strut,
 upd_ud.id_unita_doc, ud.cd_registro_key_unita_doc, upd_ud.id_registro_unita_doc, ud.aa_key_unita_doc, ud.cd_key_unita_doc,
 upd_ud.id_tipo_unita_doc, tipo_ud.nm_tipo_unita_doc,
 upd_ud.id_tipo_doc_princ, tipo_doc_princ.nm_tipo_doc nm_tipo_doc_princ,
 
 upd_ud.pg_upd_unita_doc, 
 'urn:' || 
 (select ds_valore_param_applic
  from APL_V_GETVAL_PARAM_BY_APL
  where nm_param_applic = 'SISTEMA_CONSERVAZIONE') || ':' ||
 ente.nm_ente || ':' || strut.nm_strut || ':' ||
 ud.cd_registro_key_unita_doc || '-' || ud.aa_key_unita_doc || '-' || ud.cd_key_unita_doc || ':' ||
 'AGG_MD' || lpad(upd_ud.pg_upd_unita_doc, 5, '0') ds_urn_upd_unita_doc,
 
 upd_ud.fl_upd_profilo_archiv, upd_ud.fl_upd_fascicolo_princ, upd_ud.fl_upd_fascicoli_sec, upd_ud.fl_upd_profilo_unita_doc,
 upd_ud.fl_upd_link_unita_doc, upd_ud.fl_upd_dati_spec, upd_ud.fl_upd_dati_spec_migraz,
 upd_ud.FL_UPD_PROFILO_NORMATIVO,
  xml_rich.cd_versione_xml, usr.nm_userid, upd_ud.ts_ini_ses, upd_ud.fl_forza_upd, upd_ud.nt_upd, upd_ud.tipo_upd_unita_doc, 
 upd_ud.ti_stato_upd_elenco_vers, upd_ud.id_elenco_vers, ud.ti_stato_conservazione,
 
 xml_rich.bl_xml bl_xml_rich, xml_rich.ds_hash_xml ds_hash_xml_rich, xml_rich.ds_algo_hash_xml ds_algo_hash_xml_rich,  xml_rich.cd_encoding_hash_xml cd_encoding_hash_xml_rich,
 xml_rich.ds_urn_xml ds_urn_xml_rich, xml_rich.ds_urn_normaliz_xml ds_urn_normaliz_xml_rich,
 xml_risp.bl_xml bl_xml_risp, xml_risp.ds_hash_xml ds_hash_xml_risp, xml_risp.ds_algo_hash_xml ds_algo_hash_xml_risp,  xml_risp.cd_encoding_hash_xml cd_encoding_hash_xml_risp,
 xml_risp.ds_urn_xml ds_urn_xml_risp, xml_risp.ds_urn_normaliz_xml ds_urn_normaliz_xml_risp
 
from ARO_UPD_UNITA_DOC upd_ud
join ORG_STRUT strut
	on (strut.id_strut = upd_ud.id_strut)
join ORG_ENTE ente
	on (ente.id_ente = strut.id_ente)
join ORG_AMBIENTE amb
	on (amb.id_ambiente = ente.id_ambiente)

join ARO_UNITA_DOC ud
	on (ud.id_unita_doc = upd_ud.id_unita_doc)
join DEC_TIPO_UNITA_DOC tipo_ud
	on (tipo_ud.id_tipo_unita_doc = upd_ud.id_tipo_unita_doc)
join DEC_TIPO_DOC tipo_doc_princ
		on (tipo_doc_princ.id_tipo_doc= upd_ud.id_tipo_doc_princ)
		
join IAM_USER usr
	on (usr.id_user_iam = upd_ud.id_user_iam_vers)
	
join ARO_XML_UPD_UNITA_DOC xml_rich
	on (xml_rich.id_upd_unita_doc  = upd_ud.id_upd_unita_doc 
	and xml_rich.ti_xml_upd_unita_doc = 'RICHIESTA')
join ARO_XML_UPD_UNITA_DOC xml_risp
	on (xml_risp.id_upd_unita_doc  = upd_ud.id_upd_unita_doc 
	and xml_risp.ti_xml_upd_unita_doc = 'RISPOSTA');

-- changeset root:1751554768189-255
CREATE OR REPLACE FORCE VIEW ELV_V_CHK_ADD_DOC_AGG_NO_ELE_COR (ID_DOC, FL_ADD_DOC_UD_OK, FL_ALL_ADD_DOC_PREC_OK) AS select
 doc.id_doc,
  
 case
     when ud.id_elenco_vers is not null
     and  ele_ud.ti_stato_elenco in ('INDICI_AIP_GENERATI', 'ELENCO_INDICI_AIP_CREATO',
                                    'ELENCO_INDICI_AIP_FIRMATO', 'ELENCO_INDICI_AIP_ERR_MARCA', 'COMPLETATO')
         then '1'
         else '0'
 end fl_add_doc_ud_ok,
 
 
 case
	when exists (select *
				 from ELV_V_CHK_DOC_PREC_NO_ELE_COR chk_doc_prec
				 where chk_doc_prec.id_doc_cor = doc.id_doc
				 and chk_doc_prec.fl_doc_prec_ok = '0'
				 )
		then '0'
		else '1'
 end fl_all_add_doc_prec_ok

from ARO_DOC doc
join ARO_UNITA_DOC ud
	on (ud.id_unita_doc = doc.id_unita_doc)
left join ELV_ELENCO_VERS ele_ud
	on (ele_ud.id_elenco_vers = ud.id_elenco_vers);

-- changeset root:1751554768189-256
CREATE OR REPLACE FORCE VIEW ELV_V_CHK_ADD_UPD_DOC_NO_ELE_COR (ID_UPD_UNITA_DOC_COR, ID_UPD_DOC_UNITA_DOC, FL_ADD_UPD_DOC_OK) AS select
 upd_cor.id_upd_unita_doc id_upd_unita_doc_cor,
 upd_doc.id_upd_doc_unita_doc,
 
 case
     when doc.id_elenco_vers is not null
     and  ele_doc.ti_stato_elenco in ('INDICI_AIP_GENERATI', 'ELENCO_INDICI_AIP_CREATO',
                                    'ELENCO_INDICI_AIP_FIRMATO', 'ELENCO_INDICI_AIP_ERR_MARCA', 'COMPLETATO')
         then '1'
         else '0'
 end fl_add_upd_doc_ok

from ARO_UPD_UNITA_DOC upd_cor
join ARO_UPD_DOC_UNITA_DOC upd_doc
	on (upd_doc.id_upd_unita_doc = upd_cor.id_upd_unita_doc)
join ARO_DOC doc
	on (doc.id_doc = upd_doc.id_doc
	and doc.ti_creazione = 'AGGIUNTA_DOCUMENTO')
left join ELV_ELENCO_VERS ele_doc
	on (ele_doc.id_elenco_vers = doc.id_elenco_vers);

-- changeset root:1751554768189-257
CREATE OR REPLACE FORCE VIEW ELV_V_CHK_ADD_UPD_UD_NO_ELE_COR (ID_UPD_UNITA_DOC, FL_ADD_UPD_UD_OK, FL_ALL_ADD_UPD_DOC_OK, FL_ALL_UPD_PREC_OK) AS select
 upd.id_upd_unita_doc,
 
 case
     when ud.id_elenco_vers is not null
     and  ele_ud.ti_stato_elenco in ('INDICI_AIP_GENERATI', 'ELENCO_INDICI_AIP_CREATO',
                                    'ELENCO_INDICI_AIP_FIRMATO', 'ELENCO_INDICI_AIP_ERR_MARCA', 'COMPLETATO')
         then '1'
         else '0'
 end fl_add_upd_ud_ok,
 
 case
	when exists (select *
				 from ELV_V_CHK_ADD_UPD_DOC_NO_ELE_COR chk_doc
				 where chk_doc.id_upd_unita_doc_cor = upd.id_upd_unita_doc
				 and chk_doc.fl_add_upd_doc_ok = '0'
				 )
		then '0'
		else '1'
 end fl_all_add_upd_doc_ok,
 
 case
	when exists (select *
				 from ELV_V_CHK_UPD_PREC_NO_ELE_COR chk_upd_prec
				 where chk_upd_prec.id_upd_unita_doc_cor = upd.id_upd_unita_doc
				 and chk_upd_prec.fl_upd_prec_ok = '0'
				 )
		then '0'
		else '1'
 end fl_all_upd_prec_ok

from ARO_UPD_UNITA_DOC upd
join ARO_UNITA_DOC ud
	on (ud.id_unita_doc = upd.id_unita_doc)
left join ELV_ELENCO_VERS ele_ud
	on (ele_ud.id_elenco_vers = ud.id_elenco_vers);

-- changeset root:1751554768189-258
CREATE OR REPLACE FORCE VIEW ELV_V_CHK_ALL_AIP_FASC_IN_CODA (ID_ELENCO_VERS_FASC, FL_ALL_AIP_IN_CODA) AS select
 ele.id_elenco_vers_fasc,
 case
	when stato_cor.ti_stato = 'VALIDATO'
		then
			case
				when exists (select *
							from FAS_FASCICOLO fasc
							where fasc.id_elenco_vers_fasc = ele.id_elenco_vers_fasc
							and fasc.TI_STATO_CONSERVAZIONE != 'ANNULLATO'
							and fasc.ti_stato_fasc_elenco_vers = 'IN_ELENCO_VALIDATO'
							)
					then '0'
					else '1'
			end
		else '0'
 end fl_all_aip_in_coda
from elv_elenco_vers_fasc ele
join elv_stato_elenco_vers_fasc stato_cor
	on (stato_cor.id_stato_elenco_vers_fasc = ele.id_stato_elenco_vers_fasc_cor);

-- changeset root:1751554768189-259
CREATE OR REPLACE FORCE VIEW ELV_V_CHK_DOC_PREC_NO_ELE_COR (ID_DOC_COR, ID_DOC_PREC, FL_DOC_PREC_OK) AS select
 doc_cor.id_doc id_doc_cor,
 doc_prec.id_doc id_doc_prec,
 
 case
     when doc_prec.id_elenco_vers is not null
     and  ele_doc_prec.ti_stato_elenco in ('INDICI_AIP_GENERATI', 'ELENCO_INDICI_AIP_CREATO',
                                          'ELENCO_INDICI_AIP_FIRMATO', 'ELENCO_INDICI_AIP_ERR_MARCA', 'COMPLETATO')
         then '1'
         else '0'
 end fl_doc_prec_ok

from ARO_DOC doc_cor
join ARO_DOC doc_prec
	on (doc_prec.id_unita_doc = doc_cor.id_unita_doc
	and doc_prec.dt_creazione < doc_cor.dt_creazione
	and doc_prec.ti_creazione = 'AGGIUNTA_DOCUMENTO')
left join ELV_ELENCO_VERS ele_doc_prec
	on (ele_doc_prec.id_elenco_vers = doc_prec.id_elenco_vers);

-- changeset root:1751554768189-260
CREATE OR REPLACE FORCE VIEW ELV_V_CHK_UPD_PREC_NO_ELE_COR (ID_UPD_UNITA_DOC_COR, ID_UPD_UNITA_DOC_PREC, FL_UPD_PREC_OK) AS select
 upd_cor.id_upd_unita_doc id_upd_unita_doc_cor,
 upd_prec.id_upd_unita_doc id_upd_unita_doc_prec,
 
 case
     when upd_prec.id_elenco_vers is not null
     and  ele_upd_prec.ti_stato_elenco in ('IN_CODA_INDICE_AIP', 'INDICI_AIP_GENERATI', 'ELENCO_INDICI_AIP_CREATO',
                                    'ELENCO_INDICI_AIP_FIRMATO', 'ELENCO_INDICI_AIP_ERR_MARCA', 'COMPLETATO')
         then '1'
         else '0'
 end fl_upd_prec_ok

from ARO_UPD_UNITA_DOC upd_cor
join ARO_UPD_UNITA_DOC upd_prec
	on (upd_prec.id_unita_doc = upd_cor.id_unita_doc
	and upd_prec.pg_upd_unita_doc < upd_cor.pg_upd_unita_doc)
left join ELV_ELENCO_VERS ele_upd_prec
	on (ele_upd_prec.id_elenco_vers = upd_prec.id_elenco_vers);

-- changeset root:1751554768189-261
CREATE OR REPLACE FORCE VIEW ELV_V_CREA_IX_ELENCO_FASC (NM_AMBIENTE, NM_ENTE, NM_STRUT, LIS_NM_USERID, DS_URN_ELENCO, DS_URN_INDICE_ELENCO, DS_URN_INDICE_ELENCO_NORMALIZ, ID_ELENCO_VERS_FASC, TS_CHIUSURA_ELENCO, TS_VERS_INI, TS_VERS_FIN, NM_CRITERIO_RAGGR, DS_CRITERIO_RAGGR, DL_MOTIVO_CHIUS, NT_INDICE_ELENCO, NI_FASC_VERS_ELENCO, LIS_NM_TIPO_FASCICOLO) AS select 
--		tag EnteProduttore

 amb.nm_ambiente,
 ente.nm_ente,
 strut.nm_strut,
 (select listagg(distinct usr.nm_userid, '; ') within group (order by usr.nm_userid)
  from FAS_FASCICOLO fasc
  join IAM_USER usr
	on (usr.id_user_iam = fasc.id_user_iam_vers)
  where fasc.id_elenco_vers_fasc = ele.id_elenco_vers_fasc
 ) lis_nm_userid,

--		tag DescrizioneElencoVersamento 

 ele.ds_urn_elenco,

 'urn:' || 
 (select ds_valore_param_applic
  from APL_V_GETVAL_PARAM_BY_APL
  where nm_param_applic = 'SISTEMA_CONSERVAZIONE'
 ) || ':' ||
 (select ente.nm_ente || ':' || strut.nm_strut
  from ORG_STRUT strut
  join ORG_ENTE ente
	on (ente.id_ente = strut.id_ente)
  where strut.id_strut = ele.id_strut
 )  || ':' ||
 'ElencoVers-FA-' || 
 to_char( ele.ts_creazione_elenco, 'yyyymmdd') ||'-' || to_char(ele.id_elenco_vers_fasc) || ':' || 'Indice' ds_urn_indice_elenco,

 'urn:' || 
 (select ds_valore_param_applic
  from APL_V_GETVAL_PARAM_BY_APL
  where nm_param_applic = 'SISTEMA_CONSERVAZIONE'
 ) || ':' ||
 (select ente.cd_ente_normaliz || ':' || strut.cd_strut_normaliz
  from ORG_STRUT strut
  join ORG_ENTE ente
	on (ente.id_ente = strut.id_ente)
  where strut.id_strut = ele.id_strut
 )  || ':' ||
 'ElencoVers-FA-' || 
 to_char( ele.ts_creazione_elenco, 'yyyymmdd') ||'-' || to_char(ele.id_elenco_vers_fasc) || ':' || 'Indice' ds_urn_indice_elenco_normaliz,

 ele.id_elenco_vers_fasc,
 cast (systimestamp as timestamp (6)) ts_chiusura_elenco,
 (select min(fasc.ts_ini_ses)
  from FAS_FASCICOLO fasc
  where fasc.id_elenco_vers_fasc = ele.id_elenco_vers_fasc
 ) ts_vers_ini,
 (select max(fasc.ts_ini_ses)
  from FAS_FASCICOLO fasc
  where fasc.id_elenco_vers_fasc = ele.id_elenco_vers_fasc
 ) ts_vers_fin, 
 crit.nm_criterio_raggr,
 crit.ds_criterio_raggr,
 ele.dl_motivo_chius,
 ele.nt_indice_elenco,

--		tag ContenutoSinteticoElenco

 ele.ni_fasc_vers_elenco,
 (select listagg(distinct ti_fasc.nm_tipo_fascicolo, '; ') within group (order by ti_fasc.nm_tipo_fascicolo)
  from FAS_FASCICOLO fasc
  join DEC_TIPO_FASCICOLO ti_fasc
	on (ti_fasc.id_tipo_fascicolo = fasc.id_tipo_fascicolo)
  where fasc.id_elenco_vers_fasc = ele.id_elenco_vers_fasc
 ) lis_nm_tipo_fascicolo

from ELV_ELENCO_VERS_FASC ele
join ORG_STRUT strut
	on (strut.id_strut = ele.id_strut)
join ORG_ENTE ente
	on (ente.id_ente = strut.id_ente)
join ORG_AMBIENTE amb
	on (amb.id_ambiente = ente.id_ambiente)
join DEC_CRITERIO_RAGGR_FASC crit
	on (crit.id_criterio_raggr_fasc = ele.id_criterio_raggr_fasc);

-- changeset root:1751554768189-262
CREATE OR REPLACE FORCE VIEW FAS_V_LIS_UD_IN_FASC (ID_FASCICOLO, ID_UNITA_DOC, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, NM_TIPO_UNITA_DOC, NM_TIPO_DOC, DT_CREAZIONE, TI_STATO_CONSERVAZIONE, ID_USER_IAM_CORRENTE, NI_POSIZIONE, DT_REG_UNITA_DOC) AS select
-- info fascicolo
 fasc.id_fascicolo, 
 
 ud.id_unita_doc,
 ud.cd_registro_key_unita_doc,
 ud.aa_key_unita_doc,
 ud.cd_key_unita_doc,
 tipoud.nm_tipo_unita_doc,
 tipodoc.nm_tipo_doc,
 ud.dt_creazione,
 ud.ti_stato_conservazione,
 organiz.id_user_iam as id_user_iam_corrente,
 ud_in_fasc.ni_posizione,
 ud.dt_reg_unita_doc
 
from FAS_FASCICOLO fasc
join FAS_UNITA_DOC_FASCICOLO ud_in_fasc 
 on (fasc.id_fascicolo = ud_in_fasc.id_fascicolo)
join ARO_UNITA_DOC ud
 on (ud_in_fasc.id_unita_doc = ud.id_unita_doc)
join DEC_TIPO_UNITA_DOC tipoud
 on (ud.id_tipo_unita_doc = tipoud.id_tipo_unita_doc)
join ARO_DOC doc
 on (ud.id_unita_doc = doc.id_unita_doc and doc.ti_doc = 'PRINCIPALE')
join DEC_TIPO_DOC tipodoc
 on (doc.id_tipo_doc = tipodoc.id_tipo_doc)
 join IAM_ABIL_ORGANIZ organiz on (organiz.id_organiz_applic = fasc.id_strut)
 
 join IAM_ABIL_TIPO_DATO abil_tipoud on (abil_tipoud.id_abil_organiz = organiz.id_abil_organiz and abil_tipoud.id_tipo_dato_applic = ud.id_tipo_unita_doc and abil_tipoud.nm_classe_tipo_dato = 'TIPO_UNITA_DOC')
 join IAM_ABIL_TIPO_DATO abil_tipodoc on (abil_tipodoc.id_abil_organiz = organiz.id_abil_organiz and abil_tipodoc.id_tipo_dato_applic = doc.id_tipo_doc and abil_tipodoc.nm_classe_tipo_dato = 'TIPO_DOC')
 join IAM_ABIL_TIPO_DATO abil_tiporeg on (abil_tiporeg.id_abil_organiz = organiz.id_abil_organiz and abil_tiporeg.id_tipo_dato_applic = ud.id_registro_unita_doc and abil_tiporeg.nm_classe_tipo_dato = 'REGISTRO');

-- changeset root:1751554768189-263
CREATE OR REPLACE FORCE VIEW MON_V_LIS_DOC_NON_VERS_IAM (ID_USER_IAM, ID_AMBIENTE, NM_AMBIENTE, ID_ENTE, NM_ENTE, ID_STRUT, NM_STRUT, ID_DOC_NON_VERS, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, CD_KEY_DOC_VERS, FL_VERIF, FL_NON_RISOLUB, DS_KEY_ORD, CL_ERR_LAST, CD_ERR_LAST, DS_ERR_LAST, FL_DIVERSI_ERR, DT_FIRST_SES_ERR, DT_LAST_SES_ERR) AS select
-- info su utente che usa l'applicazione
 abil_org.id_user_iam,

 -- info di organizzazione
 amb.id_ambiente, amb.nm_ambiente, 
 ente.id_ente, ente.nm_ente, 
 strut.id_strut, strut.nm_strut,

 doc_non_vers.id_doc_non_vers, 
 doc_non_vers.cd_registro_key_unita_doc, doc_non_vers.aa_key_unita_doc, doc_non_vers.cd_key_unita_doc, doc_non_vers.cd_key_doc_vers,

 doc_non_vers.fl_verif,
 doc_non_vers.fl_non_risolub,
 doc_non_vers.cd_registro_key_unita_doc || to_char(doc_non_vers.aa_key_unita_doc) || lpad(doc_non_vers.cd_key_unita_doc, 12, '0') || doc_non_vers.cd_key_doc_vers ds_key_ord,
  
 doc_non_vers.cl_err_last,
 doc_non_vers.cd_err_last, 
 doc_non_vers.ds_err_last, 
 doc_non_vers.fl_diversi_err, 
 doc_non_vers.dt_first_ses_err, doc_non_vers.dt_last_ses_err
 

from IAM_ABIL_ORGANIZ abil_org
join ORG_STRUT strut
 on (strut.id_strut = abil_org.id_organiz_applic and strut.fl_cessato = 0)
join ORG_ENTE ente 
 on (ente.id_ente = strut.id_ente and ente.fl_cessato = 0)
join ORG_AMBIENTE amb
 on (amb.id_ambiente = ente.id_ambiente)

join VRS_V_DOC_NON_VERS doc_non_vers
 on (doc_non_vers.id_strut = strut.id_strut);

-- changeset root:1751554768189-264
CREATE OR REPLACE FORCE VIEW MON_V_LIS_REGISTRO_DT_VERS (ID_REGISTRO_UNITA_DOC, DT_EROG, DT_LAST_EROG) AS select
 tot_registro.id_registro_unita_doc,
 min (tot_registro.dt_rif_conta) dt_erog,
 max (tot_registro.dt_rif_conta) dt_last_erog
 
from sacer.MON_CONTA_UD_DOC_COMP tot_registro

group by tot_registro.id_registro_unita_doc;

-- changeset root:1751554768189-265
CREATE OR REPLACE FORCE VIEW MON_V_LIS_UD_NON_VERS_IAM (ID_USER_IAM, ID_AMBIENTE, NM_AMBIENTE, ID_ENTE, NM_ENTE, ID_STRUT, NM_STRUT, ID_UNITA_DOC_NON_VERS, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, FL_VERIF, FL_NON_RISOLUB, DS_KEY_ORD, CL_ERR_LAST, CD_ERR_LAST, DS_ERR_LAST, FL_DIVERSI_ERR, DT_FIRST_SES_ERR, DT_LAST_SES_ERR) AS select 
 abil_org.id_user_iam,
 amb.id_ambiente, amb.nm_ambiente, 
 ente.id_ente, ente.nm_ente, 
 strut.id_strut, strut.nm_strut,

 ud_non_vers.id_unita_doc_non_vers, 
 ud_non_vers.cd_registro_key_unita_doc, 
 ud_non_vers.aa_key_unita_doc, 
 ud_non_vers.cd_key_unita_doc,

 ud_non_vers.fl_verif,
 ud_non_vers.fl_non_risolub,
 ud_non_vers.cd_registro_key_unita_doc || to_char(ud_non_vers.aa_key_unita_doc) || lpad(ud_non_vers.cd_key_unita_doc, 12, '0') ds_key_ord,
 
 ud_non_vers.cl_err_last,
 ud_non_vers.cd_err_last, 
 ud_non_vers.ds_err_last, 
 ud_non_vers.fl_diversi_err, 
 ud_non_vers.dt_first_ses_err, ud_non_vers.dt_last_ses_err
 
from IAM_ABIL_ORGANIZ abil_org
join ORG_STRUT strut
 on (strut.id_strut = abil_org.id_organiz_applic and strut.fl_cessato = 0)
join ORG_ENTE ente 
 on (ente.id_ente = strut.id_ente and ente.fl_cessato = 0)
join ORG_AMBIENTE amb
 on (amb.id_ambiente = ente.id_ambiente)

join VRS_V_UNITA_DOC_NON_VERS ud_non_vers
on (ud_non_vers.id_strut = strut.id_strut);

-- changeset root:1751554768189-266
CREATE OR REPLACE FORCE VIEW MON_V_VIS_VERS_ERR_IAM (ID_STRUT, NM_AMBIENTE, NM_ENTE, NM_STRUT, NM_USERID_WS, NM_USERID, NM_COGNOME_USER, NM_NOME_USER, ID_SESSIONE_VERS, DT_APERTURA, DT_CHIUSURA, TI_SESSIONE_VERS, CD_VERSIONE_WS, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, CD_KEY_DOC_VERS, FL_SESSIONE_ERR_VERIF, FL_SESSIONE_ERR_NON_RISOLUB, CD_ERR, DS_ERR, FL_RISOLTO, BL_XML_RICH, BL_XML_INDEX, BL_XML_RISP) AS SELECT                                           -- info di organizzazione
           ses.id_strut,
           amb.nm_ambiente,
           ente.nm_ente,
           strut.nm_strut,
           -- info user
           ses.nm_userid_ws,
           ses.nm_userid,
           usr.nm_cognome_user,
           usr.nm_nome_user,
           -- info sessione
           ses.id_sessione_vers_ko,
           ses.dt_apertura,
           ses.dt_chiusura,
           ses.ti_sessione_vers,
           ses.cd_versione_ws,
           ses.cd_registro_key_unita_doc,
           ses.aa_key_unita_doc,
           ses.cd_key_unita_doc,
           ses.cd_key_doc_vers,
           ses.fl_sessione_err_verif,
           ses.fl_sessione_err_non_risolub,
           -- info errore
           ses.cd_err_princ,
           ses.ds_err_princ,
           -- info errore risolto
           CASE
               WHEN ses.ti_sessione_vers = 'VERSAMENTO' THEN
                   CASE
                       WHEN EXISTS
                                (SELECT 1
                                   FROM ARO_UNITA_DOC ud
                                  WHERE ud.id_strut = ses.id_strut
                                    AND ud.cd_registro_key_unita_doc =
                                        ses.cd_registro_key_unita_doc
                                    AND ud.aa_key_unita_doc =
                                        ses.aa_key_unita_doc
                                    AND ud.cd_key_unita_doc =
                                        ses.cd_key_unita_doc) THEN
                           '1'
                       ELSE
                           '0'
                   END
               WHEN ses.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO' THEN
                   CASE
                       WHEN ((EXISTS
                                  (SELECT 1
                                     FROM VRS_DATI_SESSIONE_VERS_ko  dato_ses,
                                          VRS_ERR_SESSIONE_VERS_ko   err
                                    WHERE dato_ses.id_sessione_vers_ko =
                                          ses.id_sessione_vers_ko
                                      AND err.id_dati_sessione_vers_ko =
                                          dato_ses.id_dati_sessione_vers_ko
                                      AND err.cd_err IN
                                              ('UD-005', 'UD-005-001'))
                          AND EXISTS
                                  (SELECT 1
                                     FROM ARO_UNITA_DOC ud
                                    WHERE ud.id_strut = ses.id_strut
                                      AND ud.cd_registro_key_unita_doc =
                                          ses.cd_registro_key_unita_doc
                                      AND ud.aa_key_unita_doc =
                                          ses.aa_key_unita_doc
                                      AND ud.cd_key_unita_doc =
                                          ses.cd_key_unita_doc))
                          OR EXISTS
                                 (SELECT 1
                                    FROM ARO_UNITA_DOC ud, ARO_DOC doc
                                   WHERE ud.id_strut = ses.id_strut
                                     AND ud.cd_registro_key_unita_doc =
                                         ses.cd_registro_key_unita_doc
                                     AND ud.aa_key_unita_doc =
                                         ses.aa_key_unita_doc
                                     AND ud.cd_key_unita_doc =
                                         ses.cd_key_unita_doc
                                     AND doc.id_unita_doc = ud.id_unita_doc
                                     AND doc.cd_key_doc_vers =
                                         ses.cd_key_doc_vers)) THEN
                           '1'
                       ELSE
                           '0'
                   END
               ELSE
                   '0'
           END                  fl_risolto,
           -- info xml
         
            case  when xml_rich.bl_xml is null then xml_rich_old.bl_xml
                  else  xml_rich.bl_xml 
                  end  bl_xml_rich , 
                  
            case   when xml_indice.bl_xml is null then xml_indice_old.bl_xml
                  else  xml_indice.bl_xml
                  end  bl_xml_index , 
                  
            case   when xml_risp.bl_xml is null then xml_risp_old.bl_xml
                  else  xml_risp.bl_xml
                  end  bl_xml_risp 
               
           
           
      FROM VRS_SESSIONE_VERS_ko  ses
           JOIN ORG_STRUT strut
               ON (strut.id_strut = ses.id_strut AND strut.fl_cessato = 0)
           JOIN ORG_ENTE ente
               ON (ente.id_ente = strut.id_ente AND ente.fl_cessato = 0)
           JOIN ORG_AMBIENTE amb ON (amb.id_ambiente = ente.id_ambiente)
           LEFT JOIN IAM_USER usr ON (usr.id_user_iam = ses.id_user)
           JOIN VRS_DATI_SESSIONE_VERS_ko dati_ses
               ON (dati_ses.id_sessione_vers_ko = ses.id_sessione_vers_ko)
           
           JOIN VRS_XML_DATI_SESSIONE_VERS_ko xml_rich
               ON (xml_rich.id_dati_sessione_vers_ko =
                   dati_ses.id_dati_sessione_vers_ko
               AND xml_rich.ti_xml_dati = 'RICHIESTA')
           
            left join VRS_XML_DATI_SESSIONE_VERS xml_rich_old
               ON (xml_rich_old.id_dati_sessione_vers =
                   dati_ses.id_dati_sessione_vers_ko
               AND xml_rich_old.ti_xml_dati = 'RICHIESTA')
               
               
           LEFT JOIN VRS_XML_DATI_SESSIONE_VERS_ko xml_indice
               ON (xml_indice.id_dati_sessione_vers_ko =
                   dati_ses.id_dati_sessione_vers_ko
               AND xml_indice.ti_xml_dati = 'INDICE_FILE')
           
           LEFT join VRS_XML_DATI_SESSIONE_VERS xml_indice_old
               ON (xml_indice_old.id_dati_sessione_vers =
                   dati_ses.id_dati_sessione_vers_ko
               AND xml_indice_old.ti_xml_dati = 'INDICE_FILE')   
               
               
            JOIN VRS_XML_DATI_SESSIONE_VERS_ko xml_risp
               ON (xml_risp.id_dati_sessione_vers_ko =
                   dati_ses.id_dati_sessione_vers_ko
               AND xml_risp.ti_xml_dati = 'RISPOSTA')
               
           left join VRS_XML_DATI_SESSIONE_VERS xml_risp_old
               ON (xml_risp_old.id_dati_sessione_vers =
                   dati_ses.id_dati_sessione_vers_ko
               AND xml_risp_old.ti_xml_dati = 'RISPOSTA');

-- changeset root:1751554768189-267
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_PARTITION_UPD_BY_AA_DA_DROPPARE (ID_STRUT, ANNO, FL_PART_VERSINIDATISPEC_OK, CD_PARTITION_VERSINIDATISPEC, FL_PART_VERSINIDATISPEC_AA_OK, FL_PART_UPDDATISPEC_OK, CD_PARTITION_UPDDATISPEC, FL_PART_UPDDATISPEC_AA_OK, FL_PART_XMLUPD_OK, CD_PARTITION_XMLUPD, FL_PART_XMLUPD_AA_OK, FL_PART_UPDKO_OK, CD_PARTITION_UPDKO, FL_PART_UPDKO_AA_OK, FL_PART_SESUPDKO_OK, CD_PARTITION_SESUPDKO, FL_PART_SESUPDKO_AA_OK, FL_PART_XMLSESUPDKO_OK, CD_PARTITION_XMLSESUPDKO, FL_PART_XMLSESUPDKP_AA_OK) AS SELECT tmp.id_strut,
           aa.aa_val,
           tmp.fl_part_versinidatispec_ok,
           tmp.cd_partition_versinidatispec,
           CASE -- verifica se per a data corrente la sub-partizione per ARO_VERS_INI_DATI_SPEC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') 
                        ---N.B. il valore corretto per le vecchie logieche è 'false'
                        --- attualemente è forzato a true
                     THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_versinidatispec_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_versinidatispec
                                        IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'VERS_INI_DATI_SPEC'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_versinidatispec) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_versinidatispec_aa_ok,
           tmp.fl_part_upddatispec_ok,
           tmp.cd_partition_upddatispec,
           CASE -- verifica se per a data corrente la sub-partizione per ARO_UPD_DATI_SPEC_UNITA_DOC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_upddatispec_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_upddatispec IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'UPD_DATI_SPEC_UNITA_DOC'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_upddatispec) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_upddatispec_aa_ok,
           tmp.fl_part_xmlupd_ok,
           tmp.cd_partition_xmlupd,
           CASE -- verifica se per a data corrente la sub-partizione per ARO_XML_UPD_UNITA_DOC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_xmlupd_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_xmlupd IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'XML_UPD_UNITA_DOC'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_xmlupd) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_xmlupd_aa_ok,
           tmp.fl_part_updko_ok,
           tmp.cd_partition_updko,
           CASE -- verifica se per per anno in input la sub-partizione per VRS_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_updko_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_updko IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_NUMBER (
                                                                    val_subpart.cd_val_sub_partition) =
                                                                aa.aa_val)
                                                  WHERE part.ti_partition =
                                                        'UPD_UNITA_DOC_KO'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_updko) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_updko_aa_ok,
           tmp.fl_part_sesupdko_ok,
           tmp.cd_partition_sesupdko,
           CASE -- verifica se per per anno in input la sub-partizione per VRS_SES_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_sesupdko_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_sesupdko IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_NUMBER (
                                                                    val_subpart.cd_val_sub_partition) =
                                                                aa.aa_val)
                                                  WHERE part.ti_partition =
                                                        'SES_UPD_UNITA_DOC_KO'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_sesupdko) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_sesupdko_aa_ok,
           tmp.fl_part_xmlsesupdko_ok,
           tmp.cd_partition_xmlsesupdko,
           CASE -- verifica se per a data corrente la sub-partizione per VRS_XML_SES_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_xmlsesupdko_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_xmlsesupdko IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'XML_SES_UPD_UNITA_DOC_KO'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_xmlsesupdko) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_xmlsesupdkp_aa_ok
      FROM ORG_V_CHK_TABLE_PARTITION_UPD  tmp
           JOIN DEC_AA_VAL aa ON (aa.aa_val > 1);

-- changeset root:1751554768189-268
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_PARTITION_UPD_ERR_DA_DROPPARE (FL_PART_SESUPDERR_OK, CD_PARTITION_SESUPDERR) AS SELECT CASE -- verifica se a data corrente la partizione per VRS_SES_UPD_UNITA_DOC_ERR e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false')
                    ---- N.B. il valore corretto per le vecchie logiche è 'false'
                    --- momentaneamente viere forzato a 'true' 
                     THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION  part
                                        JOIN ORG_VAL_SUB_PARTITION val_part
                                            ON (val_part.id_partition =
                                                part.id_partition)
                                  WHERE part.ti_partition =
                                        'SES_UPD_UNITA_DOC_ERR'
                                    AND val_part.cd_val_sub_partition LIKE
                                            '%/%'
                                    AND TO_DATE (
                                            val_part.cd_val_sub_partition,
                                            'dd/mm/yyyy') >
                                        TRUNC (SYSDATE)) THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_sesupderr_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT MAX (part.cd_partition)
                      FROM ORG_PARTITION  part
                           JOIN ORG_VAL_SUB_PARTITION val_part
                               ON (val_part.id_partition = part.id_partition)
                     WHERE part.ti_partition = 'SES_UPD_UNITA_DOC_ERR'
                       AND val_part.cd_val_sub_partition LIKE '%/%'
                       AND TO_DATE (val_part.cd_val_sub_partition,
                                    'dd/mm/yyyy') >
                           TRUNC (SYSDATE))
           END    cd_partition_sesupderr
      FROM DUAL;

-- changeset root:1751554768189-269
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_STRUT_PARTITION (ID_STRUT, FL_PART_OK, ID_STRUT_CHK) AS select a.id_Strut, nvl(b.fl_part_ok,0),b.id_strut as id_strut_chk from org_Strut a
left join ORG_CHK_STRUT_PARTITION b  on a.id_strut=b.id_strut;

-- changeset root:1751554768189-270
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_STRUT_PARTITION_MANUALE_DA_DROPPARE (ID_STRUT, FL_PART_OK) AS SELECT tab2.id_strut,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') =
                    'false'
                AND 1 = 2     -----rimuovere 1=2 eserve solo per fare dei test
                          THEN                                     ---cambaito
                   '1'
               ELSE
                   CASE
                       WHEN tab2.test =
                              7
                            + (SELECT COUNT (1)
                                 FROM org_sub_strut aa
                                WHERE aa.ID_STRUT = tab2.id_Strut) THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part
      FROM (  SELECT id_strut, COUNT (1) AS test
                FROM (SELECT /*+ parallel 12 */
                             a.KEY_PARTITION     AS id_Strut
                        FROM ORG_V_CHK_STRUT_PARTITION_MANUALE_ORACLE a
                             JOIN ORG_V_CHK_SUB_STRUT_PARTITION_ORA_2_new b
                                 ON a.TABLE_NAME = b.table_name
                                AND a.PARTITION_NAME = b.partition_name
                       WHERE a.TABLE_NAME IN ('VRS_SESSIONE_VERS',
                                              'ARO_CONTENUTO_COMP',
                                              'ARO_FILE_VER_INDICE_AIP_UD',
                                              'VRS_CONTENUTO_FILE',
                                              'SER_IX_VOL_VER_SERIE',
                                              'SER_FILE_VER_SERIE',
                                              'ELV_FILE_ELENCO_VERS')
                         AND b.KEY_SUB_PARTITION >=
                             TO_NUMBER (EXTRACT (YEAR FROM SYSDATE))
                      UNION ALL
                      SELECT /*+ parallel 12 */
                             a.ID_STRUT
                        FROM org_Strut a
                             JOIN org_sub_Strut b ON a.id_Strut = b.ID_STRUT
                             LEFT JOIN ORG_V_CHK_STRUT_PARTITION_MANUALE_ORACLE c
                                 ON c.KEY_PARTITION = b.ID_SUB_STRUT
                             LEFT JOIN
                             ORG_V_CHK_SUB_STRUT_PARTITION_ORA_2_new d
                                 ON d.TABLE_NAME = c.TABLE_NAME
                                AND d.PARTITION_NAME = c.PARTITION_NAME
                       WHERE (c.TABLE_NAME IN ('ARO_UNITA_DOC')
                           OR c.TABLE_NAME IS NULL)
                         AND (d.KEY_SUB_PARTITION >=
                              TO_NUMBER (EXTRACT (YEAR FROM SYSDATE))
                           OR d.KEY_SUB_PARTITION IS NULL)) tab1
            GROUP BY tab1.id_Strut) tab2;

-- changeset root:1751554768189-271
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_STRUT_PARTITION_MANUALE_ORACLE_DA_DROPPARE (TABLE_NAME, PARTITION_NAME, KEY_PARTITION) AS SELECT table_name,
           partition_name,
           TO_NUMBER (key_partition)     key_partition
      FROM (SELECT TABLE_NAME,
           PARTITION_NAME,
           REPLACE (HIGH_VALUE, 'null', '0')     high_value
      FROM (WITH
                xml
                AS
                    (SELECT DBMS_XMLGEN.getxmltype (
                                'select table_name, partition_name, high_value 
                                 from user_tab_partitions  
                                 where table_name in (''ARO_UNITA_DOC'',
                                                      ''ARO_CONTENUTO_COMP'',
                                                      ''ARO_FILE_VER_INDICE_AIP_UD'',
                                                      ''VRS_SESSIONE_VERS'', 
                                                      ''VRS_CONTENUTO_FILE'',
                                                      ''SER_IX_VOL_VER_SERIE'',
                                                      ''SER_FILE_VER_SERIE'',
                                                      ''ELV_FILE_ELENCO_VERS'')')    AS x --attenzione che la aro_unita_Doc va per id_sub_Strut
                       FROM DUAL)
                       SELECT t.table_name, t.partition_name, t.high_value
                         FROM xml
                              CROSS JOIN
                              XMLTABLE (
                                  '//ROWSET/ROW'
                                  PASSING xml.x
                                  COLUMNS table_name        VARCHAR2 (30),
                                          partition_name    VARCHAR2 (30),
                                          high_value        CLOB) t)),
           LATERAL (    SELECT TRIM (REGEXP_SUBSTR (high_value,
                                                    '[^,]+',
                                                    1,
                                                    LEVEL))    key_partition
                          FROM DUAL
                    CONNECT BY LEVEL <= REGEXP_COUNT (high_value, ',') + 1);

-- changeset root:1751554768189-272
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_TABLE_PARTITION_UPD_DA_DROPPARE (ID_STRUT, FL_PART_VERSINIDATISPEC_OK, CD_PARTITION_VERSINIDATISPEC, FL_PART_UPDDATISPEC_OK, CD_PARTITION_UPDDATISPEC, FL_PART_XMLUPD_OK, CD_PARTITION_XMLUPD, FL_PART_UPDKO_OK, CD_PARTITION_UPDKO, FL_PART_SESUPDKO_OK, CD_PARTITION_SESUPDKO, FL_PART_XMLSESUPDKO_OK, CD_PARTITION_XMLSESUPDKO, FL_PART_SESUPDERR_OK, CD_PARTITION_SESUPDERR) AS SELECT strut.id_strut,
           CASE -- verifica se per la struttura la partizione per ARO_VERS_INI_DATI_SPEC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in( 'true','false' )
                    ---'false' 
                    THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION_STRUT part_strut
                                  WHERE part_strut.id_strut = strut.id_strut
                                    AND part_strut.ti_partition =
                                        'VERS_INI_DATI_SPEC') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_versinidatispec_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in( 'true','false' )
                     THEN
                   NULL
               ELSE
                   (SELECT part.cd_partition
                      FROM ORG_PARTITION_STRUT  part_strut
                           JOIN ORG_PARTITION part
                               ON (part.id_partition =
                                   part_strut.id_partition)
                     WHERE part_strut.id_strut = strut.id_strut
                       AND part_strut.ti_partition = 'VERS_INI_DATI_SPEC')
           END    cd_partition_versinidatispec,
           CASE -- verifica se per la struttura la partizione per ARO_UPD_DATI_SPEC_UNITA_DOC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION_STRUT part_strut
                                  WHERE part_strut.id_strut = strut.id_strut
                                    AND part_strut.ti_partition =
                                        'UPD_DATI_SPEC_UNITA_DOC') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_upddatispec_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT part.cd_partition
                      FROM ORG_PARTITION_STRUT  part_strut
                           JOIN ORG_PARTITION part
                               ON (part.id_partition =
                                   part_strut.id_partition)
                     WHERE part_strut.id_strut = strut.id_strut
                       AND part_strut.ti_partition =
                           'UPD_DATI_SPEC_UNITA_DOC')
           END    cd_partition_upddatispec,
           CASE -- verifica se per la struttura la partizione per ARO_XML_UPD_UNITA_DOC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION_STRUT part_strut
                                  WHERE part_strut.id_strut = strut.id_strut
                                    AND part_strut.ti_partition =
                                        'XML_UPD_UNITA_DOC') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_xmlupd_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT part.cd_partition
                      FROM ORG_PARTITION_STRUT  part_strut
                           JOIN ORG_PARTITION part
                               ON (part.id_partition =
                                   part_strut.id_partition)
                     WHERE part_strut.id_strut = strut.id_strut
                       AND part_strut.ti_partition = 'XML_UPD_UNITA_DOC')
           END    cd_partition_xmlupd,
           CASE -- verifica se per la struttura la partizione per VRS_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION_STRUT part_strut
                                  WHERE part_strut.id_strut = strut.id_strut
                                    AND part_strut.ti_partition =
                                        'UPD_UNITA_DOC_KO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_updko_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT part.cd_partition
                      FROM ORG_PARTITION_STRUT  part_strut
                           JOIN ORG_PARTITION part
                               ON (part.id_partition =
                                   part_strut.id_partition)
                     WHERE part_strut.id_strut = strut.id_strut
                       AND part_strut.ti_partition = 'UPD_UNITA_DOC_KO')
           END    cd_partition_updko,
           CASE -- verifica se per la struttura la partizione per VRS_SES_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION_STRUT part_strut
                                  WHERE part_strut.id_strut = strut.id_strut
                                    AND part_strut.ti_partition =
                                        'SES_UPD_UNITA_DOC_KO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_sesupdko_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT part.cd_partition
                      FROM ORG_PARTITION_STRUT  part_strut
                           JOIN ORG_PARTITION part
                               ON (part.id_partition =
                                   part_strut.id_partition)
                     WHERE part_strut.id_strut = strut.id_strut
                       AND part_strut.ti_partition = 'SES_UPD_UNITA_DOC_KO')
           END    cd_partition_sesupdko,
           CASE -- verifica se per la struttura la partizione per VRS_XML_SES_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION_STRUT part_strut
                                  WHERE part_strut.id_strut = strut.id_strut
                                    AND part_strut.ti_partition =
                                        'XML_SES_UPD_UNITA_DOC_KO') THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_xmlsesupdko_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT part.cd_partition
                      FROM ORG_PARTITION_STRUT  part_strut
                           JOIN ORG_PARTITION part
                               ON (part.id_partition =
                                   part_strut.id_partition)
                     WHERE part_strut.id_strut = strut.id_strut
                       AND part_strut.ti_partition =
                           'XML_SES_UPD_UNITA_DOC_KO')
           END    cd_partition_xmlsesupdko,
           CASE -- verifica se a data corrente la partizione per VRS_SES_UPD_UNITA_DOC_ERR e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN EXISTS
                                (SELECT *
                                   FROM ORG_PARTITION  part
                                        JOIN ORG_VAL_SUB_PARTITION val_part
                                            ON (val_part.id_partition =
                                                part.id_partition)
                                  WHERE part.ti_partition =
                                        'SES_UPD_UNITA_DOC_ERR'
                                    AND val_part.cd_val_sub_partition LIKE
                                            '%/%'
                                    AND TO_DATE (
                                            val_part.cd_val_sub_partition,
                                            'dd/mm/yyyy') >
                                        TRUNC (SYSDATE)) THEN
                           '1'
                       ELSE
                           '0'
                   END
           END    fl_part_sesupderr_ok,
           CASE
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   NULL
               ELSE
                   (SELECT MAX (part.cd_partition)
                      FROM ORG_PARTITION  part
                           JOIN ORG_VAL_SUB_PARTITION val_part
                               ON (val_part.id_partition = part.id_partition)
                     WHERE part.ti_partition = 'SES_UPD_UNITA_DOC_ERR'
                       AND val_part.cd_val_sub_partition LIKE '%/%'
                       AND TO_DATE (val_part.cd_val_sub_partition,
                                    'dd/mm/yyyy') >
                           TRUNC (SYSDATE))
           END    cd_partition_sesupderr
      FROM ORG_STRUT strut;

-- changeset root:1751554768189-273
CREATE OR REPLACE FORCE VIEW ORG_V_CHK_TIME_PARTITION_UPD_DA_DROPPARE (ID_STRUT, FL_PART_VERSINIDATISPEC_OK, CD_PARTITION_VERSINIDATISPEC, FL_PART_VERSINIDATISPEC_AA_OK, FL_PART_UPDDATISPEC_OK, CD_PARTITION_UPDDATISPEC, FL_PART_UPDDATISPEC_AA_OK, FL_PART_XMLUPD_OK, CD_PARTITION_XMLUPD, FL_PART_XMLUPD_AA_OK, FL_PART_UPDKO_OK, CD_PARTITION_UPDKO, FL_PART_UPDKO_AA_OK, FL_PART_SESUPDKO_OK, CD_PARTITION_SESUPDKO, FL_PART_SESUPDKO_AA_OK, FL_PART_XMLSESUPDKO_OK, CD_PARTITION_XMLSESUPDKO, FL_PART_XMLSESUPDKO_AA_OK, FL_PART_SESUPDERR_OK, CD_PARTITION_SESUPDERR) AS SELECT tmp.id_strut,
           tmp.fl_part_versinidatispec_ok,
           tmp.cd_partition_versinidatispec,
           CASE -- verifica se per la data corrente la sub-partizione per ARO_VERS_INI_DATI_SPEC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false')
                    --- n.b. il valore è corretto per le vecchie logiche'false'
                    --attualmente è sostituito con true 
                    THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_versinidatispec_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_versinidatispec
                                        IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'VERS_INI_DATI_SPEC'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_versinidatispec) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_versinidatispec_aa_ok,
           tmp.fl_part_upddatispec_ok,
           tmp.cd_partition_upddatispec,
           CASE -- verifica se per la data corrente la sub-partizione per ARO_UPD_DATI_SPEC_UNITA_DOC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_upddatispec_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_upddatispec IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'UPD_DATI_SPEC_UNITA_DOC'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_upddatispec) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_upddatispec_aa_ok,
           tmp.fl_part_xmlupd_ok,
           tmp.cd_partition_xmlupd,
           CASE -- verifica se per la data corrente la sub-partizione per ARO_XML_UPD_UNITA_DOC e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_xmlupd_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_xmlupd IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'XML_UPD_UNITA_DOC'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_xmlupd) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_xmlupd_aa_ok,
           tmp.fl_part_updko_ok,
           tmp.cd_partition_updko,
           CASE -- verifica se per ogni anno la sub-partizione per VRS_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_updko_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_updko IS NOT NULL THEN
                                   CASE
                                       WHEN EXISTS
                                                (SELECT *
                                                   FROM DEC_REGISTRO_UNITA_DOC
                                                        reg
                                                        JOIN
                                                        DEC_AA_REGISTRO_UNITA_DOC
                                                        aa_reg
                                                            ON (aa_reg.id_registro_unita_doc =
                                                                reg.id_registro_unita_doc)
                                                        JOIN DEC_AA_VAL aa
                                                            ON (aa.aa_val >=
                                                                aa_reg.aa_min_registro_unita_doc
                                                            AND aa.aa_val <=
                                                                NVL (
                                                                    aa_reg.aa_max_registro_unita_doc,
                                                                    TO_NUMBER (
                                                                        SUBSTR (
                                                                            TO_CHAR (
                                                                                SYSDATE,
                                                                                'dd/mm/yyyy'),
                                                                            7))))
                                                  WHERE reg.id_strut =
                                                        tmp.id_strut) THEN
                                           CASE
                                               WHEN EXISTS
                                                        (SELECT *
                                                           FROM DEC_REGISTRO_UNITA_DOC
                                                                reg
                                                                JOIN
                                                                DEC_AA_REGISTRO_UNITA_DOC
                                                                aa_reg
                                                                    ON (aa_reg.id_registro_unita_doc =
                                                                        reg.id_registro_unita_doc)
                                                                JOIN
                                                                DEC_AA_VAL aa
                                                                    ON (aa.aa_val >=
                                                                        aa_reg.aa_min_registro_unita_doc
                                                                    AND aa.aa_val <=
                                                                        NVL (
                                                                            aa_reg.aa_max_registro_unita_doc,
                                                                            TO_NUMBER (
                                                                                SUBSTR (
                                                                                    TO_CHAR (
                                                                                        SYSDATE,
                                                                                        'dd/mm/yyyy'),
                                                                                    7))))
                                                          WHERE reg.id_strut =
                                                                tmp.id_strut
                                                            AND NOT EXISTS
                                                                    (SELECT *
                                                                       FROM ORG_PARTITION
                                                                                part
                                                                            JOIN
                                                                            ORG_SUB_PARTITION
                                                                                subpart
                                                                                ON (subpart.id_partition =
                                                                                    part.id_partition)
                                                                            JOIN
                                                                            ORG_VAL_SUB_PARTITION
                                                                                val_subpart
                                                                                ON (val_subpart.id_sub_partition =
                                                                                    subpart.id_sub_partition
                                                                                AND val_subpart.id_partition =
                                                                                    part.id_partition
                                                                                AND TO_NUMBER (
                                                                                        val_subpart.cd_val_sub_partition) =
                                                                                    aa.aa_val)
                                                                      WHERE part.ti_partition =
                                                                            'UPD_UNITA_DOC_KO'
                                                                        AND part.cd_partition =
                                                                            tmp.cd_partition_updko)) THEN
                                                   '0' -- esiste anno su tipo registro e tale anno non sottopartizione
                                               ELSE
                                                   '1'
                                           END
                                       ELSE
                                           '0' -- non esiste anno su tipo registro
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_updko_aa_ok,
           tmp.fl_part_sesupdko_ok,
           tmp.cd_partition_sesupdko,
           CASE -- verifica se per ogni la sub-partizione per VRS_SES_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_sesupdko_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_sesupdko IS NOT NULL THEN
                                   CASE
                                       WHEN EXISTS
                                                (SELECT *
                                                   FROM DEC_REGISTRO_UNITA_DOC
                                                        reg
                                                        JOIN
                                                        DEC_AA_REGISTRO_UNITA_DOC
                                                        aa_reg
                                                            ON (aa_reg.id_registro_unita_doc =
                                                                reg.id_registro_unita_doc)
                                                        JOIN DEC_AA_VAL aa
                                                            ON (aa.aa_val >=
                                                                aa_reg.aa_min_registro_unita_doc
                                                            AND aa.aa_val <=
                                                                NVL (
                                                                    aa_reg.aa_max_registro_unita_doc,
                                                                    TO_NUMBER (
                                                                        SUBSTR (
                                                                            TO_CHAR (
                                                                                SYSDATE,
                                                                                'dd/mm/yyyy'),
                                                                            7))))
                                                  WHERE reg.id_strut =
                                                        tmp.id_strut) THEN
                                           CASE
                                               WHEN EXISTS
                                                        (SELECT *
                                                           FROM DEC_REGISTRO_UNITA_DOC
                                                                reg
                                                                JOIN
                                                                DEC_AA_REGISTRO_UNITA_DOC
                                                                aa_reg
                                                                    ON (aa_reg.id_registro_unita_doc =
                                                                        reg.id_registro_unita_doc)
                                                                JOIN
                                                                DEC_AA_VAL aa
                                                                    ON (aa.aa_val >=
                                                                        aa_reg.aa_min_registro_unita_doc
                                                                    AND aa.aa_val <=
                                                                        NVL (
                                                                            aa_reg.aa_max_registro_unita_doc,
                                                                            TO_NUMBER (
                                                                                SUBSTR (
                                                                                    TO_CHAR (
                                                                                        SYSDATE,
                                                                                        'dd/mm/yyyy'),
                                                                                    7))))
                                                          WHERE reg.id_strut =
                                                                tmp.id_strut
                                                            AND NOT EXISTS
                                                                    (SELECT *
                                                                       FROM ORG_PARTITION
                                                                                part
                                                                            JOIN
                                                                            ORG_SUB_PARTITION
                                                                                subpart
                                                                                ON (subpart.id_partition =
                                                                                    part.id_partition)
                                                                            JOIN
                                                                            ORG_VAL_SUB_PARTITION
                                                                                val_subpart
                                                                                ON (val_subpart.id_sub_partition =
                                                                                    subpart.id_sub_partition
                                                                                AND val_subpart.id_partition =
                                                                                    part.id_partition
                                                                                AND TO_NUMBER (
                                                                                        val_subpart.cd_val_sub_partition) =
                                                                                    aa.aa_val)
                                                                      WHERE part.ti_partition =
                                                                            'SES_UPD_UNITA_DOC_KO'
                                                                        AND part.cd_partition =
                                                                            tmp.cd_partition_sesupdko)) THEN
                                                   '0' -- esiste anno su tipo registro e tale anno non sottopartizione
                                               ELSE
                                                   '1'
                                           END
                                       ELSE
                                           '0' -- non esiste anno su tipo registro
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_sesupdko_aa_ok,
           tmp.fl_part_xmlsesupdko_ok,
           tmp.cd_partition_xmlsesupdko,
           CASE -- verifica se per la data corrente la sub-partizione per VRS_XML_SES_UPD_UNITA_DOC_KO e' definita
               WHEN (SELECT ds_valore_param_applic
                       FROM APL_PARAM_APPLIC  par
                            JOIN APL_VALORE_PARAM_APPLIC val
                                ON (val.id_param_applic = par.id_param_applic)
                      WHERE par.fl_appart_applic = '1'
                        AND val.ti_appart = 'APPLIC'
                        AND nm_param_applic = 'VERIFICA_PARTIZIONI') in ('true','false') THEN
                   '1'
               ELSE
                   CASE
                       WHEN tmp.fl_part_xmlsesupdko_ok = '1' THEN
                           CASE
                               WHEN tmp.cd_partition_xmlsesupdko IS NOT NULL THEN
                                   CASE
                                       WHEN NOT EXISTS
                                                (SELECT *
                                                   FROM ORG_PARTITION  part
                                                        JOIN
                                                        ORG_SUB_PARTITION
                                                        subpart
                                                            ON (subpart.id_partition =
                                                                part.id_partition)
                                                        JOIN
                                                        ORG_VAL_SUB_PARTITION
                                                        val_subpart
                                                            ON (val_subpart.id_sub_partition =
                                                                subpart.id_sub_partition
                                                            AND val_subpart.id_partition =
                                                                part.id_partition
                                                            AND TO_DATE (
                                                                    val_subpart.cd_val_sub_partition,
                                                                    'dd/mm/yyyy') >
                                                                TRUNC (
                                                                    SYSDATE))
                                                  WHERE part.ti_partition =
                                                        'XML_SES_UPD_UNITA_DOC_KO'
                                                    AND part.cd_partition =
                                                        tmp.cd_partition_xmlsesupdko) THEN
                                           '0' -- non esiste sottopartizione per anno in input
                                       ELSE
                                           '1'
                                   END
                               ELSE
                                   '1' -- controllo partizione per struttura fallito e partizione nulla;
 -- si assume sotto-partizione definita (caso in cui non si usano le partizioni)
                           END
                       ELSE
                           '0'   -- controllo partizione per struttura fallito
                   END
           END    fl_part_xmlsesupdko_aa_ok,
           tmp.fl_part_sesupderr_ok,
           tmp.cd_partition_sesupderr
      FROM ORG_V_CHK_TABLE_PARTITION_UPD tmp;

-- changeset root:1751554768189-274
CREATE OR REPLACE FORCE VIEW VRS_V_VERS_FALLITI_DA_VERIF (ID_STRUT, ID_SESSIONE_VERS, DT_APERTURA, CD_REGISTRO_KEY_UNITA_DOC, AA_KEY_UNITA_DOC, CD_KEY_UNITA_DOC, CD_KEY_DOC_VERS) AS SELECT vers_da_verif.id_strut,
           vers_da_verif.id_sessione_vers_ko,
           vers_da_verif.dt_apertura,
           vers_da_verif.cd_registro_key_unita_doc,
           vers_da_verif.aa_key_unita_doc,
           vers_da_verif.cd_key_unita_doc,
           NULL     cd_key_doc_vers
      FROM VRS_SESSIONE_VERS_ko vers_da_verif
     WHERE vers_da_verif.ti_sessione_vers = 'VERSAMENTO'
       --AND vers_da_verif.ti_stato_sessione_vers = 'CHIUSA_ERR'
       AND vers_da_verif.fl_sessione_err_verif = '0'
       AND EXISTS
               (SELECT 1
                  FROM VRS_SESSIONE_VERS_ko vers_verif
                 WHERE vers_verif.id_strut = vers_da_verif.id_strut
                   AND vers_verif.cd_registro_key_unita_doc =
                       vers_da_verif.cd_registro_key_unita_doc
                   AND vers_verif.aa_key_unita_doc =
                       vers_da_verif.aa_key_unita_doc
                   AND vers_verif.cd_key_unita_doc =
                       vers_da_verif.cd_key_unita_doc
                   AND vers_verif.ti_sessione_vers = 'VERSAMENTO'
                   --AND vers_verif.ti_stato_sessione_vers = 'CHIUSA_ERR'
                   AND vers_verif.fl_sessione_err_verif = '1'
                   AND vers_verif.ds_err_princ = vers_da_verif.ds_err_princ
                   AND vers_verif.ni_file_err = vers_da_verif.ni_file_err)
       AND NOT EXISTS
               (SELECT *
                  FROM ARO_UNITA_DOC ud
                 WHERE ud.id_strut = vers_da_verif.id_strut
                   AND ud.cd_registro_key_unita_doc =
                       vers_da_verif.cd_registro_key_unita_doc
                   AND ud.aa_key_unita_doc = vers_da_verif.aa_key_unita_doc
                   AND ud.cd_key_unita_doc = vers_da_verif.cd_key_unita_doc
                   AND ud.dt_annul >= TRUNC (vers_da_verif.dt_apertura))
    UNION
    SELECT agg_da_verif.id_strut,
           agg_da_verif.id_sessione_vers_ko,
           agg_da_verif.dt_apertura,
           agg_da_verif.cd_registro_key_unita_doc,
           agg_da_verif.aa_key_unita_doc,
           agg_da_verif.cd_key_unita_doc,
           agg_da_verif.cd_key_doc_vers
      FROM VRS_SESSIONE_VERS_ko agg_da_verif
     WHERE agg_da_verif.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO'
       --AND agg_da_verif.ti_stato_sessione_vers = 'CHIUSA_ERR'
       AND agg_da_verif.fl_sessione_err_verif = '0'
       AND EXISTS
               (SELECT 1
                  FROM VRS_SESSIONE_VERS_ko agg_verif
                 WHERE agg_verif.id_strut = agg_da_verif.id_strut
                   AND agg_verif.cd_registro_key_unita_doc =
                       agg_da_verif.cd_registro_key_unita_doc
                   AND agg_verif.aa_key_unita_doc =
                       agg_da_verif.aa_key_unita_doc
                   AND agg_verif.cd_key_unita_doc =
                       agg_da_verif.cd_key_unita_doc
                   AND agg_verif.cd_key_doc_vers =
                       agg_da_verif.cd_key_doc_vers
                   AND agg_verif.ti_sessione_vers = 'AGGIUNGI_DOCUMENTO'
                  -- AND agg_verif.ti_stato_sessione_vers = 'CHIUSA_ERR'
                   AND agg_verif.fl_sessione_err_verif = '1'
                   AND agg_verif.ds_err_princ = agg_da_verif.ds_err_princ
                   AND agg_verif.ni_file_err = agg_da_verif.ni_file_err)
       AND (NOT EXISTS
                (SELECT 1
                   FROM ARO_UNITA_DOC ud
                  WHERE ud.id_strut = agg_da_verif.id_strut
                    AND ud.cd_registro_key_unita_doc =
                        agg_da_verif.cd_registro_key_unita_doc
                    AND ud.aa_key_unita_doc = agg_da_verif.aa_key_unita_doc
                    AND ud.cd_key_unita_doc = agg_da_verif.cd_key_unita_doc
                    AND ud.dt_annul >= TRUNC (agg_da_verif.dt_apertura))
         OR NOT EXISTS
                (SELECT 1
                   FROM ARO_UNITA_DOC ud, ARO_DOC doc
                  WHERE ud.id_strut = agg_da_verif.id_strut
                    AND ud.cd_registro_key_unita_doc =
                        agg_da_verif.cd_registro_key_unita_doc
                    AND ud.aa_key_unita_doc = agg_da_verif.aa_key_unita_doc
                    AND ud.cd_key_unita_doc = agg_da_verif.cd_key_unita_doc
                    AND doc.id_unita_doc = ud.id_unita_doc
                    AND doc.cd_key_doc_vers = agg_da_verif.cd_key_doc_vers
                    AND doc.dt_annul >= TRUNC (agg_da_verif.dt_apertura)));

